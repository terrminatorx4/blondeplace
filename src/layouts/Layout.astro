---
const { title = 'BLONDE PLACE - –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ', description = '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –°–ü–±: –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å, —Å—Ç—Ä–∏–∂–∫–∏, –º–∞–Ω–∏–∫—é—Ä, —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π. Beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥.' } = Astro.props;
---

<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <link rel="canonical" href={Astro.url} />
    
    <!-- üì± PWA MANIFEST -->
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- üçé APPLE PWA -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="BLONDE PLACE" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    
    <!-- üé® PWA THEME -->
    <meta name="theme-color" content="#ff6b9d" />
    <meta name="msapplication-TileColor" content="#ff6b9d" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    
    <!-- üîó FAVICON -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    
    <!-- üìä Google & Yandex -->
    <meta name="google-site-verification" content="QmTdEF5xHLHXsL1FEcotg-xZTPfD14z9BxH6D64b0ds" />
    <meta name="yandex-verification" content="92b03968d7c06925" />
    
    <!-- üåê OpenGraph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://blondeplace.netlify.app/og-image.jpg" />
    <meta property="og:site_name" content="BLONDE PLACE" />
    
    <!-- üê¶ Twitter Card -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="https://blondeplace.netlify.app/og-image.jpg" />
    
    <!-- üéØ PERFECT ACCESSIBILITY -->
    <style>
      .Consultation_consultation__highlight__esun9,
      .Services_services__highlight__lBCUU {
        color: #000000 !important;
        background-color: #ffd700 !important;
        padding: 3px 8px !important;
        border-radius: 4px !important;
        font-weight: bold !important;
        border: 1px solid #000000 !important;
      }
      
      .Button_transparent__6L3R2 {
        color: #ffffff !important;
        background-color: #ff6b9d !important;
        border: 2px solid #000000 !important;
        font-weight: bold !important;
        text-decoration: none !important;
      }
      
      .Button_transparent__6L3R2:hover {
        color: #000000 !important;
        background-color: #ffd700 !important;
        border: 2px solid #000000 !important;
      }
      
      .Services_services__ShMKK,
      .Consultation_consultation__zS8eJ {
        color: #000000 !important;
        background-color: #ffffff !important;
      }
      
      a {
        color: #0066cc !important;
      }
      
      a:hover {
        color: #004499 !important;
      }
      
      h1, h2, h3, h4, h5, h6 {
        color: #000000 !important;
      }
    </style>
    
    <slot name="head" />
  </head>
  <body>
    <slot />
    
    <!-- üì± PWA SERVICE WORKER -->
    <script>
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js', { scope: '/' })
            .then((registration) => {
              console.log('PWA: Service Worker registered successfully:', registration.scope);
              
              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    console.log('PWA: New content available, reload to update');
                  }
                });
              });
            })
            .catch((error) => {
              console.log('PWA: Service Worker registration failed:', error);
            });
        });
      }
      
      // PWA Install prompt
      let deferredPrompt;
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        console.log('PWA: Install prompt available');
      });
      
      // PWA Install button (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
      function installPWA() {
        if (deferredPrompt) {
          deferredPrompt.prompt();
          deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
              console.log('PWA: User accepted install');
            }
            deferredPrompt = null;
          });
        }
      }
    </script>
  </body>
</html>