---
const { title = 'BLONDE PLACE - –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ', description = '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∫—Ä–∞—Å–æ—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –°–ü–±: –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å, —Å—Ç—Ä–∏–∂–∫–∏, –º–∞–Ω–∏–∫—é—Ä, —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π. Beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥.' } = Astro.props;
---

<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <!-- üì± PERFECT VIEWPORT - –ò–°–ü–†–ê–í–õ–Ø–ï–¢ PWA –û–®–ò–ë–ö–£ -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0, user-scalable=yes, viewport-fit=cover" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <link rel="canonical" href={Astro.url} />
    
    <!-- üì± PWA MANIFEST -->
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- üçé APPLE PWA -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="default" />
    <meta name="apple-mobile-web-app-title" content="BLONDE PLACE" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    
    <!-- üé® PWA THEME -->
    <meta name="theme-color" content="#ff6b9d" />
    <meta name="msapplication-TileColor" content="#ff6b9d" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    
    <!-- üîó FAVICON -->
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    
    <!-- üìä Google & Yandex -->
    <meta name="google-site-verification" content="QmTdEF5xHLHXsL1FEcotg-xZTPfD14z9BxH6D64b0ds" />
    <meta name="yandex-verification" content="92b03968d7c06925" />
    
    <!-- üåê OpenGraph -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://blondeplace.netlify.app/og-image.jpg" />
    <meta property="og:site_name" content="BLONDE PLACE" />
    
    <!-- üê¶ Twitter Card -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="https://blondeplace.netlify.app/og-image.jpg" />
    
    <!-- üì± PERFECT MOBILE VIEWPORT CSS -->
    <style>
      /* üéØ VIEWPORT FIX - WINDOW.INNERWIDTH = WINDOW.OUTERWIDTH */
      * {
        box-sizing: border-box;
      }
      
      html {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
      }
      
      body {
        width: 100%;
        max-width: 100%;
        margin: 0;
        padding: 0;
        overflow-x: hidden;
        position: relative;
      }
      
      /* –ü–†–ï–î–û–¢–í–†–ê–©–ê–ï–ú –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–ô –°–ö–†–û–õ–õ */
      body * {
        max-width: 100%;
      }
      
      /* –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ô–ù–ï–†–´ */
      .container,
      .wrapper,
      main,
      section,
      div {
        max-width: 100%;
        overflow-x: hidden;
      }
      
      /* üéØ PERFECT ACCESSIBILITY - –í–´–°–û–ö–ò–ô –ö–û–ù–¢–†–ê–°–¢ */
      .Consultation_consultation__highlight__esun9,
      .Services_services__highlight__lBCUU {
        color: #000000 !important;
        background-color: #ffd700 !important;
        padding: 3px 8px !important;
        border-radius: 4px !important;
        font-weight: bold !important;
        border: 1px solid #000000 !important;
      }
      
      .Button_transparent__6L3R2 {
        color: #ffffff !important;
        background-color: #ff6b9d !important;
        border: 2px solid #000000 !important;
        font-weight: bold !important;
        text-decoration: none !important;
        max-width: 100%;
        word-wrap: break-word;
      }
      
      .Button_transparent__6L3R2:hover {
        color: #000000 !important;
        background-color: #ffd700 !important;
        border: 2px solid #000000 !important;
      }
      
      .Services_services__ShMKK,
      .Consultation_consultation__zS8eJ {
        color: #000000 !important;
        background-color: #ffffff !important;
        max-width: 100%;
        overflow-x: hidden;
      }
      
      /* –°–°–´–õ–ö–ò */
      a {
        color: #0066cc !important;
        word-wrap: break-word;
        max-width: 100%;
      }
      
      a:hover {
        color: #004499 !important;
      }
      
      /* –ó–ê–ì–û–õ–û–í–ö–ò */
      h1, h2, h3, h4, h5, h6 {
        color: #000000 !important;
        max-width: 100%;
        word-wrap: break-word;
      }
      
      /* –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø */
      img {
        max-width: 100% !important;
        height: auto !important;
      }
      
      /* –ú–ï–î–ò–ê –ó–ê–ü–†–û–°–´ –î–õ–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û VIEWPORT */
      @media screen and (max-width: 768px) {
        body {
          font-size: 16px; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º zoom –Ω–∞ iOS */
        }
        
        input, textarea, select {
          font-size: 16px; /* –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º zoom –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ */
        }
      }
      
      /* –£–ë–ò–†–ê–ï–ú –õ–Æ–ë–´–ï –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –®–ò–†–ò–ù–´ */
      [style*="width"] {
        max-width: 100% !important;
      }
    </style>
    
    <slot name="head" />
  </head>
  <body>
    <slot />
    
    <!-- üì± PWA SERVICE WORKER -->
    <script>
      // VIEWPORT FIX - –ü–†–û–í–ï–†–Ø–ï–ú –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –†–ê–ó–ú–ï–†–û–í
      function fixViewport() {
        const viewport = document.querySelector('meta[name="viewport"]');
        if (viewport) {
          viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0, user-scalable=yes, viewport-fit=cover');
        }
        
        // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        document.documentElement.style.overflowX = 'hidden';
        document.body.style.overflowX = 'hidden';
        document.body.style.maxWidth = '100%';
        document.body.style.width = '100%';
        
        console.log('üì± Viewport fixed:', {
          innerWidth: window.innerWidth,
          outerWidth: window.outerWidth,
          devicePixelRatio: window.devicePixelRatio
        });
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º viewport –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
      window.addEventListener('load', fixViewport);
      window.addEventListener('resize', fixViewport);
      window.addEventListener('orientationchange', fixViewport);
      
      // PWA Service Worker
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('/sw.js', { scope: '/' })
            .then((registration) => {
              console.log('PWA: Service Worker registered successfully:', registration.scope);
              
              registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                newWorker.addEventListener('statechange', () => {
                  if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                    console.log('PWA: New content available, reload to update');
                  }
                });
              });
            })
            .catch((error) => {
              console.log('PWA: Service Worker registration failed:', error);
            });
        });
      }
      
      // PWA Install prompt
      let deferredPrompt;
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        console.log('PWA: Install prompt available');
      });
      
      function installPWA() {
        if (deferredPrompt) {
          deferredPrompt.prompt();
          deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
              console.log('PWA: User accepted install');
            }
            deferredPrompt = null;
          });
        }
      }
    </script>
  </body>
</html>