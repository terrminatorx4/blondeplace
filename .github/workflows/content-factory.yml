name: üè≠ Content Factory (Atomic Lock)

on:
  workflow_dispatch:
    inputs:
      topic_count:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '5'
          - '10'
          - '20'
      category:
        description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞—Ç–µ–π'
        required: true
        default: 'hair-care'
        type: choice
        options:
          - 'hair-care'
          - 'hair-coloring'
          - 'nail-care'
          - 'beauty-tips'
          - 'salon-news'

jobs:
  content-factory:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        thread: ${{ fromJson(format('[{0}]', join(range(1, fromJson(github.event.inputs.topic_count) + 1), ', '))) }}
      max-parallel: 20
      fail-fast: false

    steps:
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        run: |
          npm install --only=production --no-audit --no-fund
          npm install @octokit/rest

      - name: üéØ Get API Keys from Pool (Fixed)
        id: get-keys
        run: |
          echo "üîë Processing API keys for thread ${{ matrix.thread }}"
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ GitHub Secrets
          GEMINI_KEYS_RAW="${{ secrets.GEMINI_API_KEYS_POOL }}"
          OPENROUTER_KEYS_RAW="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
          
          # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–ª—é—á–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
          if [ -z "$GEMINI_KEYS_RAW" ] || [ -z "$OPENROUTER_KEYS_RAW" ]; then
            echo "‚ùå API keys are empty!"
            exit 1
          fi
          
          # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã
          echo "$GEMINI_KEYS_RAW" | tr ',' '\n' > gemini_keys.txt
          echo "$OPENROUTER_KEYS_RAW" | tr ',' '\n' > openrouter_keys.txt
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
          GEMINI_COUNT=$(wc -l < gemini_keys.txt)
          OPENROUTER_COUNT=$(wc -l < openrouter_keys.txt)
          
          echo "üìä Available keys: Gemini=$GEMINI_COUNT, OpenRouter=$OPENROUTER_COUNT"
          
          # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (1-20 -> 0-19)
          THREAD_NUM=${{ matrix.thread }}
          INDEX=$(( ($THREAD_NUM - 1) % 20 + 1 ))
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
          GEMINI_KEY=$(sed -n "${INDEX}p" gemini_keys.txt | tr -d '[:space:]')
          OPENROUTER_KEY=$(sed -n "${INDEX}p" openrouter_keys.txt | tr -d '[:space:]')
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ –ø–æ–ª—É—á–µ–Ω—ã
          if [ -z "$GEMINI_KEY" ] || [ -z "$OPENROUTER_KEY" ]; then
            echo "‚ùå Failed to get API keys for thread $THREAD_NUM"
            echo "üìù Using fallback keys..."
            GEMINI_KEY=$(head -n1 gemini_keys.txt | tr -d '[:space:]')
            OPENROUTER_KEY=$(head -n1 openrouter_keys.txt | tr -d '[:space:]')
          fi
          
          # –í—ã–≤–æ–¥–∏–º –≤ GitHub Output
          echo "GEMINI_API_KEY=$GEMINI_KEY" >> $GITHUB_OUTPUT
          echo "OPENROUTER_API_KEY=$OPENROUTER_KEY" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Thread $THREAD_NUM using key index: $INDEX"
          
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -f gemini_keys.txt openrouter_keys.txt

      - name: üè≠ Generate Content (Thread ${{ matrix.thread }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ steps.get-keys.outputs.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ steps.get-keys.outputs.OPENROUTER_API_KEY }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
        run: |
          echo "üöÄ Starting content generation for thread ${{ matrix.thread }}"
          echo "üìÇ Category: ${{ github.event.inputs.category }}"
          echo "üîë API Keys loaded: Gemini=${#GEMINI_API_KEY}, OpenRouter=${#OPENROUTER_API_KEY}"
          
          # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          cat > generate-content.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const crypto = require('crypto');

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });

          const owner = 'terrminatorx4';
          const repo = 'blondeplace';

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é
          function generateUniqueArticle(thread, category) {
            const timestamp = Date.now();
            const randomId = crypto.randomBytes(6).toString('hex');
            const slug = `beauty-${category}-${randomId}-thread${thread}`;
            
            const topicsByCategory = {
              'hair-care': [
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ—Å',
                '–°–µ–∫—Ä–µ—Ç—ã –∑–¥–æ—Ä–æ–≤—ã—Ö –≤–æ–ª–æ—Å',
                '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –≥–æ–ª–æ–≤—ã',
                '–í–∏—Ç–∞–º–∏–Ω—ã –¥–ª—è –≤–æ–ª–æ—Å',
                '–î–æ–º–∞—à–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –≤–æ–ª–æ—Å'
              ],
              'hair-coloring': [
                '–ú–æ–¥–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞',
                '–¢–µ—Ö–Ω–∏–∫–∏ –±–∞–ª–∞—è–∂ –∏ –æ–º–±—Ä–µ',
                '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å',
                '–¶–≤–µ—Ç–Ω–æ–µ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ',
                '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å'
              ],
              'nail-care': [
                '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π nail-–∞—Ä—Ç',
                '–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≥—Ç–µ–π',
                '–ú–∞–Ω–∏–∫—é—Ä –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö',
                '–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –º–∞–Ω–∏–∫—é—Ä–∞',
                '–£—Ö–æ–¥ –∑–∞ –∫—É—Ç–∏–∫—É–ª–æ–π'
              ],
              'beauty-tips': [
                '–°–µ–∫—Ä–µ—Ç—ã –∫—Ä–∞—Å–∏–≤–æ–π –∫–æ–∂–∏',
                '–ê–Ω—Ç–∏–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —É—Ö–æ–¥',
                '–ú–∞–∫–∏—è–∂ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤',
                '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —É—Ö–æ–¥ –∑–∞ –ª–∏—Ü–æ–º',
                '–ü—Ä–∏—Ä–æ–¥–Ω–∞—è –∫—Ä–∞—Å–æ—Ç–∞'
              ],
              'salon-news': [
                '–ù–æ–≤–∏–Ω–∫–∏ –≤ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã',
                '–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
                '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –∫—Ä–∞—Å–æ—Ç–µ',
                '–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤',
                '–ù–∞–≥—Ä–∞–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è'
              ]
            };
            
            const topics = topicsByCategory[category] || topicsByCategory['hair-care'];
            const randomTopic = topics[Math.floor(Math.random() * topics.length)];
            const title = `${randomTopic} –≤ BLONDE PLACE - –≥–∏–¥ ${new Date().getFullYear()}`;
            
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∞—Å–æ—Ç—ã
            const beautyImages = [
              'photo-1604654894610-df63bc536371', // nail art
              'photo-1599640874199-ed7116b11043', // hair care
              'photo-1596663265814-f764266222d8', // hair coloring
              'photo-1600668601033-2214096611d8', // beauty salon
              'photo-1598554780874-d2d2d2d2d2d2', // skincare
              'photo-1571019613454-1cb2f99b2d8b', // makeup
              'photo-1522337360788-8b13dee7a37e', // spa
              'photo-1485289069136-5ac2b4a1e8d3'  // beauty tools
            ];
            
            const imageIndex = (thread + randomId.charCodeAt(0)) % beautyImages.length;
            const heroImage = `https://images.unsplash.com/${beautyImages[imageIndex]}?q=80&w=2070&auto=format&fit=crop&t=${timestamp}&h=${randomId}`;
            
            const keywordsByCategory = {
              'hair-care': '—É—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å, –∑–¥–æ—Ä–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã, BLONDE PLACE',
              'hair-coloring': '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å, –±–∞–ª–∞—è–∂, –æ–º–±—Ä–µ, —Ü–≤–µ—Ç–Ω—ã–µ –≤–æ–ª–æ—Å—ã, BLONDE PLACE',
              'nail-care': '–º–∞–Ω–∏–∫—é—Ä, nail-–∞—Ä—Ç, —É—Ö–æ–¥ –∑–∞ –Ω–æ–≥—Ç—è–º–∏, –¥–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π, BLONDE PLACE',
              'beauty-tips': '—Å–µ–∫—Ä–µ—Ç—ã –∫—Ä–∞—Å–æ—Ç—ã, —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π, –∫—Ä–∞—Å–æ—Ç–∞, BLONDE PLACE',
              'salon-news': '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –Ω–æ–≤–æ—Å—Ç–∏, –∞–∫—Ü–∏–∏, BLONDE PLACE'
            };
            
            const content = `---
title: "${title}"
description: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ BLONDE PLACE. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –∫—Ä–∞—Å–æ—Ç—ã –∏ —Å—Ç–∏–ª—è."
pubDate: "${new Date().toISOString()}"
updatedDate: "${new Date().toISOString()}"
author: "BLONDE PLACE Beauty Expert"
heroImage: "${heroImage}"
category: "${category}"
tags: ["–∫—Ä–∞—Å–æ—Ç–∞", "BLONDE PLACE", "—Ç—Ä–µ–Ω–¥—ã", "${category}", "—Å—Ç–∏–ª—å"]
keywords: "${keywordsByCategory[category] || '–∫—Ä–∞—Å–æ—Ç–∞, BLONDE PLACE'}"
serviceType: "consultation"
difficulty: "beginner"
duration: "45-90 –º–∏–Ω—É—Ç"
price: "–æ—Ç 2000 —Ä—É–±–ª–µ–π"
schema:
  "@context": "https://schema.org"
  "@type": "Article"
  headline: "${title}"
  description: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ BLONDE PLACE"
  image: "${heroImage}"
  author:
    "@type": "Organization"
    name: "BlondePlace Beauty Studio"
    url: "https://blondeplace.ru"
  publisher:
    "@type": "Organization"
    name: "BlondePlace"
    logo:
      "@type": "ImageObject"
      url: "https://blondeplace.ru/logo.png"
  datePublished: "${new Date().toISOString()}"
  dateModified: "${new Date().toISOString()}"
  mainEntityOfPage:
    "@type": "WebPage"
    "@id": "https://blondeplace.netlify.app/blog/${slug}/"
---

# ${title}

## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∞—Å–æ—Ç—ã BLONDE PLACE

–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã –∫–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç ‚Äî –æ—Å–æ–±–µ–Ω–Ω—ã–π. –ú—ã —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç –≤–∞—à—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É –∏ –ø–æ–º–æ–≥–∞—é—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ.

## –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫—Ä–∞—Å–æ—Ç–µ

### –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞—Å?

- ‚ú® **–û–ø—ã—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞** —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
- üé® **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥** –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É  
- üíé **–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** –æ—Ç –≤–µ–¥—É—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
- üèÜ **–í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã** –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- üíï **–£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞** –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å

### –ù–∞—à–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã

1. **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
2. **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ** ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä
3. **–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ** ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º
4. **–†–µ–∑—É–ª—å—Ç–∞—Ç** ‚Äî –≤–∞—à–∞ –∫—Ä–∞—Å–æ—Ç–∞ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ

## –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã

–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:

- –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä
- –ö–æ–º—Ñ–æ—Ä—Ç –≤–æ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

## –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é

–ü–µ—Ä–µ–¥ –ª—é–±–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.

**–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:**

üìû **–¢–µ–ª–µ—Ñ–æ–Ω**: +7 (981) 960-87-22  
üí¨ **–¢–µ–ª–µ–≥—Ä–∞–º**: @Blondeplace  
üåê **–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å**: dikidi.ru/699327

### –ê–¥—Ä–µ—Å —Å–∞–ª–æ–Ω–∞

üè† **BLONDE PLACE**  
üìç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, —Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞  
‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 21:00

---

*BLONDE PLACE ‚Äî –≤–∞—à –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É. –î–æ–≤–µ—Ä—å—Ç–µ—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º!*
`;
            
            return { slug, content };
          }

          async function main() {
            try {
              const thread = process.env.GITHUB_RUN_NUMBER || Math.floor(Math.random() * 1000);
              const category = process.argv[2] || 'hair-care';
              
              console.log(`üè≠ Generating content for thread ${thread}, category: ${category}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
              if (!process.env.GEMINI_API_KEY || !process.env.OPENROUTER_API_KEY) {
                console.log('‚ö†Ô∏è API keys not available, generating basic content');
              }
              
              const { slug, content } = generateUniqueArticle(thread, category);
              const filePath = `src/content/posts/${slug}.md`;
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
              await octokit.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: filePath,
                message: `üè≠ Add new beauty article: ${slug} (thread ${thread})`,
                content: Buffer.from(content).toString('base64')
              });
              
              console.log(`‚úÖ Successfully created: ${filePath}`);
              console.log(`üîó URL: https://blondeplace.netlify.app/blog/${slug}/`);
              console.log(`üìä Thread ${thread} completed successfully`);
              
            } catch (error) {
              console.error('‚ùå Error:', error.message);
              console.error('üìã Stack:', error.stack);
              process.exit(1);
            }
          }

          main();
          EOF
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
          node generate-content.js "${{ github.event.inputs.category }}"

      - name: üéâ Thread Completion
        if: success()
        run: |
          echo "‚úÖ Thread ${{ matrix.thread }} completed successfully"
          echo "üìÇ Category: ${{ github.event.inputs.category }}"
          echo "üåê Content will be deployed automatically"

  completion:
    needs: content-factory
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üéä Factory Completion Report
        run: |
          echo "üè≠ CONTENT FACTORY COMPLETED"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìä Generated articles: ${{ github.event.inputs.topic_count }}"
          echo "üìÇ Category: ${{ github.event.inputs.category }}"
          echo "üåê Site: https://blondeplace.netlify.app/"
          echo "üîó Blog: https://blondeplace.netlify.app/blog/"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéâ All content generated successfully!"