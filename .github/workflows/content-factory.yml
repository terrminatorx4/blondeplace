name: üè≠ Content Factory (Atomic Lock)

on:
  workflow_dispatch:
    inputs:
      topic_count:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        required: true
        default: '1'
        type: choice
        options:
          - '1'
          - '5'
          - '10'
          - '20'
      category:
        description: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç–∞—Ç–µ–π'
        required: true
        default: 'hair-care'
        type: choice
        options:
          - 'hair-care'
          - 'hair-coloring'
          - 'nail-care'
          - 'beauty-tips'
          - 'salon-news'

jobs:
  content-factory:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        thread: ${{ fromJson(format('[{0}]', join(range(1, fromJson(github.event.inputs.topic_count) + 1), ', '))) }}
      max-parallel: 20
      fail-fast: false

    steps:
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        run: |
          npm install --only=production --no-audit --no-fund
          npm install @octokit/rest

      - name: üéØ Get API Keys from Pool
        id: get-keys
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ GitHub Secrets (–ø—É–ª –∏–∑ 20 –∫–ª—é—á–µ–π)
          GEMINI_KEYS="${{ secrets.GEMINI_API_KEYS_POOL }}"
          OPENROUTER_KEYS="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
          
          # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –±–µ—Ä–µ–º –∫–ª—é—á –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ—Ç–æ–∫–∞
          IFS=',' read -ra GEMINI_ARRAY <<< "$GEMINI_KEYS"
          IFS=',' read -ra OPENROUTER_ARRAY <<< "$OPENROUTER_KEYS"
          
          # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ (0-19)
          INDEX=$(( (${{ matrix.thread }} - 1) % 20 ))
          
          echo "GEMINI_API_KEY=${GEMINI_ARRAY[$INDEX]}" >> $GITHUB_OUTPUT
          echo "OPENROUTER_API_KEY=${OPENROUTER_ARRAY[$INDEX]}" >> $GITHUB_OUTPUT
          
          echo "üîë Thread ${{ matrix.thread }} using API key index: $INDEX"

      - name: üè≠ Generate Content (Thread ${{ matrix.thread }})
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GEMINI_API_KEY: ${{ steps.get-keys.outputs.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ steps.get-keys.outputs.OPENROUTER_API_KEY }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
        run: |
          echo "üöÄ Starting content generation for thread ${{ matrix.thread }}"
          echo "üìÇ Category: ${{ github.event.inputs.category }}"
          
          # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          cat > generate-content.js << 'EOF'
          const { Octokit } = require('@octokit/rest');
          const crypto = require('crypto');

          const octokit = new Octokit({
            auth: process.env.GITHUB_TOKEN
          });

          const owner = 'terrminatorx4';
          const repo = 'blondeplace';

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é
          function generateUniqueArticle(thread, category) {
            const timestamp = Date.now();
            const randomId = crypto.randomBytes(4).toString('hex');
            const slug = `beauty-${category}-${thread}-${randomId}`;
            
            const topics = {
              'hair-care': ['–£—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å', '–ü–∏—Ç–∞–Ω–∏–µ –≤–æ–ª–æ—Å'],
              'hair-coloring': ['–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å', '–ú–æ–¥–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏', '–¢–µ—Ö–Ω–∏–∫–∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è'],
              'nail-care': ['–ú–∞–Ω–∏–∫—é—Ä', '–î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π', '–£—Ö–æ–¥ –∑–∞ –Ω–æ–≥—Ç—è–º–∏'],
              'beauty-tips': ['–°–µ–∫—Ä–µ—Ç—ã –∫—Ä–∞—Å–æ—Ç—ã', '–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π', '–ú–∞–∫–∏—è–∂'],
              'salon-news': ['–ù–æ–≤–æ—Å—Ç–∏ —Å–∞–ª–æ–Ω–∞', '–ê–∫—Ü–∏–∏', '–°–æ–±—ã—Ç–∏—è']
            };
            
            const topicList = topics[category] || topics['hair-care'];
            const topic = topicList[thread % topicList.length];
            
            const title = `${topic} –≤ BLONDE PLACE - —Ç—Ä–µ–Ω–¥ ${new Date().getFullYear()}`;
            
            // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±–µ–∑ 404
            const beautyImages = [
              'photo-1604654894610-df63bc536371',
              'photo-1599640874199-ed7116b11043',
              'photo-1596663265814-f764266222d8',
              'photo-1600668601033-2214096611d8'
            ];
            const imageId = beautyImages[thread % beautyImages.length];
            const heroImage = `https://images.unsplash.com/${imageId}?q=80&w=2070&auto=format&fit=crop&t=${timestamp}&h=${randomId}`;
            
            const content = `---
title: "${title}"
description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BLONDE PLACE. –£–∑–Ω–∞–π—Ç–µ –≤—Å–µ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –∏ —Ç–µ—Ö–Ω–∏–∫–∞—Ö –∫—Ä–∞—Å–æ—Ç—ã."
pubDate: "${new Date().toISOString()}"
updatedDate: "${new Date().toISOString()}"
author: "BLONDE PLACE Beauty Expert"
heroImage: "${heroImage}"
category: "${category}"
tags: ["–∫—Ä–∞—Å–æ—Ç–∞", "BLONDE PLACE", "—Ç—Ä–µ–Ω–¥—ã", "${category}"]
keywords: "${topic}, BLONDE PLACE, –∫—Ä–∞—Å–æ—Ç–∞, —Å–∞–ª–æ–Ω, ${category}, —Ç—Ä–µ–Ω–¥—ã ${new Date().getFullYear()}"
serviceType: "consultation"
difficulty: "beginner"
duration: "30-60 –º–∏–Ω—É—Ç"
price: "–æ—Ç 1500 —Ä—É–±–ª–µ–π"
schema:
  "@context": "https://schema.org"
  "@type": "Article"
  headline: "${title}"
  description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BLONDE PLACE"
  image: "${heroImage}"
  author:
    "@type": "Organization"
    name: "BlondePlace Beauty Studio"
    url: "https://blondeplace.ru"
  publisher:
    "@type": "Organization"
    name: "BlondePlace"
    logo:
      "@type": "ImageObject"
      url: "https://blondeplace.ru/logo.png"
  datePublished: "${new Date().toISOString()}"
  dateModified: "${new Date().toISOString()}"
  mainEntityOfPage:
    "@type": "WebPage"
    "@id": "https://blondeplace.netlify.app/blog/${slug}/"
---

# ${title}

## –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤ BLONDE PLACE

–í –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–≤—ã—à–∞—é—Ç –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–ª–µ–¥—è—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã.

## –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç BLONDE PLACE?

- ‚ú® –û–ø—ã—Ç–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
- üé® –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É  
- üíé –ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
- üèÜ –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞
- üíï –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞

## –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å

–ü–µ—Ä–µ–¥ –ª—é–±–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä–æ–π –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å.

**–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:**

üìû **–¢–µ–ª–µ—Ñ–æ–Ω**: +7 (981) 960-87-22  
üí¨ **–¢–µ–ª–µ–≥—Ä–∞–º**: @Blondeplace  
üåê **–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å**: dikidi.ru/699327

---

*BLONDE PLACE - –≤–∞—à —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ*
`;
            
            return { slug, content };
          }

          async function main() {
            try {
              const thread = process.env.GITHUB_RUN_ID ? process.env.GITHUB_RUN_ID.slice(-2) : '1';
              const category = process.argv[2] || 'hair-care';
              
              console.log(`üè≠ Generating content for thread ${thread}, category: ${category}`);
              
              const { slug, content } = generateUniqueArticle(thread, category);
              const filePath = `src/content/posts/${slug}.md`;
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
              await octokit.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: filePath,
                message: `üè≠ Add new article: ${slug}`,
                content: Buffer.from(content).toString('base64')
              });
              
              console.log(`‚úÖ Successfully created: ${filePath}`);
              console.log(`üîó URL: https://blondeplace.netlify.app/blog/${slug}/`);
              
            } catch (error) {
              console.error('‚ùå Error:', error.message);
              process.exit(1);
            }
          }

          main();
          EOF
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
          node generate-content.js "${{ github.event.inputs.category }}"

      - name: üöÄ Trigger Netlify Deploy
        if: success()
        run: |
          echo "üöÄ Content generated successfully for thread ${{ matrix.thread }}"
          echo "üåê Netlify will auto-deploy from GitHub"

  completion:
    needs: content-factory
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üéâ Factory Completion Report
        run: |
          echo "üè≠ CONTENT FACTORY COMPLETED"
          echo "üìä Generated articles: ${{ github.event.inputs.topic_count }}"
          echo "üìÇ Category: ${{ github.event.inputs.category }}"
          echo "üåê Site: https://blondeplace.netlify.app/"
          echo "üîó Blog: https://blondeplace.netlify.app/blog/"