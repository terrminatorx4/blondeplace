name: üöÄ BlondePlace Beauty Factory (Atomic Lock)

on:
  workflow_dispatch:
    inputs:
      model_choice:
        description: '–ö–∞–∫—É—é –º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?'
        required: true
        default: 'gemini'
        type: choice
        options:
        - gemini
        - openrouter
      batch_size_per_thread:
        description: '–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ö–ê–ñ–î–´–ú –ø–æ—Ç–æ–∫–æ–º?'
        required: true
        default: '5'
      threads:
        description: '–°–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—Å—Ç–∏—Ç—å –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û (1-20)?'
        required: true
        default: '10'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Create thread matrix
        id: set_matrix
        run: |
          MAX_THREADS=20
          REQUESTED_THREADS=${{ github.event.inputs.threads || 10 }}
          
          if (( REQUESTED_THREADS > MAX_THREADS )); then
            echo "::warning::–ó–∞–ø—Ä–æ—à–µ–Ω–æ –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ (${REQUESTED_THREADS}), —á–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ –∫–ª—é—á–µ–π (${MAX_THREADS}). –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${MAX_THREADS}."
            REQUESTED_THREADS=$MAX_THREADS
          fi
          MATRIX=$(jq -cn --argjson n "$REQUESTED_THREADS" '[range(1; $n + 1)]')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  generate_and_publish:
    needs: prepare
    permissions:
      contents: write
      
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        thread: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - name: ‚¨áÔ∏è Checkout repo (Beauty Thread ${{ matrix.thread }})
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: ‚öôÔ∏è Setup Node.js (Beauty Thread ${{ matrix.thread }})
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üì¶ Install dependencies (Beauty Thread ${{ matrix.thread }})
        run: npm install

      - name: üîë Set API Key for Beauty Thread ${{ matrix.thread }}
        id: set_key
        run: |
          MODEL_CHOICE="${{ github.event.inputs.model_choice || 'gemini' }}"
          if [ "$MODEL_CHOICE" == "openrouter" ]; then
            API_KEYS="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
          else
            API_KEYS="${{ secrets.GEMINI_API_KEYS_POOL }}"
          fi
          
          CURRENT_KEY=$(echo "$API_KEYS" | sed -n '${{ matrix.thread }}p' | tr -d '\r')
          if [[ -z "$CURRENT_KEY" ]]; then
            echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å API-–∫–ª—é—á –¥–ª—è –ø–æ—Ç–æ–∫–∞ #${{ matrix.thread }} –¥–ª—è –º–æ–¥–µ–ª–∏ ${MODEL_CHOICE}."
            exit 1
          fi
          echo "key=$CURRENT_KEY" >> $GITHUB_OUTPUT

      - name: üé® Run Beauty Factory & üì¢ Publish & Notify (Beauty Thread ${{ matrix.thread }})
        env:
          MODEL_CHOICE: ${{ github.event.inputs.model_choice || 'gemini' }}
          API_KEY_CURRENT: ${{ steps.set_key.outputs.key }}
          BATCH_SIZE: ${{ github.event.inputs.batch_size_per_thread || 5 }}
          TOTAL_THREADS: ${{ github.event.inputs.threads || 10 }}
          THREAD_ID: ${{ matrix.thread }}
        run: |
          git config --global user.name 'BlondePlace Beauty Bot'
          git config --global user.email 'beauty-bot@blondeplace.ru'
          git config --global pull.rebase false
          
          echo "--- üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é beauty –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---"
          
          npm run factory
          
          if [[ -z $(git status --porcelain) ]]; then
            echo "‚úÖ üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –ù–æ–≤—ã—Ö beauty —Å—Ç–∞—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. Beauty –º–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            exit 0
          fi

          echo "üî• üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ beauty —Ñ–∞–π–ª—ã. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏..."
          
          MAX_RETRIES=5
          RETRY_DELAY=5
          for ((i=1; i<=MAX_RETRIES; i++)); do
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ staging
            git add src/content/posts/*.md
            
            # Stash –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ pull
            git stash push -m "Temporary stash for pull"
            
            # –î–µ–ª–∞–µ–º pull
            git pull origin main
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            git stash pop || echo "Stash already applied"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–Ω–æ–≤–∞ (–Ω–∞ —Å–ª—É—á–∞–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
            git add src/content/posts/*.md
            
            # –ö–æ–º–º–∏—Ç–∏–º
            git commit -m "üé® Beauty –∫–æ–Ω—Ç–µ–Ω—Ç: –ø–∞—á–∫–∞ –æ—Ç Beauty –ü–æ—Ç–æ–∫–∞ ‚Ññ${{ matrix.thread }}" || echo "Nothing to commit"
            
            if git push; then
              echo "‚úÖ Beauty –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ‚Ññ$i."
              break
            else
              if [ "$i" -eq "$MAX_RETRIES" ]; then
                echo "::error::–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å beauty –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ $MAX_RETRIES –ø–æ–ø—ã—Ç–æ–∫."
                exit 1
              fi
              echo "[!] Beauty –∫–æ–Ω—Ñ–ª–∏–∫—Ç! –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ$i –Ω–µ —É–¥–∞–ª–∞—Å—å. –ñ–¥—É ${RETRY_DELAY}—Å –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞..."
              git reset --hard HEAD~1
              sleep $RETRY_DELAY
            fi
          done
          
          commit_after=$(git rev-parse HEAD)
          commit_before=$(git rev-parse HEAD~1)
          
          NEW_FILES=$(git diff --name-only $commit_before $commit_after -- 'src/content/posts/*.md' 2>/dev/null || echo "")
          
          if [[ -n "$NEW_FILES" ]]; then
            echo "üì¢ üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è IndexNow..."
            API_KEY="d1b055ab1eb146d892169bbb2c96550e"
            HOST="blondeplace.netlify.app"

            URL_JSON_ARRAY=$(for file in $NEW_FILES; do slug=$(basename "$file" .md); echo "https://blondeplace.netlify.app/blog/${slug}/"; done | jq -R . | jq -s .)

            JSON_PAYLOAD=$(jq -n \
                            --arg host "$HOST" \
                            --arg key "$API_KEY" \
                            --argjson urls "$URL_JSON_ARRAY" \
                            '{host: $host, key: $key, urlList: $urls}')
            
            echo "--- Beauty –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞–∫–µ—Ç–∞ –¥–ª—è IndexNow (Beauty –ü–æ—Ç–æ–∫ ‚Ññ${{ matrix.thread }}) ---"
            echo "$JSON_PAYLOAD"
            echo "--- –ö–æ–Ω–µ—Ü beauty –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ---"
            
            curl -X POST "https://yandex.com/indexnow" -H "Content-Type: application/json; charset=utf-8" -d "$JSON_PAYLOAD"
            curl -X POST "https://www.bing.com/indexnow" -H "Content-Type: application/json; charset=utf-8" -d "$JSON_PAYLOAD"
          fi
          
          echo -e "\n‚úÖ üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: Beauty –º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
