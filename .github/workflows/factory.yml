name: üöÄ BlondePlace Beauty Factory (Atomic Lock)

on:
  workflow_dispatch:
    inputs:
      model_choice:
        description: '–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏ (gemini/openrouter)'
        required: true
        default: 'gemini'
        type: string
      articles_per_thread:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ 1 –ø–æ—Ç–æ–∫'
        required: true
        default: '1'
        type: string
      thread_count:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)'
        required: true
        default: '1'
        type: string

jobs:
  generate_and_publish:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        thread: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      max-parallel: 20
      fail-fast: false

    steps:
      - name: ‚úÖ Skip Extra Threads
        if: ${{ matrix.thread > fromJson(github.event.inputs.thread_count) }}
        run: |
          echo "‚è≠Ô∏è Skipping thread ${{ matrix.thread }} (only ${{ github.event.inputs.thread_count }} threads requested)"
          exit 0

      - name: ‚úÖ Checkout Repository
        if: ${{ matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: üì¶ Setup Node.js
        if: ${{ matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üîß Install Dependencies
        if: ${{ matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        run: |
          npm install
          echo "Dependencies installed successfully"

      - name: üîë Get API Keys from Pool (IMPROVED)
        if: ${{ matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        id: get-keys
        run: |
          echo "üîë Processing API keys for thread ${{ matrix.thread }}"
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ GitHub Secrets
          GEMINI_KEYS_RAW="${{ secrets.GEMINI_API_KEYS_POOL }}"
          OPENROUTER_KEYS_RAW="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
          
          echo "üìä Gemini keys available: $([ -n "$GEMINI_KEYS_RAW" ] && echo "YES" || echo "NO")"
          echo "üìä OpenRouter keys available: $([ -n "$OPENROUTER_KEYS_RAW" ] && echo "YES" || echo "NO")"
          
          # –ü–†–û–í–ï–†–Ø–ï–ú –ù–ê–õ–ò–ß–ò–ï –ù–£–ñ–ù–û–ô –ú–û–î–ï–õ–ò
          if [ "${{ github.event.inputs.model_choice }}" == "gemini" ]; then
            if [ -z "$GEMINI_KEYS_RAW" ]; then
              echo "‚ùå Gemini model selected but no Gemini keys available!"
              exit 1
            fi
          elif [ "${{ github.event.inputs.model_choice }}" == "openrouter" ]; then
            if [ -z "$OPENROUTER_KEYS_RAW" ]; then
              echo "‚ùå OpenRouter model selected but no OpenRouter keys available!"
              echo "üí° Tip: Add OPENROUTER_API_KEYS_POOL secret or use 'gemini' model"
              exit 1
            fi
          fi
          
          # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤—ã –∫–ª—é—á–µ–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if [ -n "$GEMINI_KEYS_RAW" ]; then
            echo "$GEMINI_KEYS_RAW" | tr ',' '\n' > gemini_keys.txt
            GEMINI_COUNT=$(wc -l < gemini_keys.txt)
            echo "üìä Gemini keys loaded: $GEMINI_COUNT"
          fi
          
          if [ -n "$OPENROUTER_KEYS_RAW" ]; then
            echo "$OPENROUTER_KEYS_RAW" | tr ',' '\n' > openrouter_keys.txt
            OPENROUTER_COUNT=$(wc -l < openrouter_keys.txt)
            echo "üìä OpenRouter keys loaded: $OPENROUTER_COUNT"
          fi
          
          # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
          THREAD_NUM=${{ matrix.thread }}
          INDEX=$(( ($THREAD_NUM - 1) % 20 + 1 ))
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
          if [ "${{ github.event.inputs.model_choice }}" == "gemini" ]; then
            GEMINI_KEY=$(sed -n "${INDEX}p" gemini_keys.txt | tr -d '[:space:]')
            if [ -z "$GEMINI_KEY" ]; then
              GEMINI_KEY=$(head -n1 gemini_keys.txt | tr -d '[:space:]')
            fi
            echo "GEMINI_API_KEY_CURRENT=$GEMINI_KEY" >> $GITHUB_ENV
            echo "‚úÖ Thread $THREAD_NUM using Gemini key index: $INDEX"
          
          elif [ "${{ github.event.inputs.model_choice }}" == "openrouter" ]; then
            OPENROUTER_KEY=$(sed -n "${INDEX}p" openrouter_keys.txt | tr -d '[:space:]')
            if [ -z "$OPENROUTER_KEY" ]; then
              OPENROUTER_KEY=$(head -n1 openrouter_keys.txt | tr -d '[:space:]')
            fi
            echo "OPENROUTER_API_KEY_CURRENT=$OPENROUTER_KEY" >> $GITHUB_ENV
            echo "‚úÖ Thread $THREAD_NUM using OpenRouter key index: $INDEX"
          fi
          
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -f gemini_keys.txt openrouter_keys.txt

      - name: üè≠ Generate Content (Thread ${{ matrix.thread }})
        if: ${{ matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        env:
          MODEL_CHOICE: ${{ github.event.inputs.model_choice }}
          BATCH_SIZE_PER_THREAD: ${{ github.event.inputs.articles_per_thread }}
          THREAD_ID: ${{ matrix.thread }}
        run: |
          git config --global user.name 'BlondePlace Beauty Bot'
          git config --global user.email 'beauty-bot@blondeplace.ru'
          
          echo "--- üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é beauty –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---"
          echo "ü§ñ –ú–æ–¥–µ–ª—å: ${{ github.event.inputs.model_choice }}"
          echo "üìä –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: ${{ github.event.inputs.articles_per_thread }}"
          echo "üßµ –í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤: ${{ github.event.inputs.thread_count }}"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º factory.js —á–µ—Ä–µ–∑ npm script
          npm run factory
          
          if [[ -z $(git status --porcelain) ]]; then
            echo "‚úÖ Thread ${{ matrix.thread }}: –ö–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω"
            exit 0
          fi
          
          echo "üî• Thread ${{ matrix.thread }}: –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π beauty –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—É–±–ª–∏–∫—É—é..."
          
          git add src/content/posts/*.md
          git commit -m "üé® Beauty content from thread ${{ matrix.thread }} (${{ github.event.inputs.model_choice }})"
          git pull --rebase
          git push

      - name: üéâ Thread Success
        if: ${{ success() && matrix.thread <= fromJson(github.event.inputs.thread_count) }}
        run: |
          echo "‚úÖ BEAUTY THREAD ${{ matrix.thread }} COMPLETED"
          echo "ü§ñ Model: ${{ github.event.inputs.model_choice }}"
          echo "üìä Articles per thread: ${{ github.event.inputs.articles_per_thread }}"
          echo "üé® Beauty content generated successfully"

  completion:
    needs: generate_and_publish
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üéä Beauty Factory Report
        run: |
          echo "üöÄ BLONDE PLACE BEAUTY FACTORY COMPLETED"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "ü§ñ Model used: ${{ github.event.inputs.model_choice }}"
          echo "üìä Articles per thread: ${{ github.event.inputs.articles_per_thread }}"
          echo "üßµ Total threads: ${{ github.event.inputs.thread_count }}"
          echo "üåê Site: https://blondeplace.netlify.app/"
          echo "üîó Blog: https://blondeplace.netlify.app/blog/"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéâ Beauty mission accomplished!"