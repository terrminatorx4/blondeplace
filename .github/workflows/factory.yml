name: üé® BlondePlace Beauty Content Factory

on:
  workflow_dispatch:
    inputs:
      model_choice:
        description: '–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏'
        required: true
        default: 'gemini'
        type: choice
        options:
        - gemini
        - openrouter
      batch_size_per_thread:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫'
        required: true
        default: '5'
        type: string
      threads:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤'
        required: true
        default: '3'
        type: string

permissions:
  contents: write
  actions: write

env:
  NODE_VERSION: '18'

jobs:
  beauty-content-generation:
    name: üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Beauty –ö–æ–Ω—Ç–µ–Ω—Ç–∞ (–ü–æ—Ç–æ–∫ ${{ matrix.thread }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        thread: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      max-parallel: 20
      fail-fast: false
    
    if: matrix.thread <= fromJSON(github.event.inputs.threads || '3')
    
    steps:
      - name: üõí Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ Install dependencies
        run: |
          npm install
          npm list --depth=0

      - name: üîë Setup API Keys
        run: |
          echo "üîë Processing API keys for thread ${{ matrix.thread }}"
          
          if [ "${{ github.event.inputs.model_choice }}" == "gemini" ]; then
            echo "üìä Setting up Gemini API keys..."
            GEMINI_KEYS="${{ secrets.GEMINI_API_KEYS_POOL }}"
            if [ -z "$GEMINI_KEYS" ]; then
              echo "‚ùå GEMINI_API_KEYS_POOL is empty!"
              exit 1
            fi
            
            echo "üìä Gemini keys available: YES"
            echo "üìä OpenRouter keys available: NO"
            
            GEMINI_KEYS_COUNT=$(echo "$GEMINI_KEYS" | tr ',' '\n' | wc -l)
            echo "üìä Gemini keys loaded: $GEMINI_KEYS_COUNT"
            
            KEY_INDEX=$(( (${{ matrix.thread }} - 1) % $GEMINI_KEYS_COUNT + 1 ))
            SELECTED_KEY=$(echo "$GEMINI_KEYS" | tr ',' '\n' | sed -n "${KEY_INDEX}p")
            
            echo "‚úÖ Thread ${{ matrix.thread }} using Gemini key index: $KEY_INDEX"
            echo "GEMINI_API_KEY_CURRENT=$SELECTED_KEY" >> $GITHUB_ENV
          else
            echo "üìä Setting up OpenRouter API keys..."
            OPENROUTER_KEYS="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
            if [ -z "$OPENROUTER_KEYS" ]; then
              echo "‚ùå OPENROUTER_API_KEYS_POOL is empty!"
              exit 1
            fi
            
            echo "üìä Gemini keys available: NO"
            echo "üìä OpenRouter keys available: YES"
            
            OPENROUTER_KEYS_COUNT=$(echo "$OPENROUTER_KEYS" | tr ',' '\n' | wc -l)
            echo "üìä OpenRouter keys loaded: $OPENROUTER_KEYS_COUNT"
            
            KEY_INDEX=$(( (${{ matrix.thread }} - 1) % $OPENROUTER_KEYS_COUNT + 1 ))
            SELECTED_KEY=$(echo "$OPENROUTER_KEYS" | tr ',' '\n' | sed -n "${KEY_INDEX}p")
            
            echo "‚úÖ Thread ${{ matrix.thread }} using OpenRouter key index: $KEY_INDEX"
            echo "OPENROUTER_API_KEY_CURRENT=$SELECTED_KEY" >> $GITHUB_ENV
          fi

      - name: üé® Run Beauty Factory & üì¢ Publish & Notify (Thread ${{ matrix.thread }})
        env:
          MODEL_CHOICE: ${{ github.event.inputs.model_choice || 'gemini' }}
          BATCH_SIZE_PER_THREAD: ${{ github.event.inputs.batch_size_per_thread || 5 }}
          TOTAL_THREADS: ${{ github.event.inputs.threads || 3 }}
          THREAD_ID: ${{ matrix.thread }}
        run: |
          git config --global user.name 'BlondePlace Beauty Bot'
          git config --global user.email 'beauty-bot@blondeplace.ru'
          git config --global pull.rebase false
          
          echo "--- üé® BEAUTY –ü–û–¢–û–ö #${{ matrix.thread }}: –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é beauty –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---"
          echo "ü§ñ –ú–æ–¥–µ–ª—å: ${{ github.event.inputs.model_choice || 'gemini' }}"
          echo "üìä –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: ${{ github.event.inputs.batch_size_per_thread || 5 }}"
          echo "üßµ –í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤: ${{ github.event.inputs.threads || 3 }}"
          
          npm run factory
          
          if [[ -z $(git status --porcelain) ]]; then
            echo "‚úÖ Thread ${{ matrix.thread }}: –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ."
            exit 0
          fi

          echo "üî• Thread ${{ matrix.thread }}: –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π beauty –∫–æ–Ω—Ç–µ–Ω—Ç. –ü—É–±–ª–∏–∫—É—é..."
          
          # Atomic commit and push with conflict resolution
          MAX_RETRIES=5
          RETRY_DELAY=3
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "üîÑ Attempt $i/$MAX_RETRIES: Syncing and pushing..."
            
            # Stash any changes first
            git stash push -u -m "Thread ${{ matrix.thread }} - attempt $i" || echo "Nothing to stash"
            
            # Pull latest changes
            git pull --rebase origin main || echo "Pull completed"
            
            # Pop stashed changes back
            git stash pop || echo "No stash to pop"
            
            # Add files
            git add src/content/posts/*.md 2>/dev/null || echo "No files to add"
            
            # Check if there is anything to commit
            if git diff --cached --quiet; then
              echo "‚úÖ No changes to commit in attempt $i"
              break
            fi
            
            # Commit
            git commit -m "üé® Beauty content from thread ${{ matrix.thread }} (${{ github.event.inputs.model_choice || 'gemini' }})"
            
            # Try to push
            if git push origin main; then
              echo "‚úÖ Push successful on attempt $i"
              break
            else
              echo "‚ö†Ô∏è Push failed on attempt $i"
              if [ $i -eq $MAX_RETRIES ]; then
                echo "::error::Failed to push after $MAX_RETRIES attempts"
                exit 1
              else
                # Reset the commit for retry
                git reset HEAD~1
                sleep $RETRY_DELAY
              fi
            fi
          done

  notify-completion:
    name: üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    runs-on: ubuntu-latest
    needs: beauty-content-generation
    if: always()
    
    steps:
      - name: üìä Summary
        run: |
          echo "üé® === BLONDEPLACE BEAUTY FACTORY –ó–ê–í–ï–†–®–ï–ù–ê ==="
          echo "üíÑ –ú–æ–¥–µ–ª—å: ${{ github.event.inputs.model_choice || 'gemini' }}"
          echo "üìù –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: ${{ github.event.inputs.batch_size_per_thread || 5 }}"
          echo "üßµ –ü–æ—Ç–æ–∫–æ–≤: ${{ github.event.inputs.threads || 3 }}"
          echo "üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${{ needs.beauty-content-generation.result }}"
          echo ""
          echo "üè™ –ü—Ä–æ–µ–∫—Ç: BlondePlace Beauty Blog"
          echo "üåê –°–∞–π—Ç: https://blondeplace.netlify.app"
          echo "üíÖ –°–∞–ª–æ–Ω: https://blondeplace.ru"
