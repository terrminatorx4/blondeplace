name: ALPHA-STRIKE v5.1

on:
  workflow_dispatch:
    inputs:
      target_articles:
        description: 'Target articles count'
        required: true
        default: '20'
        type: string
      target_threads:
        description: 'Target threads count'
        required: true
        default: '20'
        type: string
      model_choice:
        description: 'AI Model to use'
        required: true
        default: 'gemini'
        type: choice
        options:
          - gemini
          - deepseek

permissions:
  contents: write
  actions: write

jobs:
  alpha-strike-attack:
    name: ALPHA-STRIKE v5.1 (${{ matrix.thread-id }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        thread-id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install Dependencies
        run: npm install @google/generative-ai

      - name: SETUP API KEYS
        run: |
          echo "Processing API keys for thread ${{ matrix.thread-id }}"
          if [ "${{ github.event.inputs.model_choice }}" == "gemini" ]; then
            GEMINI_KEYS="${{ secrets.GEMINI_API_KEYS_POOL }}"
            GEMINI_KEYS_COUNT=$(echo "$GEMINI_KEYS" | tr ',' '\n' | wc -l)
            KEY_INDEX=$(( (${{ matrix.thread-id }} - 1) % $GEMINI_KEYS_COUNT + 1 ))
            SELECTED_KEY=$(echo "$GEMINI_KEYS" | tr ',' '\n' | sed -n "${KEY_INDEX}p")
            echo "GEMINI_API_KEY_CURRENT=$SELECTED_KEY" >> $GITHUB_ENV
            echo "Thread ${{ matrix.thread-id }} using Gemini key: ...${SELECTED_KEY: -4}"
          else
            OPENROUTER_KEYS="${{ secrets.OPENROUTER_API_KEYS_POOL }}"
            OPENROUTER_KEYS_COUNT=$(echo "$OPENROUTER_KEYS" | tr ',' '\n' | wc -l)
            KEY_INDEX=$(( (${{ matrix.thread-id }} - 1) % $OPENROUTER_KEYS_COUNT + 1 ))
            SELECTED_KEY=$(echo "$OPENROUTER_KEYS" | tr ',' '\n' | sed -n "${KEY_INDEX}p")
            echo "OPENROUTER_API_KEY_CURRENT=$SELECTED_KEY" >> $GITHUB_ENV
            echo "Thread ${{ matrix.thread-id }} using OpenRouter key: ...${SELECTED_KEY: -4}"
          fi

      - name: RUN ALPHA-STRIKE v5.1
        env:
          TARGET_ARTICLES: ${{ github.event.inputs.target_articles }}
          MODEL_CHOICE: ${{ github.event.inputs.model_choice }}
          THREAD_ID: ${{ matrix.thread-id }}
        run: |
          echo "ALPHA-STRIKE Thread ${{ matrix.thread-id }} START"
          echo "Articles: ${{ github.event.inputs.target_articles }}"
          echo "Model: ${{ github.event.inputs.model_choice }}"
          
          node alpha-factory.js
          
          # GIT COMMIT AND PUSH LIKE ORIGINAL FACTORY.YML
          if [[ -z $(git status --porcelain) ]]; then
            echo "Thread ${{ matrix.thread-id }}: No new articles created. Finishing."
            exit 0
          fi

          echo "Thread ${{ matrix.thread-id }}: Found new Alpha-Strike content. Publishing..."
          
          # Setup git config
          git config --global user.name 'Alpha-Strike Bot'
          git config --global user.email 'alpha-strike@blondeplace.ru'
          git config --global pull.rebase false
          
          # Atomic commit and push with conflict resolution
          MAX_RETRIES=5
          RETRY_DELAY=3
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Attempt $i/$MAX_RETRIES: Syncing and pushing..."
            
            # Stash any changes first
            git stash push -u -m "Thread ${{ matrix.thread-id }} - attempt $i" || echo "Nothing to stash"
            
            # Pull latest changes
            git pull --rebase origin main || echo "Pull completed"
            
            # Pop stashed changes back
            git stash pop || echo "No stash to pop"
            
            # Add files
            git add src/content/posts/*.md 2>/dev/null || echo "No files to add"
            
            # Check if there's anything to commit
            if git diff --cached --quiet; then
              echo "No changes to commit in attempt $i"
              break
            fi
            
            # Commit
            git commit -m "Alpha-Strike content from thread ${{ matrix.thread-id }} (${{ github.event.inputs.model_choice || 'gemini' }})"
            
            # Try to push
            if git push origin main; then
              echo "Push successful on attempt $i"
              break
            else
              echo "Push failed on attempt $i"
              if [ $i -eq $MAX_RETRIES ]; then
                echo "::error::Failed to push after $MAX_RETRIES attempts"
                exit 1
              else
                # Reset the commit for retry
                git reset HEAD~1
                sleep $RETRY_DELAY
              fi
            fi
          done
          
          echo "ALPHA-STRIKE Thread ${{ matrix.thread-id }} COMPLETE"

  quality-control:
    name: QUALITY CONTROL
    runs-on: ubuntu-latest
    needs: alpha-strike-attack
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Quality Control Check
        run: |
          echo "=== QUALITY CONTROL OPERATION ==="
          
          # Find all created articles
          ARTICLES=$(find src/content/posts -name "post*.md" -type f 2>/dev/null | wc -l)
          echo "Found articles: $ARTICLES"
          
          if [ $ARTICLES -gt 0 ]; then
            echo ""
            echo "CREATED ARTICLES LIST:"
            for file in src/content/posts/post*.md; do
              if [ -f "$file" ]; then
                BASENAME=$(basename "$file" .md)
                echo "   https://blondeplace.netlify.app/blog/$BASENAME"
              fi
            done
            
            echo ""
            echo "QUALITY METRICS:"
            
            # Check unique titles
            TITLES=$(grep -h "^title:" src/content/posts/post*.md 2>/dev/null | sort | uniq | wc -l)
            TOTAL_FILES=$(find src/content/posts -name "post*.md" 2>/dev/null | wc -l)
            echo "Unique titles: $TITLES of $TOTAL_FILES"
            
            # Meta-tag length check (samples)
            echo ""
            echo "Meta-tag length check (samples):"
            for file in $(find src/content/posts -name "post*.md" | head -3); do
              if [ -f "$file" ]; then
                TITLE_LINE=$(grep "^title:" "$file" | head -1)
                DESC_LINE=$(grep "^description:" "$file" | head -1)
                TITLE_LEN=$(echo "$TITLE_LINE" | wc -c)
                DESC_LEN=$(echo "$DESC_LINE" | wc -c)
                BASENAME=$(basename "$file")
                echo "   $BASENAME: Title ${TITLE_LEN}chars, Desc ${DESC_LEN}chars"
              fi
            done
            
            # Link check (samples)
            echo ""
            echo "Link check (samples):"
            for file in $(find src/content/posts -name "post*.md" | head -2); do
              if [ -f "$file" ]; then
                LINKS=$(grep -o '\[.*\](https://blondeplace\.ru[^)]*' "$file" 2>/dev/null | wc -l)
                BASENAME=$(basename "$file")
                echo "   $BASENAME: $LINKS external links to blondeplace.ru"
              fi
            done
            
            echo ""
            echo "IndexNow URLs (samples):"
            for file in $(find src/content/posts -name "post*.md" | head -5); do
              if [ -f "$file" ]; then
                BASENAME=$(basename "$file" .md)
                echo "   https://blondeplace.netlify.app/blog/$BASENAME"
              fi
            done
          fi
          
          echo ""
          echo "Quality control completed"

  final-report:
    name: FINAL REPORT
    runs-on: ubuntu-latest
    needs: [alpha-strike-attack, quality-control]
    if: always()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Generate Final Report
        run: |
          ARTICLES_COUNT=${{ github.event.inputs.target_articles }}
          THREADS_COUNT=${{ github.event.inputs.target_threads }}
          MODEL_CHOICE=${{ github.event.inputs.model_choice }}
          EXPECTED_LINKS=$((ARTICLES_COUNT * 85))
          
          echo "# ALPHA-STRIKE OPERATION REPORT v5.1" > ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          echo "## Operation parameters" >> ALPHA_STRIKE_REPORT.md
          echo "- **Articles target**: $ARTICLES_COUNT" >> ALPHA_STRIKE_REPORT.md
          echo "- **Threads used**: $THREADS_COUNT" >> ALPHA_STRIKE_REPORT.md
          echo "- **AI Model**: $MODEL_CHOICE" >> ALPHA_STRIKE_REPORT.md
          echo "- **Expected links**: $EXPECTED_LINKS" >> ALPHA_STRIKE_REPORT.md
          echo "- **Operation date**: $(date)" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          
          # Check actual created articles
          ACTUAL_ARTICLES=$(find src/content/posts -name "post*.md" -type f 2>/dev/null | wc -l)
          echo "## Operation results" >> ALPHA_STRIKE_REPORT.md
          echo "- **Articles created**: $ACTUAL_ARTICLES" >> ALPHA_STRIKE_REPORT.md
          echo "- **Success rate**: $((ACTUAL_ARTICLES * 100 / ARTICLES_COUNT))%" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          
          # List created articles with links
          if [ $ACTUAL_ARTICLES -gt 0 ]; then
            echo "## Created Articles" >> ALPHA_STRIKE_REPORT.md
            for file in src/content/posts/post*.md; do
              if [ -f "$file" ]; then
                BASENAME=$(basename "$file" .md)
                TITLE=$(grep "^title:" "$file" | head -1 | sed 's/title: *"//g' | sed 's/".*//g')
                echo "- [$TITLE](https://blondeplace.netlify.app/blog/$BASENAME)" >> ALPHA_STRIKE_REPORT.md
              fi
            done
            echo "" >> ALPHA_STRIKE_REPORT.md
          fi
          
          echo "## Expected results" >> ALPHA_STRIKE_REPORT.md
          echo "- **Start indexing**: 24-48 hours" >> ALPHA_STRIKE_REPORT.md
          echo "- **Position growth**: 3-7 days" >> ALPHA_STRIKE_REPORT.md
          echo "- **TOP-10 by keywords**: 1-2 weeks" >> ALPHA_STRIKE_REPORT.md
          echo "- **TOP-1 by keywords**: 2-4 weeks" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          
          echo "## Link aggression" >> ALPHA_STRIKE_REPORT.md
          echo "- **Links per article**: 85" >> ALPHA_STRIKE_REPORT.md
          echo "- **Total number**: $((ACTUAL_ARTICLES * 85))" >> ALPHA_STRIKE_REPORT.md
          echo "- **Target URLs**: 10 different blondeplace.ru sections" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          
          echo "## IndexNow Notifications" >> ALPHA_STRIKE_REPORT.md
          echo "- **Yandex IndexNow**: $ACTUAL_ARTICLES URLs sent" >> ALPHA_STRIKE_REPORT.md
          echo "- **Bing IndexNow**: $ACTUAL_ARTICLES URLs sent" >> ALPHA_STRIKE_REPORT.md
          echo "- **Google Sitemap**: $ACTUAL_ARTICLES URLs sent" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          
          echo "## Next steps" >> ALPHA_STRIKE_REPORT.md
          echo "- Wait for indexing (24-48 hours)" >> ALPHA_STRIKE_REPORT.md
          echo "- If necessary, run additional threads" >> ALPHA_STRIKE_REPORT.md
          echo "- Consider scaling to 10,000 articles" >> ALPHA_STRIKE_REPORT.md
          echo "" >> ALPHA_STRIKE_REPORT.md
          echo "---" >> ALPHA_STRIKE_REPORT.md
          echo "*Report created automatically by Alpha-Strike system v5.1*" >> ALPHA_STRIKE_REPORT.md
          
          echo "Report created: ALPHA_STRIKE_REPORT.md"
          cat ALPHA_STRIKE_REPORT.md
          
      - name: Commit Report with Git Pull
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull latest changes first to avoid conflicts
          git pull origin main || echo "Pull completed with conflicts"
          
          git add ALPHA_STRIKE_REPORT.md
          git commit -m "Alpha-Strike v5.1 operation report - $(date)" || echo "Nothing to commit"
          
          # Try to push with retry logic
          for i in {1..3}; do
            if git push origin main; then
              echo "Report pushed successfully"
              break
            else
              echo "Push failed, attempt $i. Pulling and retrying..."
              git pull --rebase origin main
              sleep 2
            fi
          done