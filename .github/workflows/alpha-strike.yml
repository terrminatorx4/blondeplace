name: üöÄüí•  "–¨-" v4.0 - –´ –¢

on:
  workflow_dispatch:
    inputs:
      target_articles:
        description: '–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        required: true
        default: '600'
        type: choice
        options:
          - '600'
          - '1000'
          - '2000'
          - '5000'
      threads:
        description: '–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (1-20)'
        required: true
        default: '20'
        type: choice
        options:
          - '5'
          - '10'
          - '20'
      model_choice:
        description: '—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏'
        required: true
        default: 'gemini'
        type: choice
        options:
          - 'gemini'
          - 'deepseek'
      start_from_thread:
        description: '–∞—á–∞—Ç—å —Å –ø–æ—Ç–æ–∫–∞ (–¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤)'
        required: false
        default: '1'

jobs:
  alpha-strike-preparation:
    name: üéØ –¢   "–¨-"
    runs-on: ubuntu-latest
    outputs:
      articles-per-thread: ${{ steps.calculate.outputs.articles-per-thread }}
      expected-links: ${{ steps.calculate.outputs.expected-links }}
      thread-matrix: ${{ steps.calculate.outputs.thread-matrix }}
      
    steps:
    - name: üìä –°–¢ –¢ 
      id: calculate
      run: |
        TARGET_ARTICLES=${{ github.event.inputs.target_articles || '600' }}
        THREADS=${{ github.event.inputs.threads || '20' }}
        START_FROM=${{ github.event.inputs.start_from_thread || '1' }}
        
        # –∞—Å—á–µ—Ç —Å—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫
        ARTICLES_PER_THREAD=$(( TARGET_ARTICLES / THREADS ))
        if [ $(( TARGET_ARTICLES % THREADS )) -ne 0 ]; then
          ARTICLES_PER_THREAD=$(( ARTICLES_PER_THREAD + 1 ))
        fi
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
        THREAD_LIST=""
        for i in $(seq $START_FROM $THREADS); do
          if [ -z "$THREAD_LIST" ]; then
            THREAD_LIST="$i"
          else
            THREAD_LIST="$THREAD_LIST,$i"
          fi
        done
        
        # –∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ (85 —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å—é)
        EXPECTED_LINKS=$(( TARGET_ARTICLES * 85 ))
        
        echo "articles-per-thread=$ARTICLES_PER_THREAD" >> $GITHUB_OUTPUT
        echo "expected-links=$EXPECTED_LINKS" >> $GITHUB_OUTPUT
        echo "thread-matrix=[$THREAD_LIST]" >> $GITHUB_OUTPUT
        
        echo "üéØ  :"
        echo "   üì∞ –±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: $TARGET_ARTICLES"
        echo "   üîó –∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: $EXPECTED_LINKS"
        echo "   ‚ö° –æ—Ç–æ–∫–æ–≤: $THREADS (–Ω–∞—á–∏–Ω–∞—è —Å $START_FROM)"
        echo "   üìä –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: $ARTICLES_PER_THREAD"
        echo "   üéÆ –æ–¥–µ–ª—å AI: ${{ github.event.inputs.model_choice || 'gemini' }}"

  alpha-strike-attack:
    name: üöÄüí• –¨- #${{ matrix.thread-id }}
    runs-on: ubuntu-latest
    needs: alpha-strike-preparation
    strategy:
      max-parallel: 20
      matrix:
        thread-id: ${{ fromJson(needs.alpha-strike-preparation.outputs.thread-matrix) }}
    
    steps:
    - name: üì•   
      uses: actions/checkout@v4
      
    - name: ‚öôÔ∏è –°–¢ Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: üì¶ –°–¢ –°–°–¢
      run: |
        npm install @google/generative-ai
        npm install node-fetch
        npm install execa
        
    - name: üöÄüí• –° –¨- v4.0 #${{ matrix.thread-id }}
      env:
        THREAD_ID: ${{ matrix.thread-id }}
        ALPHA_ARTICLES: ${{ needs.alpha-strike-preparation.outputs.articles-per-thread }}
        MODEL_CHOICE: ${{ github.event.inputs.model_choice || 'gemini' }}
        API_KEY_CURRENT: ${{ secrets.GEMINI_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "üöÄüí• [–¨- #${{ matrix.thread-id }}] ===  –¢ v4.0 ==="
        echo "üìä –∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ç–æ–∫–∞:"
        echo "   üÜî ID –ø–æ—Ç–æ–∫–∞: ${{ matrix.thread-id }}"
        echo "   üì∞ –°—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${{ needs.alpha-strike-preparation.outputs.articles-per-thread }}"
        echo "   ü§ñ –æ–¥–µ–ª—å AI: ${{ github.event.inputs.model_choice || 'gemini' }}"
        echo "   üîë API –∫–ª—é—á: ...${API_KEY_CURRENT: -4}"
        
        # –∞–ø—É—Å–∫ —Å—É–ø–µ—Ä-—É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        node alpha-factory.js
        
        echo "‚úÖ [–¨- #${{ matrix.thread-id }}] === –¢ –® ==="

  alpha-strike-quality-control:
    name: üîç –¢–¨ –°–¢
    runs-on: ubuntu-latest
    needs: [alpha-strike-preparation, alpha-strike-attack]
    if: always()
    
    steps:
    - name: üì•  
      uses: actions/checkout@v4
      
    - name: üìä  –° –¢–¢
      run: |
        echo "üîç === –¢–¨ –°–¢  ==="
        
        # –æ–¥—Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if [ -d "src/content/posts" ]; then
          POST_COUNT=$(find src/content/posts -name "post*.md" | wc -l)
          echo "üì∞ –∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: $POST_COUNT"
          
          # —Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
          UNIQUE_TITLES=$(find src/content/posts -name "post*.md" -exec grep -h "^title:" {} \; | sort | uniq | wc -l)
          TOTAL_TITLES=$(find src/content/posts -name "post*.md" -exec grep -h "^title:" {} \; | wc -l)
          echo "üìã –Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: $UNIQUE_TITLES –∏–∑ $TOTAL_TITLES"
          
          # —Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ (–ø–µ—Ä–≤—ã–µ 5 —Ñ–∞–π–ª–æ–≤)
          echo "üìè —Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ (–æ–±—Ä–∞–∑—Ü—ã):"
          find src/content/posts -name "post*.md" | head -5 | while read file; do
            TITLE=$(grep "^title:" "$file" | sed 's/title: "//g' | sed 's/"$//g')
            DESC=$(grep "^description:" "$file" | sed 's/description: "//g' | sed 's/"$//g')
            echo "   üìÑ $(basename "$file"): Title ${#TITLE} —Å–∏–º–≤–æ–ª–æ–≤, Description ${#DESC} —Å–∏–º–≤–æ–ª–æ–≤"
          done
          
          # —Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ (–ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞)
          echo "üîó —Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ (–æ–±—Ä–∞–∑—Ü—ã):"
          find src/content/posts -name "post*.md" | head -3 | while read file; do
            LINKS=$(grep -o '<a href=' "$file" | wc -l)
            echo "   üìÑ $(basename "$file"): $LINKS —Å—Å—ã–ª–æ–∫"
          done
        else
          echo "‚ö†Ô∏è –∏—Ä–µ–∫—Ç–æ—Ä–∏—è src/content/posts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        fi
        
        echo "‚úÖ –æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"

  alpha-strike-final-report:
    name: üìã –¨–´ –¢–¢
    runs-on: ubuntu-latest
    needs: [alpha-strike-preparation, alpha-strike-attack, alpha-strike-quality-control]
    if: always()
    
    steps:
    - name: üì•  
      uses: actions/checkout@v4
      
    - name: üìã –° –¢–¢ 
      run: |
        cat > ALPHA_STRIKE_REPORT.md << 'EOF'
# ALPHA-STRIKE OPERATION REPORT v4.0

## Operation parameters
- **Articles created**: ${{ github.event.inputs.target_articles || '600' }}
- **Threads used**: ${{ github.event.inputs.threads || '20' }}
- **AI Model**: ${{ github.event.inputs.model_choice || 'gemini' }}
- **Expected links**: ${{ needs.alpha-strike-preparation.outputs.expected-links }}
- **Operation date**: $(date)

## Operation status
- **Preparation**: ${{ needs.alpha-strike-preparation.result }}
- **Execution**: ${{ needs.alpha-strike-attack.result }}
- **Quality control**: ${{ needs.alpha-strike-quality-control.result }}

## Expected results
- **Start indexing**: 24-48 hours
- **Position growth**: 3-7 days
- **TOP-10 by keywords**: 1-2 weeks
- **TOP-1 by keywords**: 2-4 weeks

## Link aggression
- **Links per article**: 85
- **Total number**: ${{ needs.alpha-strike-preparation.outputs.expected-links }}
- **Target URLs**: 10 different blondeplace.ru sections

## Monitoring
1. Track indexing in Yandex.Webmaster
2. Check positions by key phrases
3. Analyze traffic to main site
4. Control link mass

## Next steps
- Wait for indexing (24-48 hours)
- If necessary, run additional threads
- Consider scaling to 10,000 articles

---
*Report created automatically by Alpha-Strike system v4.0*
EOF
        
        echo "üìã —Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ALPHA_STRIKE_REPORT.md"
        cat ALPHA_STRIKE_REPORT.md
        
    - name: üíæ –°–• –¢–¢
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ALPHA_STRIKE_REPORT.md
        git commit -m "üìã —Ç—á–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ª—å—Ñ–∞-–¥–∞—Ä v4.0 - $(date)" || exit 0
        git push || exit 0