name: ALPHA-STRIKE v4.0

on:
  workflow_dispatch:
    inputs:
      target_articles:
        description: 'Количество статей (введите число)'
        required: true
        default: '20'
        type: string
      threads:
        description: 'Количество потоков'
        required: true
        default: '20'
        type: choice
        options:
          - '5'
          - '10'
          - '20'
      model_choice:
        description: 'AI модель'
        required: true
        default: 'gemini'
        type: choice
        options:
          - 'gemini'
          - 'deepseek'

jobs:
  alpha-strike-preparation:
    name: ПОДГОТОВКА
    runs-on: ubuntu-latest
    outputs:
      articles-per-thread: ${{ steps.calculate.outputs.articles-per-thread }}
      expected-links: ${{ steps.calculate.outputs.expected-links }}
      thread-matrix: ${{ steps.calculate.outputs.thread-matrix }}
      
    steps:
    - name: Расчет параметров
      id: calculate
      run: |
        TARGET_ARTICLES=${{ github.event.inputs.target_articles || '20' }}
        THREADS=${{ github.event.inputs.threads || '20' }}
        
        ARTICLES_PER_THREAD=$(( TARGET_ARTICLES / THREADS ))
        if [ $(( TARGET_ARTICLES % THREADS )) -ne 0 ]; then
          ARTICLES_PER_THREAD=$(( ARTICLES_PER_THREAD + 1 ))
        fi
        
        THREAD_LIST=""
        for i in $(seq 1 $THREADS); do
          if [ -z "$THREAD_LIST" ]; then
            THREAD_LIST="$i"
          else
            THREAD_LIST="$THREAD_LIST,$i"
          fi
        done
        
        EXPECTED_LINKS=$(( TARGET_ARTICLES * 85 ))
        
        echo "articles-per-thread=$ARTICLES_PER_THREAD" >> $GITHUB_OUTPUT
        echo "expected-links=$EXPECTED_LINKS" >> $GITHUB_OUTPUT
        echo "thread-matrix=[$THREAD_LIST]" >> $GITHUB_OUTPUT
        
        echo "Статей: $TARGET_ARTICLES"
        echo "Потоков: $THREADS"
        echo "Статей на поток: $ARTICLES_PER_THREAD"

  alpha-strike-attack:
    name: АЛЬФА-УДАР #${{ matrix.thread-id }}
    runs-on: ubuntu-latest
    needs: alpha-strike-preparation
    strategy:
      max-parallel: 20
      matrix:
        thread-id: ${{ fromJson(needs.alpha-strike-preparation.outputs.thread-matrix) }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install @google/generative-ai
        npm install node-fetch
        npm install execa
        
    - name: Run Alpha-Strike
      env:
        THREAD_ID: ${{ matrix.thread-id }}
        ALPHA_ARTICLES: ${{ needs.alpha-strike-preparation.outputs.articles-per-thread }}
        MODEL_CHOICE: ${{ github.event.inputs.model_choice || 'gemini' }}
        API_KEY_CURRENT: ${{ secrets.GEMINI_API_KEYS_POOL }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "ALPHA-STRIKE Thread ${{ matrix.thread-id }} START"
        echo "Articles: ${{ needs.alpha-strike-preparation.outputs.articles-per-thread }}"
        echo "Model: ${{ github.event.inputs.model_choice || 'gemini' }}"
        
        node alpha-factory.js
        
        echo "ALPHA-STRIKE Thread ${{ matrix.thread-id }} COMPLETE"

  alpha-strike-quality-control:
    name: КОНТРОЛЬ КАЧЕСТВА
    runs-on: ubuntu-latest
    needs: [alpha-strike-preparation, alpha-strike-attack]
    if: always()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Analyze content
      run: |
        echo "=== QUALITY CONTROL ==="
        
        if [ -d "src/content/posts" ]; then
          POST_COUNT=$(find src/content/posts -name "post*.md" | wc -l)
          echo "Articles found: $POST_COUNT"
          
          UNIQUE_TITLES=$(find src/content/posts -name "post*.md" -exec grep -h "^title:" {} \; | sort | uniq | wc -l)
          TOTAL_TITLES=$(find src/content/posts -name "post*.md" -exec grep -h "^title:" {} \; | wc -l)
          echo "Unique titles: $UNIQUE_TITLES of $TOTAL_TITLES"
        else
          echo "Directory src/content/posts not found"
        fi
        
        echo "Quality control completed"

  alpha-strike-final-report:
    name: ФИНАЛЬНЫЙ ОТЧЕТ
    runs-on: ubuntu-latest
    needs: [alpha-strike-preparation, alpha-strike-attack, alpha-strike-quality-control]
    if: always()
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Create report
      run: |
        echo "# Alpha-Strike Operation Report" > ALPHA_STRIKE_REPORT.md
        echo "" >> ALPHA_STRIKE_REPORT.md
        echo "## Parameters" >> ALPHA_STRIKE_REPORT.md
        echo "- Articles: ${{ github.event.inputs.target_articles || '20' }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Threads: ${{ github.event.inputs.threads || '20' }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Model: ${{ github.event.inputs.model_choice || 'gemini' }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Expected links: ${{ needs.alpha-strike-preparation.outputs.expected-links }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Date: $(date)" >> ALPHA_STRIKE_REPORT.md
        echo "" >> ALPHA_STRIKE_REPORT.md
        echo "## Status" >> ALPHA_STRIKE_REPORT.md
        echo "- Preparation: ${{ needs.alpha-strike-preparation.result }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Execution: ${{ needs.alpha-strike-attack.result }}" >> ALPHA_STRIKE_REPORT.md
        echo "- Quality control: ${{ needs.alpha-strike-quality-control.result }}" >> ALPHA_STRIKE_REPORT.md
        
        echo "Report created: ALPHA_STRIKE_REPORT.md"
        cat ALPHA_STRIKE_REPORT.md
        
    - name: Save report
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ALPHA_STRIKE_REPORT.md
        git commit -m "Alpha-Strike v4.0 report - $(date)" || exit 0
        git push || exit 0 