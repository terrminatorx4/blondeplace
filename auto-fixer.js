// ===== AUTO-FIXER v1.0 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–û–ö =====
// –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –ë–ï–ó —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import fetch from 'node-fetch';
import { promises as fs } from 'fs';

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = 'terrminatorx4/blondeplace';

class AutoFixer {
    constructor() {
        this.fixedIssues = [];
        this.errors = [];
    }

    // ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    async runAutoFix() {
        console.log('üõ†Ô∏è AUTO-FIXER v1.0: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
        
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Actions
            await this.checkGitHubActions();
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Netlify –±–∏–ª–¥—ã
            await this.checkNetlifyBuilds();
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            await this.checkConfigurations();
            
            // 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            await this.applyAutoFixes();
            
            console.log(`‚úÖ AUTO-FIXER: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${this.fixedIssues.length} –ø—Ä–æ–±–ª–µ–º`);
            
        } catch (error) {
            console.error('‚ùå AUTO-FIXER ERROR:', error.message);
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê GITHUB ACTIONS =====
    async checkGitHubActions() {
        console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ GitHub Actions runs...');
        
        try {
            const response = await fetch(`https://api.github.com/repos/${REPO}/actions/runs?per_page=5`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'AutoFixer-Bot'
                }
            });
            
            const data = await response.json();
            
            for (const run of data.workflow_runs) {
                if (run.status === 'completed' && run.conclusion === 'failure') {
                    console.log(`‚ùå –ù–∞–π–¥–µ–Ω failed run: ${run.name} (${run.id})`);
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    await this.analyzeFailedRun(run);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GitHub Actions:', error.message);
        }
    }

    // ===== –ê–ù–ê–õ–ò–ó FAILED RUN =====
    async analyzeFailedRun(run) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ job'–∞
            const jobsResponse = await fetch(`https://api.github.com/repos/${REPO}/actions/runs/${run.id}/jobs`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'AutoFixer-Bot'
                }
            });
            
            const jobsData = await jobsResponse.json();
            
            for (const job of jobsData.jobs) {
                if (job.conclusion === 'failure') {
                    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é failed job: ${job.name}`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                    await this.identifyCommonErrors(job);
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ failed run:', error.message);
        }
    }

    // ===== –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –†–ê–°–ü–†–û–°–¢–†–ê–ù–Å–ù–ù–´–• –û–®–ò–ë–û–ö =====
    async identifyCommonErrors(job) {
        const errorPatterns = [
            {
                pattern: /hoisted.*scripts.*not.*function/i,
                fix: 'astro_hoisted_scripts',
                description: '–û—à–∏–±–∫–∞ Astro hoisted scripts'
            },
            {
                pattern: /Command failed.*exit code 1.*npm run build/i,
                fix: 'build_failure',
                description: '–û—à–∏–±–∫–∞ –±–∏–ª–¥–∞'
            },
            {
                pattern: /Could not resolve.*import/i,
                fix: 'import_error',
                description: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞'
            },
            {
                pattern: /adapter.*static.*output/i,
                fix: 'astro_adapter_conflict',
                description: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç adapter –∏ static output'
            }
        ];

        // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        const logText = job.steps?.map(step => step.name).join(' ') || '';
        
        for (const errorType of errorPatterns) {
            if (errorType.pattern.test(logText)) {
                console.log(`üéØ –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${errorType.description}`);
                this.errors.push({
                    type: errorType.fix,
                    description: errorType.description,
                    job: job.name
                });
            }
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê NETLIFY –ë–ò–õ–î–û–í =====
    async checkNetlifyBuilds() {
        console.log('üìä –ü—Ä–æ–≤–µ—Ä—è—é Netlify –±–∏–ª–¥—ã...');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ Netlify API
        // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        
        try {
            const response = await fetch('https://blondeplace.netlify.app/', {
                timeout: 10000
            });
            
            if (response.ok) {
                console.log('‚úÖ Netlify —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
            } else {
                console.log('‚ö†Ô∏è Netlify —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                this.errors.push({
                    type: 'netlify_down',
                    description: '–°–∞–π—Ç Netlify –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                });
            }
            
        } catch (error) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Netlify:', error.message);
            this.errors.push({
                type: 'netlify_error',
                description: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Netlify'
            });
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ô =====
    async checkConfigurations() {
        console.log('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º astro.config.mjs
        await this.checkAstroConfig();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º netlify.toml
        await this.checkNetlifyConfig();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
        await this.checkPackageJson();
    }

    // ===== –ü–†–û–í–ï–†–ö–ê ASTRO CONFIG =====
    async checkAstroConfig() {
        try {
            const astroConfig = await fs.readFile('astro.config.mjs', 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            if (astroConfig.includes('adapter: netlify()') && astroConfig.includes("output: 'static'")) {
                this.errors.push({
                    type: 'astro_adapter_conflict',
                    description: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç adapter –∏ static output –≤ astro.config.mjs'
                });
            }
            
            if (!astroConfig.includes("inlineStylesheets: 'never'")) {
                this.errors.push({
                    type: 'astro_hoisted_scripts',
                    description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç fix –¥–ª—è hoisted scripts'
                });
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å astro.config.mjs');
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê NETLIFY CONFIG =====
    async checkNetlifyConfig() {
        try {
            const netlifyConfig = await fs.readFile('netlify.toml', 'utf8');
            
            if (!netlifyConfig.includes('node postbuild.js')) {
                this.errors.push({
                    type: 'missing_postbuild',
                    description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç postbuild.js –≤ netlify.toml'
                });
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å netlify.toml');
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê PACKAGE.JSON =====
    async checkPackageJson() {
        try {
            const packageJson = JSON.parse(await fs.readFile('package.json', 'utf8'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            const requiredDeps = ['astro', '@astrojs/sitemap'];
            for (const dep of requiredDeps) {
                if (!packageJson.dependencies?.[dep]) {
                    this.errors.push({
                        type: 'missing_dependency',
                        description: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`
                    });
                }
            }
            
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å package.json');
        }
    }

    // ===== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–ô =====
    async applyAutoFixes() {
        console.log(`üîß –ü—Ä–∏–º–µ–Ω—è—é –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è ${this.errors.length} –ø—Ä–æ–±–ª–µ–º...`);
        
        for (const error of this.errors) {
            console.log(`üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é: ${error.description}`);
            
            try {
                await this.applySpecificFix(error);
                this.fixedIssues.push(error);
                console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${error.description}`);
                
            } catch (fixError) {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å: ${error.description}`);
                console.log(`   –û—à–∏–±–∫–∞: ${fixError.message}`);
            }
        }
    }

    // ===== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    async applySpecificFix(error) {
        switch (error.type) {
            case 'astro_hoisted_scripts':
                await this.fixAstroHoistedScripts();
                break;
                
            case 'astro_adapter_conflict':
                await this.fixAstroAdapterConflict();
                break;
                
            case 'missing_postbuild':
                await this.fixMissingPostbuild();
                break;
                
            case 'missing_dependency':
                await this.fixMissingDependency(error);
                break;
                
            default:
                console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏: ${error.type}`);
        }
    }

    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï HOISTED SCRIPTS =====
    async fixAstroHoistedScripts() {
        const astroConfig = await fs.readFile('astro.config.mjs', 'utf8');
        
        if (!astroConfig.includes("inlineStylesheets: 'never'")) {
            const updatedConfig = astroConfig.replace(
                /build:\s*{([^}]*)}/,
                `build: {
    inlineStylesheets: 'never' // –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å hoisted scripts$1
  }`
            );
            
            await fs.writeFile('astro.config.mjs', updatedConfig);
            await this.commitToGitHub('astro.config.mjs', 'üõ†Ô∏è AUTO-FIX: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ hoisted scripts –æ—à–∏–±–∫–∏');
        }
    }

    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ADAPTER –ö–û–ù–§–õ–ò–ö–¢–ê =====
    async fixAstroAdapterConflict() {
        const astroConfig = await fs.readFile('astro.config.mjs', 'utf8');
        
        if (astroConfig.includes('adapter: netlify()') && astroConfig.includes("output: 'static'")) {
            const updatedConfig = astroConfig.replace(
                /adapter:\s*netlify\(\),?/,
                '// adapter —É–±—Ä–∞–Ω –¥–ª—è static output'
            );
            
            await fs.writeFile('astro.config.mjs', updatedConfig);
            await this.commitToGitHub('astro.config.mjs', 'üõ†Ô∏è AUTO-FIX: –£–±—Ä–∞–ª adapter –¥–ª—è static output');
        }
    }

    // ===== –ö–û–ú–ú–ò–¢ –í GITHUB =====
    async commitToGitHub(filename, message) {
        try {
            const fileContent = await fs.readFile(filename, 'utf8');
            const encodedContent = Buffer.from(fileContent).toString('base64');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞
            const fileResponse = await fetch(`https://api.github.com/repos/${REPO}/contents/${filename}`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'AutoFixer-Bot'
                }
            });
            
            const fileData = await fileResponse.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
            await fetch(`https://api.github.com/repos/${REPO}/contents/${filename}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'AutoFixer-Bot',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message,
                    content: encodedContent,
                    sha: fileData.sha
                })
            });
            
            console.log(`‚úÖ –§–∞–π–ª ${filename} –æ–±–Ω–æ–≤–ª—ë–Ω –≤ GitHub`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–∏—Ç–∞ ${filename}:`, error.message);
        }
    }
}

// ===== –ó–ê–ü–£–°–ö AUTO-FIXER =====
if (import.meta.url === `file://${process.argv[1]}`) {
    const autoFixer = new AutoFixer();
    autoFixer.runAutoFix();
}

export default AutoFixer; 