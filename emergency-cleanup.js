// –§–∞–π–ª: emergency-cleanup.js - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª–æ–º–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
import fs from 'fs/promises';
import path from 'path';
import matter from 'gray-matter';

const POSTS_DIR = 'src/content/posts';

async function emergencyCleanup() {
    console.log('üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–æ–º–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    try {
        const files = await fs.readdir(POSTS_DIR);
        const mdFiles = files.filter(file => file.endsWith('.md'));
        
        let validCount = 0;
        let deletedCount = 0;
        let brokenFiles = [];
        
        for (const file of mdFiles) {
            const filePath = path.join(POSTS_DIR, file);
            
            try {
                const content = await fs.readFile(filePath, 'utf-8');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git conflict –º–∞—Ä–∫–µ—Ä–æ–≤
                if (content.includes('<<<<<<< ') || content.includes('=======') || content.includes('>>>>>>> ')) {
                    console.log(`üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª —Å git –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–º: ${file}`);
                    await fs.unlink(filePath);
                    deletedCount++;
                    brokenFiles.push(`${file} (git conflict)`);
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å YAML
                try {
                    matter(content);
                    console.log(`‚úÖ ${file} - –≤–∞–ª–∏–¥–Ω—ã–π`);
                    validCount++;
                } catch (yamlError) {
                    console.log(`üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª —Å YAML –æ—à–∏–±–∫–æ–π: ${file}`);
                    console.log(`   –û—à–∏–±–∫–∞: ${yamlError.message}`);
                    await fs.unlink(filePath);
                    deletedCount++;
                    brokenFiles.push(`${file} (YAML error: ${yamlError.message})`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${file}:`, error.message);
                console.log(`üóëÔ∏è –£–¥–∞–ª—è—é –Ω–µ—á–∏—Ç–∞–µ–º—ã–π —Ñ–∞–π–ª: ${file}`);
                await fs.unlink(filePath);
                deletedCount++;
                brokenFiles.push(`${file} (read error)`);
            }
        }
        
        console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –≠–ö–°–¢–†–ï–ù–ù–û–ô –û–ß–ò–°–¢–ö–ò:
        ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${validCount}
        üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${deletedCount}
        üìÑ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${mdFiles.length}`);
        
        if (brokenFiles.length > 0) {
            console.log(`\nüóÇÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:`);
            brokenFiles.forEach(file => console.log(`   - ${file}`));
        }
        
        console.log(`\nüéØ –°–¢–ê–¢–£–°: –¢–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —Ñ–∞–π–ª—ã. Netlify –±–∏–ª–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏!`);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫
emergencyCleanup(); 