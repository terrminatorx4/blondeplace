// ===== ALPHA-FACTORY v5.28 - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø —Å baseNumber = 200000 =====
// –û–°–ù–û–í–ê: v5.4 (—Ä–∞–±–æ—á–∞—è —Ä–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π) + –¢–û–õ–¨–ö–û baseNumber = 200000!
// –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ù–ï —Ç—Ä–æ–≥–∞–µ–º API –∫–ª—é—á–∏, —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ –ø–æ—Å—Ç–æ–≤!
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –°–¢–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';
const TARGET_URL_MAIN = "https://blondeplace.ru";
const POSTS_DIR = 'src/content/posts';

// üéØ –¨–´ 8 –´–• –°   –¨-
const ALPHA_KEYWORDS = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
    "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞",
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "–º–µ—Å—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É",
    "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã",
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥"
];

// --- –°–¢  ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-pro";

// --- –Ø API  ---
// --- –ü–ê–†–°–ò–ù–ì API –ö–õ–Æ–ß–ï–ô ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;

// –ü–ê–†–°–ò–ù–ì –ü–£–õ–ê –ö–õ–Æ–ß–ï–ô (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É–ª)
const GEMINI_KEYS_POOL = process.env.GEMINI_API_KEYS_POOL;
const OPENROUTER_KEYS_POOL = process.env.OPENROUTER_API_KEYS_POOL;

let GEMINI_API_KEY_CURRENT = process.env.GEMINI_API_KEY_CURRENT;
let OPENROUTER_API_KEY_CURRENT = process.env.OPENROUTER_API_KEY_CURRENT;

// –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É–ª –∫–ª—é—á–µ–π - –ø–∞—Ä—Å–∏–º –∏ —Ä–æ—Ç–∏—Ä—É–µ–º
if (GEMINI_KEYS_POOL) {
    const geminiKeys = GEMINI_KEYS_POOL.split(',').map(key => key.trim()).filter(Boolean);
    if (geminiKeys.length > 0) {
        const keyIndex = (threadId - 1) % geminiKeys.length;
        GEMINI_API_KEY_CURRENT = geminiKeys[keyIndex];
        console.log(`[KEYS] Thread #${threadId}: –í—ã–±—Ä–∞–Ω Gemini –∫–ª—é—á #${keyIndex + 1} –∏–∑ ${geminiKeys.length}`);
    }
}

if (OPENROUTER_KEYS_POOL) {
    const openrouterKeys = OPENROUTER_KEYS_POOL.split(',').map(key => key.trim()).filter(Boolean);
    if (openrouterKeys.length > 0) {
        const keyIndex = (threadId - 1) % openrouterKeys.length;
        OPENROUTER_API_KEY_CURRENT = openrouterKeys[keyIndex];
        console.log(`[KEYS] Thread #${threadId}: –í—ã–±—Ä–∞–Ω OpenRouter –∫–ª—é—á #${keyIndex + 1} –∏–∑ ${openrouterKeys.length}`);
    }
}

let apiKey;
if (modelChoice === 'deepseek') {
    apiKey = OPENROUTER_API_KEY_CURRENT;
} else {
    apiKey = GEMINI_API_KEY_CURRENT;
}

if (!apiKey) {
    throw new Error(`[ALPHA-STRIKE #${threadId}] –µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á!`);
}
console.log(`[KEY] [ALPHA-STRIKE #${threadId}] –æ–¥–µ–ª—å: ${modelChoice}, –∫–ª—é—á: ...${apiKey.slice(-4)}`);

// --- –°–¢–Ø  ---
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
const baseDelay = 500;

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delay = 5000;
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': slugify(BRAND_BLOG_NAME)
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });
                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }
                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (error.message.includes('503') || error.message.includes('429')) {
                console.warn(`[WARNING] [ALPHA-STRIKE #${threadId}] –æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}. –¥—É ${delay / 1000}—Å...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            } else {
                throw error;
            }
        }
    }
    throw new Error(`[ALPHA-STRIKE #${threadId}] –µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

async function isUrlAccessible(url) {
    if (typeof url !== 'string' || !url.startsWith('http')) return false;
    try {
        const response = await fetch(url, { method: 'HEAD', timeout: 5000 });
        return response.ok;
    } catch (error) {
        console.warn(`[WARNING] –µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${url}`);
        return false;
    }
}

// üéØ –Ø –¨–´–• –°–¢–¢   –° (–°–Ø –°–Ø)
async function generatePost(keyword, postNumber) {
    console.log(`[TASK] [ALPHA-STRIKE #${threadId}] –µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${keyword}`);
    
    //  FACTORY.JS: –•–¢–Ø –Ø - –° 
    const planPrompt = `–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π, –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${keyword}". 

–¢: –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¨ –∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç–µ–π –ø–æ —ç—Ç–æ–π –∂–µ —Ç–µ–º–µ!

–¢–Ø  :
- –∏–Ω–∏–º—É–º 15-20 —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
- –∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã, –∫–µ–π—Å—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
- –æ–±–∞–≤—å FAQ —Å–µ–∫—Ü–∏—é (5-7 –≤–æ–ø—Ä–æ—Å–æ–≤)
- –∫–ª—é—á–∏ —Ä–∞–∑–¥–µ–ª—ã: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ª–∞–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ
- –Ø–¢–¨: —Å–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç–µ–º–µ "${keyword}" (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Ç—Ä–µ–Ω–¥–æ–≤ 2024, –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤)

–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –∂–µ–Ω—â–∏–Ω—ã 25-45 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π.

: –°–¥–µ–ª–∞–π –ø–ª–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º!`;

    const plan = await generateWithRetry(planPrompt);

    //  FACTORY.JS: –Ø  –°–¢–¢–¨    
    const articlePrompt = `–∞–ø–∏—à–∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é, —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ–±—ä–µ–º–æ–º  15000 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:

${plan}

–¢–° –¢–Ø:
- –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –°–¨ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π
- –¨–´ –ø–æ–¥—Ö–æ–¥ –∫ —Ç–µ–º–µ "${keyword}" - –Ω–µ –±–∞–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!
- –∫–ª—é—á–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –∫–µ–π—Å–æ–≤
- –æ–±–∞–≤—å —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ FAQ —Å–µ–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ  
- –∏—à–∏ –æ—Ç –ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}
- —Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
- –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ## ###)
-  –¥–æ–±–∞–≤–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ![...], —Å—Å—ã–ª–∫–∏, URL-–∞–¥—Ä–µ—Å–∞
- –∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1
- : –∏–∑–±–µ–≥–∞–π —á–∞—Å—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ª–µ–∫—Å–∏–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–æ—à–Ω–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞

–™: –º–∏–Ω–∏–º—É–º 15000 —Å–∏–º–≤–æ–ª–æ–≤ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!

–¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: ${keyword}
–æ–Ω—Ç–µ–∫—Å—Ç: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}

–Ø–¢–¨: –°–¥–µ–ª–∞–π —Å—Ç–∞—Ç—å—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–æ —Ç–µ–º–µ "${keyword}"!`;

    let articleText = await generateWithRetry(articlePrompt);

    //  –´   –°  (  FACTORY.JS)
    if (articleText.length < 12000) {
        const extensionPrompt = `–∞—Å—à–∏—Ä—å —Å—Ç–∞—Ç—å—é "${keyword}". –æ–±–∞–≤—å:
        - –æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        - –µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
        - –°–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        - –∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
        - –æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
        
        –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è:
        ${articleText}
        
        –≤–µ–ª–∏—á—å –æ–±—ä–µ–º –º–∏–Ω–∏–º—É–º –≤ 1.5 —Ä–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`;
        
        articleText = await generateWithRetry(extensionPrompt);
    }

    // üî• –°-–°–¢–Ø –°–¢   FACTORY.JS ( –Ø –°–°–´!)
    articleText = articleText.replace(/^.*?–≤–æ—Ç\s+(–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∞—è|—ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è|–ø–æ–¥—Ä–æ–±–Ω–∞—è)?\s*(—Å—Ç–∞—Ç—å—è|—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ|–≥–∏–¥).*$/gmi, "");
    articleText = articleText.replace(/^.*?–∫–æ–Ω–µ—á–Ω–æ,?\s*/gmi, "");
    articleText = articleText.replace(/\*\*title:\*\*.*$/gmi, "");
    articleText = articleText.replace(/\*\*description:\*\*.*$/gmi, "");
    articleText = articleText.replace(/\*\*–∑–∞–≥–æ–ª–æ–≤–æ–∫\s*\([^)]*\)\s*:\*\*.*$/gmi, "");
    articleText = articleText.replace(/^title:\s*.*/gmi, "");
    articleText = articleText.replace(/^description:\s*.*/gmi, "");
    articleText = articleText.replace(/^content:\s*.*/gmi, "");
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, '');
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, '');
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, '');
    articleText = articleText.replace(/www\.[^\s]+/g, '');
    articleText = articleText.trim();

    // üéØ –Ø –¨–´–• SEO DATA  
    const seoPrompt = `–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${keyword}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç. –¢–° : –æ—Ç–≤–µ—Ç –¢–¨ –≤–∞–ª–∏–¥–Ω—ã–π JSON.

JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: 
- "title" (–¥–ª–∏–Ω–æ–π 40-45 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ,  )
- "description" (–¥–ª–∏–Ω–æ–π 150-164 —Å–∏–º–≤–æ–ª–∞, –ø—Ä–æ–¥–∞—é—â–∏–π, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é) 
- "keywords" (–°–¢ 5-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –°–¨ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–º–µ)
- "heroImage" (URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Unsplash –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ —Ç–µ–º–µ)

–¢–° —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ title:
-  –±—ã—Ç—å –¨–´ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º
-  –±–∞–Ω–∞–ª—å–Ω—ã–π, –∞ —Å –∏–∑—é–º–∏–Ω–∫–æ–π
-    !
- —Ä–∏–º–µ—Ä—ã: "–°–µ–∫—Ä–µ—Ç—ã ${keyword}: –∏–Ω—Å–∞–π–¥—ã –æ—Ç —Ç–æ–ø-–º–∞—Å—Ç–µ—Ä–æ–≤", "${keyword} 2024: —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", "–∞–∫ –≤—ã–±—Ä–∞—Ç—å ${keyword}: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç"

–¢–° —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ description:
-  –±—ã—Ç—å –¨–´ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º  
- –∫–ª—é—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
-  –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫

–¢–° —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ keywords:
- —Å–ø–æ–ª—å–∑—É–π –¢–¨ —Ç–µ—Ä–º–∏–Ω—ã  –¢–´ —Å—Ç–∞—Ç—å–∏
-  –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–∫—Ä–∞—Å–æ—Ç–∞, —Å—Ç–∏–ª—å, —É—Ö–æ–¥"
- –æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –¢ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ/—Ç–µ—Ö–Ω–∏–∫–µ

–æ–Ω—Ç–µ–∫—Å—Ç: –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.
–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏: #${postNumber} (–¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ  –≤–∫–ª—é—á–∞–π –≤ title)`;

    let seoText = await generateWithRetry(seoPrompt);
    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) { throw new Error("–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."); }
    const seoData = JSON.parse(match[0]);

    // SCHEMA.ORG –° –¢ (  FACTORY.JS)
    const reviewCount = Math.floor(Math.random() * (900 - 300 + 1)) + 300;
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);

    const isImageOk = await isUrlAccessible(seoData.heroImage);
    const finalHeroImage = isImageOk ? seoData.heroImage : FALLBACK_IMAGE_URL;

    // –Ø –°–• HOWTO –° –¢–´ –¢ (  FACTORY.JS)
    const fullSchema = {
        "@context": "https://schema.org", 
        "@type": "HowTo",
        "name": seoData.title,
        "description": seoData.description, 
        "image": {
            "@type": "ImageObject",
            "url": finalHeroImage
        },
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": ratingValue,
            "reviewCount": reviewCount,
            "bestRating": "5",
            "worstRating": "1"
        },
        "publisher": {
            "@type": "Organization",
            "name": BRAND_BLOG_NAME,
            "logo": {
                "@type": "ImageObject",
                "url": `${SITE_URL}/favicon.svg`
            }
        },
        "datePublished": new Date().toISOString(),
        "dateModified": new Date().toISOString(),
        "author": {
            "@type": "Person",
            "name": BRAND_AUTHOR_NAME
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": `${SITE_URL}/blog/post${postNumber}/`
        }
    };

    // üîó –¨–´ URL   –¨-
    const targetUrls = [
        `${TARGET_URL_MAIN}/#about`,
        `${TARGET_URL_MAIN}/#services`,
        `${TARGET_URL_MAIN}/#discount`,
        `${TARGET_URL_MAIN}/#why`,
        `${TARGET_URL_MAIN}/#coworking`,
        `${TARGET_URL_MAIN}/#masters`,
        `${TARGET_URL_MAIN}/#comments`,
        `${TARGET_URL_MAIN}/#brands`,
        `${TARGET_URL_MAIN}/#news`,
        `${TARGET_URL_MAIN}`
    ];

    // –°–¢–Ø 85 –°–°–´ (–° –°–¢!)
    const words = articleText.split(' ');
    let linkCount = 0;
    const targetLinkCount = 85;
    const linkInterval = Math.floor(words.length / targetLinkCount);

    for (let i = linkInterval; i < words.length && linkCount < targetLinkCount; i += linkInterval) {
        const targetUrl = targetUrls[linkCount % targetUrls.length];
        const anchorText = words[i];
        if (anchorText && anchorText.length > 2) {
            words[i] = `[${anchorText}](${targetUrl})`;
            linkCount++;
        }
    }

    const finalContent = words.join(' ');
    console.log(`[LINKS] [ALPHA-STRIKE #${threadId}] —Å—Ç–∞–≤–ª–µ–Ω–æ ${linkCount} —Å—Å—ã–ª–æ–∫ (–≤–Ω–µ—à–Ω–∏—Ö: ${linkCount}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: 0)`);

    // FRONTMATTER –° SCHEMA.ORG (  FACTORY.JS)
    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords || keyword)}
pubDate: ${JSON.stringify(new Date().toISOString())}
author: ${JSON.stringify(BRAND_AUTHOR_NAME)}
heroImage: ${JSON.stringify(finalHeroImage)}
schema: ${JSON.stringify(fullSchema)}
---
${finalContent}
`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filename = `post${postNumber}.md`;
    const filePath = path.join(POSTS_DIR, filename);
    
    await fs.writeFile(filePath, frontmatter, 'utf-8');
    console.log(`[DONE] [ALPHA-STRIKE #${threadId}] –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${seoData.title}"`);
    console.log(`[META] Title: ${seoData.title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${seoData.description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`[SCHEMA] Schema.org HowTo —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${ratingValue} (${reviewCount} –æ—Ç–∑—ã–≤–æ–≤)`);
    console.log(`[IMAGE] –∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${finalHeroImage}`);
    
    // IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const articleUrl = `${SITE_URL}/blog/post${postNumber}`;
    await notifyIndexNow(articleUrl);
    console.log(`[INDEXNOW] [ALPHA-STRIKE #${threadId}] –¢—É—Ä–±–æ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: 3/3 —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);
    
    return {
        filename,
        title: seoData.title,
        url: articleUrl,
        linkCount,
        keyword
    };
}

async function notifyIndexNow(url) {
    const HOST = "blondeplace.netlify.app";
    const payload = JSON.stringify({ host: HOST, key: INDEXNOW_API_KEY, urlList: [url] });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://google.com/ping?sitemap=' + encodeURIComponent(SITE_URL + '/sitemap.xml')]);
    } catch (error) {
        console.error(`[ERROR] [ALPHA-STRIKE #${threadId}] —à–∏–±–∫–∞ IndexNow:`, error.message);
    }
}

// üéØ –¨–Ø  ALPHA-STRIKE –° –¨–´ 8 –´ –°
async function main() {
    console.log(`[INIT] [ALPHA-STRIKE #${threadId}] –Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v5.4 —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);

    try {
        const targetArticles = parseInt(process.env.TARGET_ARTICLES, 10) || 1;
        
        console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] === –ê–õ–¨–§–ê-–£–î–ê–† v5.28 ===`);
        console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –¶–µ–ª—å: ${targetArticles} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π`);
        console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${ALPHA_KEYWORDS.length} —à—Ç`);
        console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏: ${ALPHA_KEYWORDS.join(', ')}`);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: baseNumber = 200000 –¥–ª—è –æ–±—Ö–æ–¥–∞ GitHub API –ª–∏–º–∏—Ç–∞
        const baseNumber = 200000;
        const startNumber = baseNumber + (threadId * 100);
        console.log(`[NUMBERS] [ALPHA-STRIKE #${threadId}] –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –±–∞–∑–æ–≤—ã–π –Ω–æ–º–µ—Ä: ${baseNumber}`);
        console.log(`[NUMBERS] [ALPHA-STRIKE #${threadId}] –ù–∞—á–∏–Ω–∞—é –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å: ${startNumber}`);

        let createdArticles = 0;
        let totalLinks = 0;
        const createdUrls = [];
        const keywordStats = {};

        for (let i = 0; i < targetArticles; i++) {
            // –¨–Ø : –±–µ—Ä–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ –∫—Ä—É–≥—É
            const keywordIndex = (threadId - 1 + i) % ALPHA_KEYWORDS.length;
            const keyword = ALPHA_KEYWORDS[keywordIndex];
            const postNumber = startNumber + i;
            
            if (!keywordStats[keyword]) keywordStats[keyword] = 0;
            keywordStats[keyword]++;
            
            try {
                const result = await generatePost(keyword, postNumber);
                createdArticles++;
                totalLinks += result.linkCount;
                createdUrls.push(result.url);
                
                await delay(baseDelay);
            } catch (error) {
                console.error(`[ERROR] [ALPHA-STRIKE #${threadId}] —à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏ #${postNumber}: ${error.message}`);
            }
        }

        console.log(`[COMPLETE] [ALPHA-STRIKE #${threadId}] === –°–°–Ø v5.4 –® ===`);
        console.log(`[STATS] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${createdArticles}`);
        console.log(`[STATS] –±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${totalLinks}`);
        console.log(`[STATS] –∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${baseDelay}–º—Å`);
        console.log(`[STATS] –∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${startNumber}-${startNumber + createdArticles - 1}`);

        // –°–¢–¢–°–¢  –´ –°
        console.log(`[KEYWORDS] –°–¢–¢–°–¢  –´ –°:`);
        Object.entries(keywordStats).forEach(([keyword, count]) => {
            console.log(`[KEYWORDS] "${keyword}": ${count} —Å—Ç–∞—Ç–µ–π`);
        });

        // –¢–¢ –° –°–°–´
        console.log(`[RESULTS] –°–´ –°–¢–¢–¨:`);
        createdUrls.forEach((url, index) => {
            console.log(`[ARTICLE] –°—Ç–∞—Ç—å—è ${index + 1}: ${url}`);
        });

        console.log(`[INDEXNOW] INDEXNOW –¢–¢:`);
        console.log(`[INDEXNOW] Yandex IndexNow: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        console.log(`[INDEXNOW] Bing IndexNow: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        console.log(`[INDEXNOW] Google Sitemap Ping: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
        
    } catch (error) {
        console.error(`[FATAL] [ALPHA-STRIKE #${threadId}] —Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error.message);
        process.exit(1);
    }
}

// –∞–ø—É—Å–∫
main();