// –§–∞–π–ª: diagnostic.js - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ BlondePlace
import fs from 'fs/promises';

async function diagnostic() {
    console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ BLONDEPLACE');
    console.log('==================================');
    
    let allGood = true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('\nüîë –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:');
    const geminiKey = process.env.GEMINI_API_KEY_CURRENT;
    const openrouterKey = process.env.OPENROUTER_API_KEY_CURRENT;
    const modelChoice = process.env.MODEL_CHOICE || 'gemini';
    
    console.log(`‚îú‚îÄ MODEL_CHOICE: ${modelChoice}`);
    console.log(`‚îú‚îÄ GEMINI_API_KEY_CURRENT: ${geminiKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`‚îî‚îÄ OPENROUTER_API_KEY_CURRENT: ${openrouterKey ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    
    if (modelChoice === 'gemini' && !geminiKey) {
        console.log('‚ö†Ô∏è  –í—ã–±—Ä–∞–Ω Gemini, –Ω–æ –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        allGood = false;
    }
    if (modelChoice === 'openrouter' && !openrouterKey) {
        console.log('‚ö†Ô∏è  –í—ã–±—Ä–∞–Ω OpenRouter, –Ω–æ –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        allGood = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüìÅ –§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê:');
    try {
        const topicsContent = await fs.readFile('topics.txt', 'utf-8');
        const topics = topicsContent.split(/\r?\n/).map(t => t.trim()).filter(Boolean);
        console.log(`‚îú‚îÄ topics.txt: ‚úÖ ${topics.length} —Ç–µ–º`);
        
        await fs.access('src/content/posts');
        const posts = await fs.readdir('src/content/posts');
        const mdFiles = posts.filter(f => f.endsWith('.md'));
        console.log(`‚îú‚îÄ src/content/posts/: ‚úÖ ${mdFiles.length} —Å—Ç–∞—Ç–µ–π`);
        console.log(`‚îî‚îÄ –ù–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.max(0, topics.length - mdFiles.length)}`);
    } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
        allGood = false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    console.log('\nüîß GIT –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:');
    try {
        const { execa } = await import('execa');
        const { stdout: userName } = await execa('git', ['config', 'user.name']);
        const { stdout: userEmail } = await execa('git', ['config', 'user.email']);
        const { stdout: status } = await execa('git', ['status', '--porcelain']);
        
        console.log(`‚îú‚îÄ user.name: ${userName}`);
        console.log(`‚îú‚îÄ user.email: ${userEmail}`);
        console.log(`‚îî‚îÄ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${status ? '‚ö†Ô∏è –ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '‚úÖ –ß–∏—Å—Ç–∞—è'}`);
    } catch (error) {
        console.log(`‚ö†Ô∏è Git –ø—Ä–æ–±–ª–µ–º—ã: ${error.message}`);
    }
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:');
    if (allGood) {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!');
        console.log('üí° –ó–∞–ø—É—Å–∫: npm run factory');
    } else {
        console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.');
        console.log('üìñ –°–º–æ—Ç—Ä–∏—Ç–µ FIX_GUIDE.md –¥–ª—è —Ä–µ—à–µ–Ω–∏–π');
    }
    
    return allGood;
}

diagnostic().catch(console.error);