// === FACTORY.JS –í–ï–†–°–ò–Ø 8.3 ¬´–ë–ï–ó REQUIRE¬ª ===

import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs';
import path from 'path';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522338242992-e1a54906a8da?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = '2f4e6a8b9c1d3e5f7a8b9c0d1e2f3a4b5c6d7e8f';
const GEMINI_MODEL_NAME = 'gemini-2.0-flash-exp';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –∏ API –∫–ª—é—á
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = process.env.THREAD_ID || '1';
const batchSize = parseInt(process.env.BATCH_SIZE) || 5;

let apiKey, modelName;

if (modelChoice === 'deepseek') {
    apiKey = process.env.OPENROUTER_API_KEY_CURRENT;
    modelName = 'deepseek/deepseek-chat';
    if (!apiKey) {
        throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }
} else {
    apiKey = process.env.GEMINI_API_KEY_CURRENT;
    modelName = GEMINI_MODEL_NAME;
    if (!apiKey) {
        throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }
}

console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üöÄ –ó–∞–ø—É—Å–∫ Beauty Factory (–ú–æ–¥–µ–ª—å: ${modelChoice})`);
console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üìä –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: ${batchSize} —Å—Ç–∞—Ç–µ–π`);

// --- –§–£–ù–ö–¶–ò–Ø SLUGIFY ---
function slugify(text) {
    const translitMap = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    };
    
    return text
        .toLowerCase()
        .split('')
        .map(char => translitMap[char] || char)
        .join('')
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
}

// --- AI –ì–ï–ù–ï–†–ê–¶–ò–Ø ---
async function generateWithRetry(prompt, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': SITE_URL,
                        'X-Title': BRAND_BLOG_NAME,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: modelName,
                        messages: [{ role: 'user', content: prompt }],
                        temperature: 0.7,
                        max_tokens: 4000
                    })
                });

                if (!response.ok) {
                    throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: modelName });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
            if (attempt === maxRetries) throw error;
            await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
        }
    }
}

// --- –ó–ê–ì–†–£–ó–ö–ê –ò–ù–¢–ï–†–õ–ò–ù–ö–û–í ---
function loadInterlinks() {
    try {
        const existingPosts = fs.readdirSync('src/content/posts')
            .filter(file => file.endsWith('.md'))
            .map(file => {
                const content = fs.readFileSync(path.join('src/content/posts', file), 'utf-8');
                const titleMatch = content.match(/^title:\s*["'](.+?)["']/m);
                const slug = file.replace('.md', '');
                return titleMatch ? { title: titleMatch[1], slug } : null;
            })
            .filter(Boolean);

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingPosts.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–ª–∏–Ω–∫–∏–Ω–≥–∞`);
        return existingPosts;
    } catch (error) {
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ò–Ω—Ç–µ—Ä–ª–∏–Ω–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:`, error.message);
        return [];
    }
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–¨–ò ---
async function generatePost(topic, slug, interlinks) {
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é: "${topic}"`);

    const planPrompt = `–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É: "${topic}". –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
    1. –ü—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
    2. 4-6 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ (H2) —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
    3. 2-3 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ (H3) –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ
    4. –§–æ–∫—É—Å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}
    5. –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã
    
    –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –ª—é–¥–∏, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π –∏ —É—Ö–æ–¥–æ–º.`;

    const plan = await generateWithRetry(planPrompt);

    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:\n\n${plan}\n\n–¢–µ–º–∞: "${topic}". –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Markdown –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# –¥–ª—è H1, ## –¥–ª—è H2, ### –¥–ª—è H3). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –æ—Ç –ª–∏—Ü–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}. –ê–ë–°–û–õ–Æ–¢–ù–û –ó–ê–ü–†–ï–©–ï–ù–û: –ù–ï –í–°–¢–ê–í–õ–Ø–ô –í –¢–ï–ö–°–¢ –ù–ò–ö–ê–ö–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ![...], –°–°–´–õ–û–ö [...](...), URL-–ê–î–†–ï–°–û–í http/https, –î–û–ú–ï–ù–û–í .com/.ru/.org, –ú–ï–î–ò–ê-–ö–û–ù–¢–ï–ù–¢–ê –ò–õ–ò –£–ü–û–ú–ò–ù–ê–ù–ò–ô –î–†–£–ì–ò–• –°–ê–ô–¢–û–í. –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô –¢–ï–ö–°–¢ –ë–ï–ó –°–°–´–õ–û–ö. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º. –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1.`;
    let articleText = await generateWithRetry(articlePrompt);

    // –£–õ–¨–¢–†–ê-–ñ–Å–°–¢–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –æ—Ç –í–°–ï–• –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, ''); // –£–±–∏—Ä–∞–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/https?:\/\/[^\s\)\]\,\.\!]+/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ URL
    articleText = articleText.replace(/www\.[^\s\)\]\,\.\!]+/g, ''); // –£–±–∏—Ä–∞–µ–º www —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/[a-zA-Z0-9\-]+\.(com|ru|org|net|info|biz|co|io|app|dev)[^\s]*/gi, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
    articleText = articleText.replace(/https-[^\s\)\]\,\.\!]+/g, ''); // –£–±–∏—Ä–∞–µ–º –±–∏—Ç—ã–µ https- —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/netlify[^\s]*/gi, ''); // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è netlify
    articleText = articleText.replace(/github[^\s]*/gi, ''); // –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è github
    articleText = articleText.replace(/\*\s*–ü—Ä–∏–º–µ—Ä.*?\*/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–æ–º–µ–Ω–∞–º–∏
    const lines = articleText.split('\n');
    articleText = lines.filter(line => {
        const cleanLine = line.toLowerCase();
        return !cleanLine.includes('.com') && 
               !cleanLine.includes('.ru') && 
               !cleanLine.includes('.org') && 
               !cleanLine.includes('.net') && 
               !cleanLine.includes('netlify') && 
               !cleanLine.includes('github') &&
               !cleanLine.includes('http') &&
               !cleanLine.includes('www.');
    }).join('\n');

    // –ò–ù–¢–ï–†–õ–ò–ù–ö–ò–ù–ì
    if (interlinks.length > 0) {
        const relatedPosts = interlinks
            .filter(post => {
                const topicWords = topic.toLowerCase().split(' ');
                const titleWords = post.title.toLowerCase().split(' ');
                return topicWords.some(word => titleWords.some(titleWord => titleWord.includes(word) && word.length > 3));
            })
            .slice(0, 3);

        if (relatedPosts.length > 0) {
            let relatedSection = '\n\n## –ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ\n\n';
            relatedPosts.forEach(post => {
                relatedSection += `* [${post.title}](/blog/${post.slug}/)\n`;
            });
            articleText += relatedSection;
        }
    }

    const seoPrompt = `–î–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç. –í–ê–ñ–ù–û: —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "title" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 40-45 —Å–∏–º–≤–æ–ª–æ–≤), "description" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 120-130 —Å–∏–º–≤–æ–ª–æ–≤), "keywords" (—Å—Ç—Ä–æ–∫–∞ —Å 5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ö–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;
    let seoText = await generateWithRetry(seoPrompt);

    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."); }
    const seoData = JSON.parse(match[0]);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if (seoData.title && seoData.title.length > 45) {
        seoData.title = seoData.title.substring(0, 42) + '...';
    }
    if (seoData.description && seoData.description.length > 130) {
        seoData.description = seoData.description.substring(0, 127) + '...';
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ keywords –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    if (!seoData.keywords || seoData.keywords.length < 10) {
        seoData.keywords = `–∫—Ä–∞—Å–æ—Ç–∞, ${BRAND_NAME}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, —É—Ö–æ–¥, —Å—Ç–∏–ª—å`;
    }

    const reviewCount = Math.floor(Math.random() * (990 - 500 + 1)) + 500; // 500-990 –æ—Ç–∑—ã–≤–æ–≤
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const finalHeroImage = FALLBACK_IMAGE_URL;

    const fullSchema = {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": seoData.title,
        "description": seoData.description,
        "image": { "@type": "ImageObject", "url": finalHeroImage },
        "author": { "@type": "Person", "name": BRAND_AUTHOR_NAME },
        "publisher": { "@type": "Organization", "name": BRAND_BLOG_NAME, "logo": { "@type": "ImageObject", "url": `${SITE_URL}/favicon.ico` } },
        "datePublished": new Date().toISOString(),
        "dateModified": new Date().toISOString(),
        "mainEntityOfPage": { "@type": "WebPage", "@id": `${SITE_URL}/blog/${slug}/` },
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": ratingValue,
            "reviewCount": reviewCount,
            "bestRating": "5",
            "worstRating": "1"
        }
    };

    // –ò–°–ü–û–õ–¨–ó–£–ï–ú JSON.stringify –¥–ª—è –ë–ï–ó–û–ü–ê–°–ù–û–ì–û YAML (–∫–∞–∫ –≤ Butler)
    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords)}
pubDate: ${JSON.stringify(new Date().toISOString())}
author: ${JSON.stringify(BRAND_AUTHOR_NAME)}
heroImage: ${JSON.stringify(finalHeroImage)}
schema: ${JSON.stringify(fullSchema)}
---
${articleText}
`;
    return frontmatter;
}

// --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø INDEXNOW ---
async function notifySearchEngines(urls) {
    if (!urls.length) return;

    const payload = {
        host: "blondeplace.netlify.app",
        key: INDEXNOW_API_KEY,
        urlList: urls
    };

    try {
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üì¢ –£–≤–µ–¥–æ–º–ª—è—é –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –æ ${urls.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—å—è—Ö...`);
        
        await Promise.allSettled([
            fetch('https://yandex.com/indexnow', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify(payload)
            }),
            fetch('https://www.bing.com/indexnow', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify(payload)
            })
        ]);

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Yandex –∏ Bing`);
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error.message);
    }
}

// --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async function main() {
    try {
        // –ß–ò–¢–ê–ï–ú TOPICS.TXT (–ë–ï–ó require)
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üìñ –ß–∏—Ç–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–π topics.txt...`);
        
        const topicsContent = fs.readFileSync('topics.txt', 'utf-8');
        const allLines = topicsContent.split('\n').map(line => line.trim());
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ê–ö–¢–£–ê–õ–¨–ù–´–ï —Ç–µ–º—ã (—É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
        const topics = allLines.filter(line => 
            line && 
            !line.startsWith('#') && 
            !line.includes('50 —Ç–µ–º') &&
            !line.includes('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–∏—Å—Ç–æ—á–µ–∫') && // –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É –∫–∞–∫ —Å–ª—É–∂–µ–±–Ω—É—é
            line.length > 10 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–º—ã
        );

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üìã –ù–∞–π–¥–µ–Ω–æ ${topics.length} –ê–ö–¢–£–ê–õ–¨–ù–´–• —Ç–µ–º`);
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üéØ –ü–µ—Ä–≤—ã–µ 3 —Ç–µ–º—ã: ${topics.slice(0, 3).join(', ')}`);

        if (topics.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –≤ topics.txt`);
            return;
        }

        const interlinks = loadInterlinks();
        const generatedUrls = [];

        for (let i = 0; i < batchSize; i++) {
            if (topics.length === 0) break;

            const randomIndex = Math.floor(Math.random() * topics.length);
            const topic = topics.splice(randomIndex, 1)[0].trim();
            const slug = slugify(topic);

            const outputPath = `src/content/posts/${slug}.md`;
            if (fs.existsSync(outputPath)) {
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚è≠Ô∏è –°—Ç–∞—Ç—å—è "${topic}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—é`);
                continue;
            }

            try {
                const content = await generatePost(topic, slug, interlinks);
                
                if (!fs.existsSync('src/content/posts')) {
                    fs.mkdirSync('src/content/posts', { recursive: true });
                }
                
                fs.writeFileSync(outputPath, content, 'utf-8');
                generatedUrls.push(`${SITE_URL}/blog/${slug}/`);
                
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${slug}.md`);
                
                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (error) {
                console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "${topic}":`, error.message);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º topics.txt
        fs.writeFileSync('topics.txt', topics.join('\n') + '\n', 'utf-8');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏
        if (generatedUrls.length > 0) {
            await notifySearchEngines(generatedUrls);
        }

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${generatedUrls.length} —Å—Ç–∞—Ç–µ–π`);
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error.message);
        process.exit(1);
    }
}

main();
