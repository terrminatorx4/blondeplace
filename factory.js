import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';

// ===== BRAND CONFIG LIKE BUTLER =====
const BRAND_CONFIG = {
    brand: 'BLONDE PLACE',
    salon_name: 'BLONDE PLACE',
    domain: 'blondeplace.ru',
    blog_domain: 'blondeplace.netlify.app',
    author: 'BLONDE PLACE Beauty Expert',
    location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    phone: '+7 (812) 123-45-67',
    telegram: 'https://t.me/Blondeplace'
};

const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto=format&fit=crop';

const REAL_LINKS_MAP = {
    'general': [
        { url: "https://blondeplace.ru", text: `–≥–ª–∞–≤–Ω–æ–º —Å–∞–π—Ç–µ ${BRAND_CONFIG.salon_name}` },
        { url: "https://blondeplace.ru/#about", text: `–æ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_CONFIG.salon_name}` },
        { url: "https://blondeplace.ru/#services", text: `–Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö` },
        { url: "https://blondeplace.ru/#masters", text: `–Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö` },
        { url: "https://blondeplace.ru/#coworking", text: `beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ` },
        { url: "https://t.me/Blondeplace", text: `Telegram –∫–∞–Ω–∞–ª–µ` },
    ]
};

const MODEL_CHOICE = process.env.MODEL_CHOICE || 'gemini';
const API_KEY_CURRENT = process.env.API_KEY_CURRENT || process.env.GEMINI_API_KEY;
const BATCH_SIZE = parseInt(process.env.BATCH_SIZE) || 5;
const THREAD_ID = process.env.THREAD_ID || '1';
const TOTAL_THREADS = parseInt(process.env.TOTAL_THREADS) || 1;

if (!API_KEY_CURRENT) {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(API_KEY_CURRENT);
const model = genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2048,
    }
});

async function loadTopics() {
    try {
        const data = await fs.readFile('topics.txt', 'utf8');
        return data.split('\n').filter(line => line.trim()).map(line => line.trim());
    } catch (error) {
        console.log('üìù topics.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª...');
        await fs.writeFile('topics.txt', '');
        return [];
    }
}

function categorizeBeautyTopic(topic) {
    const topicLower = topic.toLowerCase();
    
    if (topicLower.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ') || topicLower.includes('–±–ª–æ–Ω–¥')) return 'hair-coloring';
    if (topicLower.includes('—Å—Ç—Ä–∏–∂–∫–∞') || topicLower.includes('–ø—Ä–∏—á–µ—Å–∫–∞')) return 'hairstyles';
    if (topicLower.includes('–º–∞–Ω–∏–∫—é—Ä')) return 'manicure';
    if (topicLower.includes('—É—Ö–æ–¥')) return 'skincare';
    
    return 'beauty-tips';
}

// BUTLER-EXACT SEO GENERATION
async function generateButlerSEO(topic) {
    const prompt = `–°–æ–∑–¥–∞–π SEO –¥–ª—è beauty —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ "${topic}" –¢–û–ß–ù–û –ö–ê–ö –í BUTLER:

–¢–†–ï–ë–û–í–ê–ù–ò–Ø (–ö–ê–ö –í BUTLER):
- Title: –°–¢–†–û–ì–û 40-45 —Å–∏–º–≤–æ–ª–æ–≤ (—Å—á–∏—Ç–∞–π —Ç–æ—á–Ω–æ!)
- Description: –°–¢–†–û–ì–û 150-164 —Å–∏–º–≤–æ–ª–∞ (—Å—á–∏—Ç–∞–π —Ç–æ—á–Ω–æ!)
- Keywords: 5-7 –∫–ª—é—á–µ–≤–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
- –£–ø–æ–º–∏–Ω–∞–π BLONDE PLACE –≤ title

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
TITLE: [—Ç–æ—á–Ω—ã–π title 40-45 —Å–∏–º–≤–æ–ª–æ–≤]
DESCRIPTION: [—Ç–æ—á–Ω–æ–µ description 150-164 —Å–∏–º–≤–æ–ª–∞]
KEYWORDS: [–∫–ª—é—á–µ–≤–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]`;

    try {
        const result = await model.generateContent(prompt);
        const text = result.response.text();
        
        const titleMatch = text.match(/TITLE: (.+)/i);
        const descMatch = text.match(/DESCRIPTION: (.+)/i);
        const keywordsMatch = text.match(/KEYWORDS: (.+)/i);
        
        return {
            title: titleMatch ? titleMatch[1].trim() : `${topic} | BLONDE PLACE`,
            description: descMatch ? descMatch[1].trim() : `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BLONDE PLACE –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!`,
            keywords: keywordsMatch ? keywordsMatch[1].trim() : `${topic}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, BLONDE PLACE, beauty`
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO: ${error.message}`);
        return {
            title: `${topic} –≤ BLONDE PLACE –°–ü–±`,
            description: `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BLONDE PLACE –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!`,
            keywords: `${topic}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, BLONDE PLACE, beauty`
        };
    }
}

async function generateBeautyContent(topic) {
    const prompt = `–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é beauty —Å—Ç–∞—Ç—å—é –ø—Ä–æ "${topic}" –¥–ª—è —Å–∞–ª–æ–Ω–∞ BLONDE PLACE.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 1000-1500 —Å–ª–æ–≤
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ H2, H3
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –£–ø–æ–º–∏–Ω–∞–π BLONDE PLACE –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –ü—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –í–≤–µ–¥–µ–Ω–∏–µ 
2. 3-4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.`;

    try {
        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`);
        return null;
    }
}

// BUTLER-EXACT FRONTMATTER
async function createButlerFrontmatter(topic, content, seoData) {
    const slug = topic.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
    
    const category = categorizeBeautyTopic(topic);
    const heroImage = FALLBACK_IMAGE_URL;
    const currentDate = new Date().toISOString();
    
    // BUTLER-EXACT SCHEMA
    const schema = {
        "@context": "https://schema.org",
        "@type": "Article",
        headline: seoData.title,
        description: seoData.description,
        image: heroImage,
        author: {
            "@type": "Organization",
            name: BRAND_CONFIG.salon_name,
            url: `https://${BRAND_CONFIG.domain}`
        },
        publisher: {
            "@type": "Organization", 
            name: BRAND_CONFIG.brand,
            logo: {
                "@type": "ImageObject",
                url: `https://${BRAND_CONFIG.domain}/logo.png`
            }
        },
        datePublished: currentDate,
        dateModified: currentDate,
        mainEntityOfPage: {
            "@type": "WebPage",
            "@id": `https://${BRAND_CONFIG.blog_domain}/blog/${slug}/`
        }
    };
    
    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords)}
pubDate: ${JSON.stringify(currentDate)}
author: ${JSON.stringify(BRAND_CONFIG.author)}
heroImage: ${JSON.stringify(heroImage)}
category: ${JSON.stringify(category)}
schema: ${JSON.stringify(schema)}
---

${content}
`;
    
    return frontmatter;
}

async function main() {
    try {
        console.log(`üé® === BLONDE PLACE FACTORY (BUTLER-STYLE) ===`);
        console.log(`üíÑ –ü–æ—Ç–æ–∫: #${THREAD_ID}`);
        
        const allTopics = await loadTopics();
        
        if (allTopics.length === 0) {
            console.log('üìù –¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const threadTopics = allTopics.filter((_, index) => 
            index % TOTAL_THREADS === (parseInt(THREAD_ID) - 1)
        );
        
        const topicsToProcess = threadTopics.slice(0, BATCH_SIZE);
        
        if (topicsToProcess.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üì≠ –ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${topicsToProcess.length} —Ç–æ–ø–∏–∫–æ–≤...`);
        
        let successCount = 0;
        
        for (const topic of topicsToProcess) {
            try {
                console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é: "${topic}"`);
                
                const content = await generateBeautyContent(topic);
                if (!content) continue;
                
                const seoData = await generateButlerSEO(topic);
                const fullContent = await createButlerFrontmatter(topic, content, seoData);
                
                const slug = topic.toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-|-$/g, '');
                
                const filePath = `src/content/posts/${slug}.md`;
                await fs.writeFile(filePath, fullContent);
                
                console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] ‚úÖ –°–æ–∑–¥–∞–Ω: ${filePath}`);
                successCount++;
                
                await new Promise(resolve => setTimeout(resolve, 2000));
                
            } catch (error) {
                console.error(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] ‚ùå –û—à–∏–±–∫–∞ "${topic}":`, error.message);
            }
        }
        
        console.log(`\nüéâ [–ü–æ—Ç–æ–∫ #${THREAD_ID}] –°–æ–∑–¥–∞–Ω–æ: ${successCount}/${topicsToProcess.length}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

if (process.argv[1].endsWith('factory.js')) {
    main();
}

export { main };