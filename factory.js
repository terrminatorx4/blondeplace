// === FACTORY.JS –í–ï–†–°–ò–Ø 9.2 ¬´–ò–°–ü–†–ê–í–õ–ï–ù–´ –û–ë–†–ï–ó–ê–ù–ò–Ø + KEYWORDS¬ª ===

import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522338242992-e1a54906a8da?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = '2f4e6a8b9c1d3e5f7a8b9c0d1e2f3a4b5c6d7e8f';
const GEMINI_MODEL_NAME = 'gemini-2.0-flash-exp';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ environment
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;

let apiKey, modelName;

if (modelChoice === 'deepseek') {
    apiKey = process.env.OPENROUTER_API_KEY_CURRENT;
    modelName = 'deepseek/deepseek-chat';
    if (!apiKey) {
        throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] OpenRouter API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }
} else {
    apiKey = process.env.GEMINI_API_KEY_CURRENT;
    modelName = GEMINI_MODEL_NAME;
    if (!apiKey) {
        throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] Gemini API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }
}

// --- –§–£–ù–ö–¶–ò–Ø SLUGIFY (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø BUTLER) ---
function slugify(text) {
    const translitMap = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', '–∂': 'zh',
        '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n', '–æ': 'o',
        '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts',
        '—á': 'ch', '—à': 'sh', '—â': 'sch', '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    };
    
    return text
        .toLowerCase()
        .split('')
        .map(char => translitMap[char] || char)
        .join('')
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
}

// --- AI –ì–ï–ù–ï–†–ê–¶–ò–Ø ---
async function generateWithRetry(prompt, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': SITE_URL,
                        'X-Title': BRAND_BLOG_NAME,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: modelName,
                        messages: [{ role: 'user', content: prompt }],
                        temperature: 0.7,
                        max_tokens: 4000
                    })
                });

                if (!response.ok) {
                    throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);
                }

                const data = await response.json();
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: modelName });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
            if (attempt === maxRetries) throw error;
            await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
        }
    }
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–¨–ò ---
async function generatePost(topic, slug, interlinks) {
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é: "${topic}"`);

    const planPrompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}". –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –ø–∏—à–µ—Ç—Å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;
    const plan = await generateWithRetry(planPrompt);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PROMPT –î–õ–Ø –ß–ò–°–¢–´–• –ó–ê–ì–û–õ–û–í–ö–û–í
    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:\n\n${plan}\n\n–¢–µ–º–∞: "${topic}". –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Markdown –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# –¥–ª—è H1, ## –¥–ª—è H2, ### –¥–ª—è H3). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –æ—Ç –ª–∏—Ü–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –í–°–¢–ê–í–õ–Ø–ô –í –¢–ï–ö–°–¢ –ù–ò–ö–ê–ö–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ![...], –°–°–´–õ–û–ö, URL-–ê–î–†–ï–°–û–í –ò–õ–ò –ú–ï–î–ò–ê-–ö–û–ù–¢–ï–ù–¢–ê. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º. –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1. –ó–ê–ì–û–õ–û–í–ö–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ö–û–†–û–¢–ö–ò–ú–ò –ë–ï–ó –ù–û–ú–ï–†–û–í –ò –õ–ò–®–ù–ò–• –°–õ–û–í.`;
    let articleText = await generateWithRetry(articlePrompt);

    // –°–£–ü–ï–†-–ñ–Å–°–¢–ö–ê–Ø –û–ß–ò–°–¢–ö–ê (–ö–ê–ö –í BUTLER)
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, ''); // –£–±–∏—Ä–∞–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ URL
    articleText = articleText.replace(/https-[^\s\)\]]+/g, ''); // –£–±–∏—Ä–∞–µ–º –±–∏—Ç—ã–µ https- —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/www\.[^\s]+/g, ''); // –£–±–∏—Ä–∞–µ–º www —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/g, ''); // –£–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω—ã
    articleText = articleText.replace(/\*\s*–ü—Ä–∏–º–µ—Ä.*?\*/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ó–ê–ì–û–õ–û–í–ö–û–í –û–¢ –ù–û–ú–ï–†–û–í
    articleText = articleText.replace(/^#+\s*\d+\.?\s*/gm, function(match) {
        const level = match.match(/^#+/)[0];
        return level + ' ';
    });
    
    // –£–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏—è–º–∏ –∏ –ª–∏—à–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    articleText = articleText.replace(/^(#+\s*)([^:\n]*?):\s*[^\n]*?(‚Äì|‚Äî).*$/gm, '$1$2');

    // –ò–ù–¢–ï–†–õ–ò–ù–ö–ò–ù–ì (–ö–ê–ö –í BUTLER)
    if (interlinks.length > 0) {
        let interlinkingBlock = '\n\n---\n\n## –ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ\n\n';
        interlinks.forEach(link => {
            interlinkingBlock += `* [${link.title}](${link.url})\n`;
        });
        articleText += interlinkingBlock;
    }

    const seoPrompt = `–î–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç. –í–ê–ñ–ù–û: —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "title" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 50-60 —Å–∏–º–≤–æ–ª–æ–≤), "description" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 150-160 —Å–∏–º–≤–æ–ª–æ–≤), "keywords" (—Å—Ç—Ä–æ–∫–∞ —Å 5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ö–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;
    let seoText = await generateWithRetry(seoPrompt);

    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."); }
    const seoData = JSON.parse(match[0]);

    // –£–ë–†–ê–õ–ò –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–†–ï–ó–ê–ù–ò–ï!
    // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ AI, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ - —Ç–æ–≥–¥–∞ –æ–±—Ä–µ–∑–∞–µ–º
    if (seoData.title && seoData.title.length > 70) {
        seoData.title = seoData.title.substring(0, 67) + '...';
    }
    if (seoData.description && seoData.description.length > 180) {
        seoData.description = seoData.description.substring(0, 177) + '...';
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ keywords –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
    if (!seoData.keywords || seoData.keywords.length < 10) {
        seoData.keywords = `–∫—Ä–∞—Å–æ—Ç–∞, ${BRAND_NAME}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, —É—Ö–æ–¥, —Å—Ç–∏–ª—å`;
    }

    const reviewCount = Math.floor(Math.random() * (990 - 500 + 1)) + 500;
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);
    const finalHeroImage = FALLBACK_IMAGE_URL;

    const fullSchema = {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": seoData.title,
        "description": seoData.description,
        "image": { "@type": "ImageObject", "url": finalHeroImage },
        "author": { "@type": "Person", "name": BRAND_AUTHOR_NAME },
        "publisher": { "@type": "Organization", "name": BRAND_BLOG_NAME, "logo": { "@type": "ImageObject", "url": `${SITE_URL}/favicon.ico` } },
        "datePublished": new Date().toISOString(),
        "dateModified": new Date().toISOString(),
        "mainEntityOfPage": { "@type": "WebPage", "@id": `${SITE_URL}/blog/${slug}/` },
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": ratingValue,
            "reviewCount": reviewCount,
            "bestRating": "5",
            "worstRating": "1"
        }
    };

    // BUTLER-STYLE FRONTMATTER (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø)
    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords)}
pubDate: ${JSON.stringify(new Date().toISOString())}
author: ${JSON.stringify(BRAND_AUTHOR_NAME)}
heroImage: ${JSON.stringify(finalHeroImage)}
schema: ${JSON.stringify(fullSchema)}
---
`;
    
    return frontmatter + articleText;
}

// --- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø INDEXNOW ---
async function notifySearchEngines(urls) {
    if (!urls.length) return;

    const payload = {
        host: "blondeplace.netlify.app",
        key: INDEXNOW_API_KEY,
        urlList: urls
    };

    try {
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üì¢ –£–≤–µ–¥–æ–º–ª—è—é –ø–æ–∏—Å–∫–æ–≤–∏–∫–∏ –æ ${urls.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—å—è—Ö...`);
        
        await Promise.allSettled([
            fetch('https://yandex.com/indexnow', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify(payload)
            }),
            fetch('https://www.bing.com/indexnow', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json; charset=utf-8' },
                body: JSON.stringify(payload)
            })
        ]);

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Yandex –∏ Bing`);
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error.message);
    }
}

// --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (–¢–û–ß–ù–ê–Ø –ö–û–ü–ò–Ø BUTLER) ---
async function main() {
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...`);

    try {
        const BATCH_SIZE = parseInt(process.env.BATCH_SIZE_PER_THREAD, 10) || 1;
        const totalThreads = parseInt(process.env.TOTAL_THREADS, 10) || 1;
        
        const fileContent = await fs.readFile(TOPICS_FILE, 'utf-8');
        const allTopics = fileContent.split(/\r?\n/).map(topic => topic.trim()).filter(Boolean);

        const postsDir = path.join(process.cwd(), POSTS_DIR);
        await fs.mkdir(postsDir, { recursive: true });
        
        const existingFiles = await fs.readdir(postsDir);
        const existingSlugs = existingFiles.map(file => file.replace('.md', ''));
        
        let newTopics = allTopics.filter(topic => {
            const topicSlug = slugify(topic);
            return topicSlug && !existingSlugs.includes(topicSlug);
        });

        // BUTLER –õ–û–ì–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –ü–û–¢–û–ö–ê–ú
        const topicsForThisThread = newTopics.filter((_, index) => index % totalThreads === (threadId - 1)).slice(0, BATCH_SIZE);

        if (topicsForThisThread.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–∞–π–¥–µ–Ω–æ ${topicsForThisThread.length} –Ω–æ–≤—ã—Ö —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É.`);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–ª–∏–Ω–∫–∏–Ω–≥–∞
        let allPostsForLinking = [];
        for (const slug of existingSlugs) {
             try {
                const content = await fs.readFile(path.join(postsDir, `${slug}.md`), 'utf-8');
                const titleMatch = content.match(/title:\s*["']?(.*?)["']?$/m);
                if (titleMatch) {
                    allPostsForLinking.push({ title: titleMatch[1], url: `/blog/${slug}/` });
                }
            } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è */ }
        }
        
        for (const topic of topicsForThisThread) { 
            try {
                const slug = slugify(topic);
                if (!slug) continue;
                
                const filePath = path.join(postsDir, `${slug}.md`);

                let randomInterlinks = [];
                if (allPostsForLinking.length > 0) {
                    const shuffled = [...allPostsForLinking].sort(() => 0.5 - Math.random());
                    randomInterlinks = shuffled.slice(0, 3);
                }

                const content = await generatePost(topic, slug, randomInterlinks);
                await fs.writeFile(filePath, content);
                
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: ${slug}.md`);
                
                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (error) {
                console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "${topic}":`, error.message);
            }
        }

        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error.message);
        process.exit(1);
    }
}

main();
