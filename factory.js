#!/usr/bin/env node
// BlondePlace Beauty Content Factory
// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –æ –∫—Ä–∞—Å–æ—Ç–µ, —É—Ö–æ–¥–µ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ —Å–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö

import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø BLONDEPLACE =====
const BRAND_CONFIG = {
    brand: "BlondePlace",
    domain: "blondeplace.ru",
    blog_domain: "blondeplace.netlify.app",
    salon_name: "BlondePlace Beauty Studio",
    specialization: "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–∏ –≤–æ–ª–æ—Å, —Å—Ç—Ä–∏–∂–∫–∞—Ö, –º–∞–Ω–∏–∫—é—Ä–µ –∏ beauty-–ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö",
    author: "BlondePlace Beauty Expert",
    location: "–†–æ—Å—Å–∏—è",
    services: [
        "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –≤–æ–ª–æ—Å (–±–ª–æ–Ω–¥, –æ–º–±—Ä–µ, —à–∞—Ç—É—à, –±–∞–ª–∞—è–∂)",
        "–°—Ç—Ä–∏–∂–∫–∏ –∏ —É–∫–ª–∞–¥–∫–∏", 
        "–ö–µ—Ä–∞—Ç–∏–Ω–æ–≤–æ–µ –≤—ã–ø—Ä—è–º–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å",
        "–ë–æ—Ç–æ–∫—Å –¥–ª—è –≤–æ–ª–æ—Å",
        "–ú–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä",
        "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π",
        "–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞",
        "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ beauty-—ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
    ],
    target_audience: "–ñ–µ–Ω—â–∏–Ω—ã 18-45 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π, —É—Ö–æ–¥–æ–º –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏",
    tone: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π",
    expertise: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º"
};

// ===== BEAUTY –ö–ê–†–¢–ò–ù–ö–ò (–í–ú–ï–°–¢–û BUTLER) =====
const BEAUTY_IMAGES_POOL = [
    "https://images.unsplash.com/photo-1560066984-138dadb4c035?q=80&w=2074&auto=format&fit=crop", // Hair salon
    "https://images.unsplash.com/photo-1487412912207-890745b4773c?q=80&w=2070&auto=format&fit=crop", // Nail art
    "https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?q=80&w=2069&auto=format&fit=crop", // Makeup
    "https://images.unsplash.com/photo-1559599101-f09722fb4948?q=80&w=2069&auto=format&fit=crop", // Hair care
    "https://images.unsplash.com/photo-1562322140-8baeececf3df?q=80&w=2069&auto=format&fit=crop", // Beauty salon
    "https://images.unsplash.com/photo-1515377905703-c4788e51af15?q=80&w=2070&auto=format&fit=crop", // Hair styling
    "https://images.unsplash.com/photo-1616394584738-fc6e612e71b9?q=80&w=2070&auto=format&fit=crop", // Spa treatment
    "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?q=80&w=2070&auto=format&fit=crop"  // Skincare
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
function getBeautyImage(topic, category) {
    const topicLower = topic.toLowerCase();
    
    if (topicLower.includes('–≤–æ–ª–æ—Å') || topicLower.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ') || topicLower.includes('—Å—Ç—Ä–∏–∂–∫')) {
        return BEAUTY_IMAGES_POOL[Math.random() < 0.5 ? 0 : 5]; // Hair salon/styling
    }
    if (topicLower.includes('–Ω–æ–≥—Ç') || topicLower.includes('–º–∞–Ω–∏–∫—é—Ä') || topicLower.includes('nail')) {
        return BEAUTY_IMAGES_POOL[1]; // Nail art
    }
    if (topicLower.includes('–º–∞–∫–∏—è–∂') || topicLower.includes('makeup')) {
        return BEAUTY_IMAGES_POOL[2]; // Makeup
    }
    if (topicLower.includes('—É—Ö–æ–¥') || topicLower.includes('–∫–æ–∂–∞')) {
        return BEAUTY_IMAGES_POOL[Math.random() < 0.5 ? 3 : 7]; // Care/skincare
    }
    if (topicLower.includes('–ø—Ä–æ—Ü–µ–¥—É—Ä') || topicLower.includes('—Å–∞–ª–æ–Ω')) {
        return BEAUTY_IMAGES_POOL[Math.random() < 0.5 ? 4 : 6]; // Salon/spa
    }
    
    // Default beauty image
    return BEAUTY_IMAGES_POOL[Math.floor(Math.random() * BEAUTY_IMAGES_POOL.length)];
}

// ===== –ù–ê–°–¢–†–û–ô–ö–ò –ö–û–ù–¢–ï–ù–¢–ê =====
const POSTS_DIR = 'src/content/posts';
const TOPICS_FILE = 'topics.txt';
const THREAD_ID = parseInt(process.env.THREAD_ID, 10) || 1;

// ===== –°–°–´–õ–ö–ò –ù–ê –û–°–ù–û–í–ù–û–ô –°–ê–ô–¢ BLONDEPLACE =====
const REAL_LINKS_MAP = {
    "–æ –Ω–∞—Å": { url: "https://blondeplace.ru/#about", text: "–æ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ" },
    "—É—Å–ª—É–≥–∏": { url: "https://blondeplace.ru/#services", text: "–Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö" },
    "—Å–∫–∏–¥–∫–∏": { url: "https://blondeplace.ru/#discount", text: "–∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–∫–∞—Ö" },
    "–ø–æ—á–µ–º—É –º—ã": { url: "https://blondeplace.ru/#why", text: "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö BLONDE PLACE" },
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": { url: "https://blondeplace.ru/#coworking", text: "beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ" },
    "–º–∞—Å—Ç–µ—Ä–∞": { url: "https://blondeplace.ru/#masters", text: "–Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö" },
    "–æ—Ç–∑—ã–≤—ã": { url: "https://blondeplace.ru/#comments", text: "–æ—Ç–∑—ã–≤–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤" },
    "–±—Ä–µ–Ω–¥—ã": { url: "https://blondeplace.ru/#brands", text: "–±—Ä–µ–Ω–¥–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö" },
    "–Ω–æ–≤–æ—Å—Ç–∏": { url: "https://blondeplace.ru/#news", text: "–ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö" },
    "—Ç–µ–ª–µ–≥—Ä–∞–º": { url: "https://t.me/Blondeplace", text: "üì± —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ" }
};

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
let model, apiClient;

// –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
if (modelChoice === 'openrouter') {
    const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
    const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
    
    const apiKey = process.env.OPENROUTER_API_KEY_CURRENT;
    if (!apiKey) {
        throw new Error("[Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] OpenRouter API key –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
    
    apiClient = {
        url: OPENROUTER_API_URL,
        key: apiKey,
        model: DEEPSEEK_MODEL_NAME
    };
    
    console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å OpenRouter DeepSeek —Å –∫–ª—é—á–æ–º ..." + apiKey.slice(-4));
} else {
    const apiKey = process.env.GEMINI_API_KEY_CURRENT;
    if (!apiKey) {
        throw new Error("[Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] Gemini API key –Ω–µ –Ω–∞–π–¥–µ–Ω!");
    }
    
    const { GoogleGenerativeAI } = await import('@google/generative-ai');
    const genAI = new GoogleGenerativeAI(apiKey);
    model = genAI.getGenerativeModel({ model: "gemini-2.5-flash" });
    
    console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å Gemini —Å –∫–ª—é—á–æ–º ..." + apiKey.slice(-4));
}

// ===== BEAUTY SYSTEM PROMPTS =====
const BEAUTY_SYSTEM_PROMPTS = {
    hair_care: "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –≤ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace. –ó–Ω–∞–µ—à—å –≤—Å–µ –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–∞—Ö –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ª–æ—Å, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö.",
    nail_care: "–¢—ã ‚Äî –º–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞ –∏ –ø–µ–¥–∏–∫—é—Ä–∞ –≤ —Å–∞–ª–æ–Ω–µ BlondePlace. –≠–∫—Å–ø–µ—Ä—Ç –ø–æ nail-–∞—Ä—Ç—É, –ø–æ–∫—Ä—ã—Ç–∏—è–º, —É—Ö–æ–¥—É –∑–∞ –Ω–æ–≥—Ç—è–º–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è–º.",
    skincare: "–¢—ã ‚Äî –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ BlondePlace. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ —É—Ö–æ–¥–µ –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞, anti-age –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö, –ø–æ–¥–±–æ—Ä–µ –∫–æ—Å–º–µ—Ç–∏–∫–∏.",
    salon_procedures: "–¢—ã ‚Äî —Ç–µ—Ö–Ω–æ–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ BlondePlace. –ó–Ω–∞–µ—à—å –≤—Å–µ –æ —Å–∞–ª–æ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö: –∫–µ—Ä–∞—Ç–∏–Ω–µ, –±–æ—Ç–æ–∫—Å–µ –¥–ª—è –≤–æ–ª–æ—Å, —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏–≤–∫–∞—Ö.",
    beauty_tips: "–¢—ã ‚Äî beauty-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∞–ª–æ–Ω–∞ BlondePlace. –î–∞–µ—à—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫—Ä–∞—Å–æ—Ç–µ, —Å—Ç–∏–ª—é, –ø–æ–¥–±–æ—Ä—É –æ–±—Ä–∞–∑–æ–≤ –∏ —É—Ö–æ–¥–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä."
};

// ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê =====
async function generateWithRetry(prompt, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            if (modelChoice === 'openrouter') {
                const response = await fetch(apiClient.url, {
                    method: 'POST',
                    headers: {
                        'Authorization': "Bearer " + apiClient.key,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        model: apiClient.model,
                        messages: [{ role: 'user', content: prompt }],
                        temperature: 0.7
                    })
                });
                
                const data = await response.json();
                return data.choices[0].message.content;
            } else {
                const result = await model.generateContent(prompt);
                const response = await result.response;
                return response.text();
            }
        } catch (error) {
            console.warn("[Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ " + attempt + "/" + maxRetries + " –Ω–µ —É–¥–∞–ª–∞—Å—å: " + error.message);
            if (attempt === maxRetries) throw error;
            await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
        }
    }
}

async function generateBeautyContent(topic) {
    const category = categorizeBeautyTopic(topic);
    const systemPrompt = BEAUTY_SYSTEM_PROMPTS[category] || BEAUTY_SYSTEM_PROMPTS.beauty_tips;
    
    const prompt = systemPrompt + "\n\n–°–æ–∑–¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace –Ω–∞ —Ç–µ–º—É: \"" + topic + "\"\n\n–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¢–ï–ù–¢–£:\n- –û–±—ä–µ–º: 1500-2500 —Å–ª–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è SEO)\n- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1, H2, H3 –≤ Markdown\n- –¢–æ–Ω: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π\n- –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ BlondePlace\n- –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é (–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω)\n- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é\n- –£–ø–æ–º–∏–Ω–∞–π —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã BlondePlace\n\n–°–¢–†–£–ö–¢–£–†–ê:\n1. –í–≤–µ–¥–µ–Ω–∏–µ (100-150 —Å–ª–æ–≤)\n2. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (3-5 –±–ª–æ–∫–æ–≤ –ø–æ 300-400 —Å–ª–æ–≤)\n3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã (—Å–ø–∏—Å–æ–∫)\n4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ. –ü–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.";

    try {
        console.log("[+] [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ì–µ–Ω–µ—Ä–∏—Ä—É—é beauty —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: " + topic);
        
        const content = await generateWithRetry(prompt);
        const seoData = await generateBeautySEO(topic, category);
        const frontmatter = await createBeautyFrontmatter(topic, content, seoData);
        
        return frontmatter;
        
    } catch (error) {
        console.error("[Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è \"" + topic + "\":", error.message);
        return null;
    }
}

// ===== –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–ò–Ø BEAUTY –¢–û–ü–ò–ö–û–í =====
function categorizeBeautyTopic(topic) {
    const topicLower = topic.toLowerCase();
    
    if (topicLower.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ') || topicLower.includes('–±–ª–æ–Ω–¥') || 
        topicLower.includes('—Ü–≤–µ—Ç') || topicLower.includes('–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ') ||
        topicLower.includes('–æ–º–±—Ä–µ') || topicLower.includes('–±–∞–ª–∞—è–∂')) {
        return 'hair_coloring';
    }
    
    if (topicLower.includes('–≤–æ–ª–æ—Å') || topicLower.includes('—É—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏') ||
        topicLower.includes('—à–∞–º–ø—É–Ω—å') || topicLower.includes('–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä')) {
        return 'hair_care';
    }
    
    if (topicLower.includes('–º–∞–Ω–∏–∫—é—Ä') || topicLower.includes('–ø–µ–¥–∏–∫—é—Ä') || 
        topicLower.includes('–Ω–æ–≥—Ç') || topicLower.includes('nail')) {
        return 'nail_care';
    }
    
    if (topicLower.includes('–ø—Ä–æ—Ü–µ–¥—É—Ä') || topicLower.includes('—Å–∞–ª–æ–Ω') ||
        topicLower.includes('–∫–µ—Ä–∞—Ç–∏–Ω') || topicLower.includes('–±–æ—Ç–æ–∫—Å')) {
        return 'salon_procedures';
    }
    
    return 'beauty_tips';
}

// ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø SEO –î–ê–ù–ù–´–• (–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –î–õ–ò–ù–´) =====
async function generateBeautySEO(topic, category) {
    const seoPrompt = "–°–æ–∑–¥–∞–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞ —Ç–µ–º—É: \"" + topic + "\"\n\n–°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n- Title: –¢–û–ß–ù–û 35-40 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞–π \"BLONDE PLACE\"\n- Description: –¢–û–ß–ù–û 150-160 —Å–∏–º–≤–æ–ª–æ–≤, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é\n- Keywords: 5-7 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n- –£—á–∏—Ç—ã–≤–∞–π beauty-—Ç–µ–º–∞—Ç–∏–∫—É\n\n–û—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n{\n  \"title\": \"...\",\n  \"description\": \"...\", \n  \"keywords\": \"...\"\n}";

    try {
        const result = await generateWithRetry(seoPrompt);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        const jsonMatch = result.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            const seoData = JSON.parse(jsonMatch[0]);
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–†–ï–ó–ê–ï–ú –î–û –ù–£–ñ–ù–û–ô –î–õ–ò–ù–´
            if (seoData.title && seoData.title.length > 45) {
                seoData.title = seoData.title.substring(0, 42) + '...';
            }
            
            if (seoData.description && seoData.description.length > 164) {
                seoData.description = seoData.description.substring(0, 157) + '...';
            }
            
            return seoData;
        }
        
        // Fallback SEO —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–ª–∏–Ω–∞–º–∏
        const shortTitle = topic.substring(0, 25) + " BLONDE PLACE";
        const shortDesc = "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç " + BRAND_CONFIG.brand + ". " + topic.substring(0, 80) + ". –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!";
        
        return {
            title: shortTitle.length <= 45 ? shortTitle : shortTitle.substring(0, 42) + '...',
            description: shortDesc.length <= 164 ? shortDesc : shortDesc.substring(0, 157) + '...',
            keywords: topic + ", —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, " + BRAND_CONFIG.brand + ", beauty —Å–æ–≤–µ—Ç—ã, —É—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏"
        };
        
    } catch (error) {
        console.warn("[Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO –¥–ª—è \"" + topic + "\". –ò—Å–ø–æ–ª—å–∑—É—é fallback.");
        return {
            title: topic.substring(0, 30) + " " + BRAND_CONFIG.brand,
            description: "–°–æ–≤–µ—Ç—ã —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ " + BRAND_CONFIG.brand + " –ø–æ —Ç–µ–º–µ \"" + topic.substring(0, 60) + "\". –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
            keywords: topic + ", —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, beauty, —É—Ö–æ–¥, " + BRAND_CONFIG.brand
        };
    }
}

// ===== –°–û–ó–î–ê–ù–ò–ï FRONTMATTER =====
async function createBeautyFrontmatter(topic, content, seoData) {
    const category = categorizeBeautyTopic(topic);
    const slug = topic.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú BEAUTY –ö–ê–†–¢–ò–ù–ö–£ –í–ú–ï–°–¢–û BUTLER
    const heroImage = getBeautyImage(topic, category);
    const currentDate = new Date().toISOString();
    
    // Schema.org –¥–ª—è beauty –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const schema = {
        "@context": "https://schema.org",
        "@type": "Article",
        headline: seoData.title,
        description: seoData.description,
        image: heroImage,
        author: {
            "@type": "Organization",
            name: BRAND_CONFIG.salon_name,
            url: "https://" + BRAND_CONFIG.domain
        },
        publisher: {
            "@type": "Organization", 
            name: BRAND_CONFIG.brand,
            logo: {
                "@type": "ImageObject",
                url: "https://" + BRAND_CONFIG.domain + "/logo.png"
            }
        },
        datePublished: currentDate,
        dateModified: currentDate,
        mainEntityOfPage: {
            "@type": "WebPage",
            "@id": "https://" + BRAND_CONFIG.blog_domain + "/blog/" + slug + "/"
        },
        about: [
            {
                "@type": "Thing",
                name: "Beauty Care"
            },
            {
                "@type": "Thing", 
                name: "Hair Care"
            }
        ]
    };
    
    const frontmatter = "---\ntitle: " + JSON.stringify(seoData.title) + "\ndescription: " + JSON.stringify(seoData.description) + "\nkeywords: " + JSON.stringify(seoData.keywords) + "\npubDate: " + JSON.stringify(currentDate) + "\nauthor: " + JSON.stringify(BRAND_CONFIG.author) + "\nheroImage: " + JSON.stringify(heroImage) + "\ncategory: " + JSON.stringify(category) + "\nschema: " + JSON.stringify(schema) + "\n---\n\n" + content + "\n";
    
    return frontmatter;
}

// ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async function main() {
    try {
        console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ó–∞–ø—É—Å–∫ beauty —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...");
        
        const topics = await fs.readFile(TOPICS_FILE, 'utf-8');
        const topicsList = topics.split('\n').filter(line => line.trim() && !line.startsWith('#'));
        
        const batchSize = parseInt(process.env.BATCH_SIZE_PER_THREAD, 10) || 1;
        const startIndex = (THREAD_ID - 1) * batchSize;
        const endIndex = Math.min(startIndex + batchSize, topicsList.length);
        const batchTopics = topicsList.slice(startIndex, endIndex);
        
        if (batchTopics.length === 0) {
            console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ù–µ—Ç beauty —Ç–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.");
            return;
        }
        
        console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –ù–∞–π–¥–µ–Ω–æ " + batchTopics.length + " –Ω–æ–≤—ã—Ö beauty —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É.");
        
        for (const topic of batchTopics) {
            const slug = topic.toLowerCase()
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .replace(/^-|-$/g, '');
            
            const filePath = path.join(POSTS_DIR, slug + ".md");
            
            try {
                await fs.access(filePath);
                console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚è≠Ô∏è –°—Ç–∞—Ç—å—è \"" + topic + "\" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é.");
                continue;
            } catch {
                // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            }
            
            const content = await generateBeautyContent(topic);
            if (content) {
                await fs.mkdir(path.dirname(filePath), { recursive: true });
                await fs.writeFile(filePath, content, 'utf-8');
                
                console.log("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] [‚úî] Beauty —Å—Ç–∞—Ç—å—è \"" + topic + "\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.");
                
                // IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const indexUrl = "https://" + BRAND_CONFIG.blog_domain + "/blog/" + slug + "/";
                await sendIndexNowNotification(indexUrl);
            }
        }
        
    } catch (error) {
        console.error("üíÑ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
        process.exit(1);
    }
}

// ===== INDEXNOW –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø =====
async function sendIndexNowNotification(url) {
    const API_KEY = "df39150ca56f896546628ae3c923dd4a"; // BlondePlace IndexNow token
    const HOST = "blondeplace.netlify.app";
    
    const payload = {
        host: HOST,
        key: API_KEY,
        urlList: [url]
    };
    
    try {
        console.log("üì¢ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è " + url + " –≤ IndexNow...");
        
        const response = await fetch('https://api.indexnow.org/indexnow', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });
        
        if (response.ok) {
            console.log("üì¢ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] [‚úî] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è " + url + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. üî•");
        } else {
            console.log("üì¢ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ö†Ô∏è IndexNow –æ—Ç–≤–µ—Ç–∏–ª: " + response.status);
        }
        
    } catch (error) {
        console.log("üì¢ [Beauty –ü–æ—Ç–æ–∫ #" + THREAD_ID + "] ‚ùå –û—à–∏–±–∫–∞ IndexNow: " + error.message);
    }
}

if (import.meta.url === "file://" + process.argv[1]) {
    main();
}