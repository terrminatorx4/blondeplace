// –§–∞–π–ª: factory.js (BlondePlace –≤–µ—Ä—Å–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522338242992-e1a54906a8da?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = '2f4e6a8b9c1d3e5f7a8b9c0d1e2f3a4b5c6d7e8f';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–ï–†–ê–¶–ò–ò ---
const TARGET_URL_MAIN = "https://blondeplace.ru";
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-pro";

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–ê ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;
// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
const GEMINI_API_KEY_CURRENT = process.env.GEMINI_API_KEY_CURRENT;
const OPENROUTER_API_KEY_CURRENT = process.env.OPENROUTER_API_KEY_CURRENT;

let apiKey;
if (modelChoice === 'deepseek') {
    apiKey = OPENROUTER_API_KEY_CURRENT;
} else {
    apiKey = GEMINI_API_KEY_CURRENT;
}

if (!apiKey) {
    throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á!`);
}

if (modelChoice === 'deepseek') {
    console.log(`üöÄ [–ü–æ—Ç–æ–∫ #${threadId}] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å DeepSeek —á–µ—Ä–µ–∑ OpenRouter —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
} else {
    console.log(`‚ú® [–ü–æ—Ç–æ–∫ #${threadId}] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å Gemini —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
}

// --- –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô –û –¶–ï–õ–ï–í–û–ú –°–ê–ô–¢–ï ---
const REAL_LINKS_MAP = {
    'general': [
        { url: "https://blondeplace.ru", text: `–≥–ª–∞–≤–Ω–æ–º —Å–∞–π—Ç–µ ${BRAND_NAME}` },
        { url: "https://blondeplace.ru/#about", text: `–æ —Å–∞–ª–æ–Ω–µ ${BRAND_NAME}` },
        { url: "https://blondeplace.ru/#contact", text: `–∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö —Å–∞–ª–æ–Ω–∞` },
        { url: "https://blondeplace.ru/#services", text: `—É—Å–ª—É–≥–∞—Ö —Å–∞–ª–æ–Ω–∞` },
    ],
    '–æ–∫—Ä–∞—à': { url: "https://blondeplace.ru/#services", text: "—É—Å–ª—É–≥–∞—Ö –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è" },
    '–±–ª–æ–Ω–¥': { url: "https://blondeplace.ru/#services", text: "—Ä–∞–±–æ—Ç–µ —Å –±–ª–æ–Ω–¥–æ–º" },
    '—Å—Ç—Ä–∏–∂–∫': { url: "https://blondeplace.ru/#services", text: "—É—Å–ª—É–≥–∞—Ö —Å—Ç—Ä–∏–∂–∫–∏" },
    '–º–∞–Ω–∏–∫—é—Ä': { url: "https://blondeplace.ru/#services", text: "nail-—Å–µ—Ä–≤–∏—Å–µ" },
    '—É—Ö–æ–¥': { url: "https://blondeplace.ru/#services", text: "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö —É—Ö–æ–¥–∞" },
    '–∫—Ä–∞—Å–æ—Ç': { url: "https://blondeplace.ru/#about", text: "—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∫—Ä–∞—Å–æ—Ç—ã" },
    '—Å–∞–ª–æ–Ω': { url: "https://blondeplace.ru/#about", text: "–∏—Å—Ç–æ—Ä–∏–∏ —Å–∞–ª–æ–Ω–∞" },
    '–º–∞—Å—Ç–µ—Ä': { url: "https://blondeplace.ru/#about", text: "–∫–æ–º–∞–Ω–¥–µ –º–∞—Å—Ç–µ—Ä–æ–≤" },
    '–ø—Ä–æ—Ü–µ–¥—É—Ä': { url: "https://blondeplace.ru/#services", text: "beauty-–ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö" },
    '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü': { url: "https://blondeplace.ru/#contact", text: "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞" }
};

function getContextualLink(topic) {
    const lowerTopic = topic.toLowerCase();
    for (const keyword in REAL_LINKS_MAP) {
        if (keyword !== 'general' && lowerTopic.includes(keyword)) {
            return REAL_LINKS_MAP[keyword];
        }
    }
    return REAL_LINKS_MAP.general[Math.floor(Math.random() * REAL_LINKS_MAP.general.length)];
}

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delay = 5000;
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': slugify(BRAND_BLOG_NAME)
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });
                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }
                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("–û—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");
                return data.choices[0].message.content;
            } else { // –õ–æ–≥–∏–∫–∞ –¥–ª—è Gemini
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (error.message.includes('503') || error.message.includes('429')) {
                console.warn(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}. –ñ–¥—É ${delay / 1000}—Å...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            } else {
                throw error;
            }
        }
    }
    throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

async function notifyIndexNow(url) {
    console.log(`üì¢ [–ü–æ—Ç–æ–∫ #${threadId}] –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} –≤ IndexNow...`);
    const HOST = "blondeplace.netlify.app";
    
    const payload = JSON.stringify({ host: HOST, key: INDEXNOW_API_KEY, urlList: [url] });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        console.log(`[‚úî] [–ü–æ—Ç–æ–∫ #${threadId}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    } catch (error) {
        console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ IndexNow –¥–ª—è ${url}:`, error.stderr);
    }
}

async function generatePost(topic, slug, interlinks) {
    console.log(`[+] [–ü–æ—Ç–æ–∫ #${threadId}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: ${topic}`);
    
    const planPrompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}". –ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –ø–∏—à–µ—Ç—Å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;
    const plan = await generateWithRetry(planPrompt);

    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é, –ø–æ–ª–µ–∑–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:\n\n${plan}\n\n–¢–µ–º–∞: "${topic}". –í–ê–ñ–ù–û: —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Markdown –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# –¥–ª—è H1, ## –¥–ª—è H2, ### –¥–ª—è H3). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –æ—Ç –ª–∏—Ü–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}. –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –í–°–¢–ê–í–õ–Ø–ô –í –¢–ï–ö–°–¢ –ù–ò–ö–ê–ö–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ![...], –°–°–´–õ–û–ö, URL-–ê–î–†–ï–°–û–í –ò–õ–ò –ú–ï–î–ò–ê-–ö–û–ù–¢–ï–ù–¢–ê. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –ù–µ –ø–∏—à–∏ –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º. –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1.`;
    let articleText = await generateWithRetry(articlePrompt);

    // –°–£–ü–ï–†-–ñ–Å–°–¢–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –æ—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, ''); // –£–±–∏—Ä–∞–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, ''); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ URL
    articleText = articleText.replace(/https-[^\s\)\]]+/g, ''); // –£–±–∏—Ä–∞–µ–º –±–∏—Ç—ã–µ https- —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/www\.[^\s]+/g, ''); // –£–±–∏—Ä–∞–µ–º www —Å—Å—ã–ª–∫–∏
    articleText = articleText.replace(/[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/g, ''); // –£–±–∏—Ä–∞–µ–º –¥–æ–º–µ–Ω—ã
    articleText = articleText.replace(/\*\s*–ü—Ä–∏–º–µ—Ä.*?\*/g, ''); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º

    if (interlinks.length > 0) {
        let interlinkingBlock = '\n\n---\n\n## –ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ\n\n';
        interlinks.forEach(link => {
            interlinkingBlock += `*   [${link.title}](${link.url})\n`;
        });
        articleText += interlinkingBlock;
    }

    const paragraphs = articleText.split('\n\n');
    if (paragraphs.length > 2) {
        const contextualLink = getContextualLink(topic);
        const randomAnchorText = `—É–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ ${contextualLink.text} –Ω–∞ <a href="${contextualLink.url}" target="_blank" rel="nofollow">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ ${BRAND_NAME}</a>`;
        
        const randomIndex = Math.floor(Math.random() * (paragraphs.length - 2)) + 1;
        paragraphs[randomIndex] += ` ${randomAnchorText}`;
        articleText = paragraphs.join('\n\n');
    }
    
    const seoPrompt = `–î–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç. –í–ê–ñ–ù–û: —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º. JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å: "title" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 40-45 —Å–∏–º–≤–æ–ª–æ–≤), "description" (–¥–ª–∏–Ω–æ–π —Ä–æ–≤–Ω–æ 120-130 —Å–∏–º–≤–æ–ª–æ–≤), "keywords" (—Å—Ç—Ä–æ–∫–∞ —Å 5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ö–æ–Ω—Ç–µ–∫—Å—Ç: —ç—Ç–æ –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;
    let seoText = await generateWithRetry(seoPrompt);

    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) { throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."); }
    const seoData = JSON.parse(match[0]);

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    if (seoData.title && seoData.title.length > 45) {
        seoData.title = seoData.title.substring(0, 42) + '...';
    }
    if (seoData.description && seoData.description.length > 130) {
        seoData.description = seoData.description.substring(0, 127) + '...';
    }

    const reviewCount = Math.floor(Math.random() * (990 - 500 + 1)) + 500; // 500-990 –æ—Ç–∑—ã–≤–æ–≤
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);

    // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const finalHeroImage = FALLBACK_IMAGE_URL;

    const fullSchema = {
      "@context": "https://schema.org", 
      "@type": "Article", 
      "headline": seoData.title,
      "description": seoData.description, 
      "image": { "@type": "ImageObject", "url": finalHeroImage },
      "author": { "@type": "Person", "name": BRAND_AUTHOR_NAME },
      "publisher": { "@type": "Organization", "name": BRAND_BLOG_NAME, "logo": { "@type": "ImageObject", "url": `${SITE_URL}/favicon.ico` } },
      "datePublished": new Date().toISOString(),
      "dateModified": new Date().toISOString(),
      "mainEntityOfPage": { "@type": "WebPage", "@id": `${SITE_URL}/blog/${slug}/` },
      "aggregateRating": { 
        "@type": "AggregateRating", 
        "ratingValue": ratingValue, 
        "reviewCount": reviewCount, 
        "bestRating": "5", 
        "worstRating": "1" 
      }
    };

    const frontmatter = `---
title: "${seoData.title.replace(/"/g, '\\"')}"
description: "${seoData.description.replace(/"/g, '\\"')}"
keywords: "${seoData.keywords ? seoData.keywords.replace(/"/g, '\\"') : topic}"
pubDate: "${new Date().toISOString()}"
author: "${BRAND_AUTHOR_NAME}"
heroImage: "${finalHeroImage}"
schema: ${JSON.stringify(fullSchema)}
---
${articleText}
`;
    return frontmatter;
}

async function main() {
    console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞...`);

    try {
        const BATCH_SIZE = parseInt(process.env.BATCH_SIZE, 10) || 1;
        const totalThreads = parseInt(process.env.TOTAL_THREADS, 10) || 1;
        
        const fileContent = await fs.readFile(TOPICS_FILE, 'utf-8');
        const allTopics = fileContent.split(/\r?\n/).map(topic => topic.trim()).filter(Boolean);

        const postsDir = path.join(process.cwd(), 'src', 'content', 'posts');
        await fs.mkdir(postsDir, { recursive: true });
        
        const existingFiles = await fs.readdir(postsDir);
        const existingSlugs = existingFiles.map(file => file.replace('.md', ''));
        
        let newTopics = allTopics.filter(topic => {
            const topicSlug = slugify(topic);
            return topicSlug && !existingSlugs.includes(topicSlug);
        });

        const topicsForThisThread = newTopics.filter((_, index) => index % totalThreads === (threadId - 1)).slice(0, BATCH_SIZE);

        if (topicsForThisThread.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–∞–π–¥–µ–Ω–æ ${topicsForThisThread.length} –Ω–æ–≤—ã—Ö —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É.`);

        let allPostsForLinking = [];
        for (const slug of existingSlugs) {
             try {
                const content = await fs.readFile(path.join(postsDir, `${slug}.md`), 'utf-8');
                const titleMatch = content.match(/title:\s*["']?(.*?)["']?$/m);
                if (titleMatch) {
                    allPostsForLinking.push({ title: titleMatch[1], url: `/blog/${slug}/` });
                }
            } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è */ }
        }
        
        for (const topic of topicsForThisThread) { 
            try {
                const slug = slugify(topic);
                if (!slug) continue;
                
                const filePath = path.join(postsDir, `${slug}.md`);

                let randomInterlinks = [];
                if (allPostsForLinking.length > 0) {
                    randomInterlinks = [...allPostsForLinking].sort(() => 0.5 - Math.random()).slice(0, 3);
                }
                
                const fullContent = await generatePost(topic, slug, randomInterlinks);
                await fs.writeFile(filePath, fullContent);
                console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] [‚úî] –°—Ç–∞—Ç—å—è "${topic}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
                
                // –¢–û–õ–¨–ö–û IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ë–ï–ó git –æ–ø–µ—Ä–∞—Ü–∏–π!
                const newUrl = `${SITE_URL}/blog/${slug}/`;
                await notifyIndexNow(newUrl);

                await new Promise(resolve => setTimeout(resolve, 1000)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
            } catch (e) {
                console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã "${topic}": ${e.message}`);
                if (e.message.includes('429') || e.message.includes('API key')) {
                    console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ö–ª—é—á API –∏—Å—á–µ—Ä–ø–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞.`);
                    break; 
                }
                continue;
            }
        }
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
        process.exit(1);
    }
}

main();
