// –§–∞–π–ª: factory.js (BlondePlace –≤–µ—Ä—Å–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò!)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–ï–†–ê–¶–ò–ò ---
const TARGET_URL_MAIN = "https://blondeplace.ru";
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-1.5-flash"; // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: gemini-1.5-flash (–ù–ï 2.5!)

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–ê ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;

// üîë –£–ú–ù–ê–Ø –†–û–¢–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô (–ö–ê–ö –í BUTLER FACTORY)
let availableApiKeys = [];
let currentKeyIndex = 0;
let apiKey;
let keyInfo;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª—é—á–µ–π
const usedKeys = new Set(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ –≤—Å–µ–º –ø–æ—Ç–æ–∫–∞–º

function loadApiKeysFromSecrets() {
    try {
        // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:`);
        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] NODE_ENV: ${process.env.NODE_ENV || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] GITHUB_ACTIONS: ${process.env.GITHUB_ACTIONS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] RUNNER_OS: ${process.env.RUNNER_OS || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
        
        // –ß–∏—Ç–∞–µ–º GitHub Secret —Å –ø—É–ª–æ–º –∫–ª—é—á–µ–π
        const poolSecret = process.env.GEMINI_API_KEYS_POOL;
        
        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] GEMINI_API_KEYS_POOL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${!!poolSecret}`);
        if (poolSecret) {
            console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] GEMINI_API_KEYS_POOL –¥–ª–∏–Ω–∞: ${poolSecret.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] GEMINI_API_KEYS_POOL –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤: ${poolSecret.substring(0, 20)}...`);
        }

        if (!poolSecret) {
            console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] GitHub Secret GEMINI_API_KEYS_POOL –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
            console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å 'API' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:`);
            Object.keys(process.env).filter(key => key.includes('API')).forEach(key => {
                console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] - ${key}: ${process.env[key] ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
            });
            throw new Error('GitHub Secret GEMINI_API_KEYS_POOL –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }

        // –ü–∞—Ä—Å–∏–º –∫–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)
        availableApiKeys = poolSecret.split('\n')
            .map(key => key.trim())
            .filter(key => key.length > 0);

        console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª—é—á–µ–π: ${availableApiKeys.length}`);
        if (availableApiKeys.length > 0) {
            console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] –ü–µ—Ä–≤—ã–π –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${availableApiKeys[0].substring(0, 20)}...`);
            console.log(`[üîç] [–ü–æ—Ç–æ–∫ #${threadId}] –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: ${availableApiKeys[availableApiKeys.length - 1].substring(0, 20)}...`);
        }

        if (availableApiKeys.length === 0) {
            throw new Error('GitHub Secret GEMINI_API_KEYS_POOL –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª—é—á–µ–π');
        }

        // –ò–ó–ù–ê–ß–ê–õ–¨–ù–ê–Ø –†–û–¢–ê–¶–ò–Ø –ü–û –ù–û–ú–ï–†–£ –ü–û–¢–û–ö–ê (–∫–∞–∫ –≤ Butler Factory)
        currentKeyIndex = (threadId - 1) % availableApiKeys.length;
        apiKey = availableApiKeys[currentKeyIndex];
        keyInfo = `Pool KEY_${currentKeyIndex + 1}/${availableApiKeys.length} (...${apiKey.slice(-4)})`;

        console.log(`[üîë] [–ü–æ—Ç–æ–∫ #${threadId}] –ó–∞–≥—Ä—É–∂–µ–Ω –ø—É–ª –∏–∑ ${availableApiKeys.length} –∫–ª—é—á–µ–π –∏–∑ GitHub Secrets, –∏—Å–ø–æ–ª—å–∑—É—é ${keyInfo}`);

    } catch (error) {
        console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–µ–π: ${error.message}`);
        throw error;
    }
}

// üéØ –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –°–í–û–ë–û–î–ù–´–ô –ö–õ–Æ–ß (–ö–ê–ö –í BUTLER FACTORY)
function switchToNextAvailableKey() {
    if (availableApiKeys.length <= 1) {
        console.warn(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è`);
        return false;
    }

    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á
    let nextKeyIndex = -1;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—É–ª–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ)
    for (let i = availableApiKeys.length; i > currentKeyIndex; i--) {
        const testIndex = i % availableApiKeys.length;
        if (!usedKeys.has(testIndex)) {
            nextKeyIndex = testIndex;
            break;
        }
    }
    
    // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö
    if (nextKeyIndex === -1) {
        for (let i = 0; i < availableApiKeys.length; i++) {
            if (i !== currentKeyIndex && !usedKeys.has(i)) {
                nextKeyIndex = i;
                break;
            }
        }
    }

    if (nextKeyIndex === -1) {
        console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –í—Å–µ –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!`);
        return false;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –∫–ª—é—á
    usedKeys.add(currentKeyIndex); // –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    currentKeyIndex = nextKeyIndex;
    apiKey = availableApiKeys[currentKeyIndex];
    keyInfo = `Pool KEY_${currentKeyIndex + 1}/${availableApiKeys.length} (...${apiKey.slice(-4)}) [SWITCHED]`;

    console.log(`[üîÑ] [–ü–æ—Ç–æ–∫ #${threadId}] –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á: ${keyInfo}`);
    return true;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadApiKeysFromSecrets();

// üèÜ –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ö–ê–ö –í BUTLER FACTORY
if (modelChoice === 'deepseek') {
    console.log(`üöÄ [–ü–æ—Ç–æ–∫ #${threadId}] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å DeepSeek —á–µ—Ä–µ–∑ OpenRouter —Å –∫–ª—é—á–æ–º ${keyInfo}`);
} else {
    console.log(`‚ú® [–ü–æ—Ç–æ–∫ #${threadId}] –ò—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å Gemini ${GEMINI_MODEL_NAME} —Å –∫–ª—é—á–æ–º ${keyInfo}`);
}

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delay = 5000;
    
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': slugify(BRAND_BLOG_NAME)
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });

                if (!response.ok) {
                    if (response.status === 429) {
                        throw new Error(`429 Too Many Requests - Quota exhausted for ${keyInfo}`);
                    }
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }

                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("–û—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");

                return data.choices[0].message.content;
            } else { // –õ–æ–≥–∏–∫–∞ –¥–ª—è Gemini (–ö–ê–ö –í BUTLER)
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            console.warn(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}: ${error.message}`);
            
            // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê BUTLER FACTORY: –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ü–†–ò 429 –û–®–ò–ë–ö–ï
            if (error.message.includes('429') || error.message.includes('Quota exhausted')) {
                console.warn(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ö–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞ –¥–ª—è ${keyInfo}, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è...`);
                
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á
                if (switchToNextAvailableKey()) {
                    console.log(`[‚ú®] [–ü–æ—Ç–æ–∫ #${threadId}] –ü–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ ${keyInfo}, –ø–æ–≤—Ç–æ—Ä—è—é –∑–∞–ø—Ä–æ—Å...`);
                    continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º –ë–ï–ó —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
                } else {
                    console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è`);
                }
            }
            
            if (error.message.includes('503') || error.message.includes('500')) {
                console.warn(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}. –ñ–¥—É ${delay / 1000}—Å...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            } else if (i === maxRetries - 1) {
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–ª—é—á –¥–∞–∂–µ –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
                if (switchToNextAvailableKey()) {
                    console.log(`[üîÑ] [–ü–æ—Ç–æ–∫ #${threadId}] –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º ${keyInfo}`);
                }
                throw error;
            }
        }
    }
    throw new Error(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} (${keyInfo}) –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

async function notifyIndexNow(url) {
    console.log(`üì¢ [–ü–æ—Ç–æ–∫ #${threadId}] –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} –≤ IndexNow...`);
    const HOST = "blondeplace.netlify.app";
    const payload = JSON.stringify({
        host: HOST,
        key: INDEXNOW_API_KEY,
        urlList: [url]
    });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        console.log(`[‚úî] [–ü–æ—Ç–æ–∫ #${threadId}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.`);
    } catch (error) {
        console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ IndexNow –¥–ª—è ${url}:`, error.stderr);
    }
}

async function generatePost(topic, slug, interlinks) {
    console.log(`[+] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –î–ï–¢–ê–õ–¨–ù–£–Æ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: ${topic}`);

    // üéØ BUTLER-–°–¢–ò–õ–¨: –°–£–ü–ï–†-–î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù
    const planPrompt = `–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π, –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ—Ä—Ç–Ω–æ–π SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}".

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ü–õ–ê–ù–£:
- –ú–∏–Ω–∏–º—É–º 15-20 —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
- –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã, –∫–µ–π—Å—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –î–æ–±–∞–≤—å FAQ —Å–µ–∫—Ü–∏—é (5-7 –≤–æ–ø—Ä–æ—Å–æ–≤)
- –í–∫–ª—é—á–∏ —Ä–∞–∑–¥–µ–ª—ã: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ

–ö–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –∂–µ–Ω—â–∏–Ω—ã 25-45 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π.`;

    const plan = await generateWithRetry(planPrompt);

    // üéØ BUTLER-–°–¢–ò–õ–¨: –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–õ–ò–ù–ï –ò –≠–ö–°–ü–ï–†–¢–ù–û–°–¢–ò
    const articlePrompt = `–ù–∞–ø–∏—à–∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é, —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ–±—ä–µ–º–æ–º –ú–ò–ù–ò–ú–£–ú 15000 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:

${plan}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π
- –í–∫–ª—é—á–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –∫–µ–π—Å–æ–≤
- –î–æ–±–∞–≤—å —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ FAQ —Å–µ–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
- –ü–∏—à–∏ –æ—Ç –ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}
- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
- –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π –ø–ª–∞–Ω—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Markdown –∑–∞–≥–æ–ª–æ–≤–∫–∏ (# ## ###)
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ![...], —Å—Å—ã–ª–∫–∏, URL-–∞–¥—Ä–µ—Å–∞
- –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1
- –í–ê–ñ–ù–û: –∏–∑–±–µ–≥–∞–π —á–∞—Å—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–∏—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –ª–µ–∫—Å–∏–∫—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–æ—à–Ω–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞

–û–ë–™–ï–ú: –º–∏–Ω–∏–º—É–º 15000 —Å–∏–º–≤–æ–ª–æ–≤ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ!`;

    let articleText = await generateWithRetry(articlePrompt);

    // –ü–†–û–í–ï–†–ö–ê –î–õ–ò–ù–´ –ò –î–û–ü–û–õ–ù–ï–ù–ò–ï –ï–°–õ–ò –ù–£–ñ–ù–û
    if (articleText.length < 12000) {
        const extensionPrompt = `–†–∞—Å—à–∏—Ä—å —Å—Ç–∞—Ç—å—é "${topic}". –î–æ–±–∞–≤—å:
- –ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
- –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
- –°–æ–≤–µ—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
- –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã

–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è:
${articleText}

–£–≤–µ–ª–∏—á—å –æ–±—ä–µ–º –º–∏–Ω–∏–º—É–º –≤ 1.5 —Ä–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.`;

        articleText = await generateWithRetry(extensionPrompt);
    }

    // –°–£–ü–ï–†-–ñ–Å–°–¢–ö–ê–Ø –û–ß–ò–°–¢–ö–ê
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, '');
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, '');
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, '');
    articleText = articleText.replace(/www\.[^\s]+/g, '');

    // –ò–Ω—Ç–µ—Ä–ª–∏–Ω–∫–∏–Ω–≥
    if (interlinks.length > 0) {
        let interlinkingBlock = '\n\n---\n\n## –ß–∏—Ç–∞–π—Ç–µ —Ç–∞–∫–∂–µ\n\n';
        interlinks.forEach(link => {
            interlinkingBlock += `* [${link.title}](${link.url})\n`;
        });
        articleText += interlinkingBlock;
    }

    const seoPrompt = `–î–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}" —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π JSON-–æ–±—ä–µ–∫—Ç.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON.

JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
- "title" (–¥–ª–∏–Ω–æ–π 40-45 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ)
- "description" (–¥–ª–∏–Ω–æ–π 150-164 —Å–∏–º–≤–æ–ª–∞, –ø—Ä–æ–¥–∞—é—â–∏–π, —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é)
- "keywords" (–°–¢–†–û–ì–û 5-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–º–µ)

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ keywords:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ—Ä–º–∏–Ω—ã –ò–ó –¢–ï–ú–´ —Å—Ç–∞—Ç—å–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–∫—Ä–∞—Å–æ—Ç–∞, —Å—Ç–∏–ª—å, —É—Ö–æ–¥"
- –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ö–û–ù–ö–†–ï–¢–ù–û–ô –ø—Ä–æ—Ü–µ–¥—É—Ä–µ/—Ç–µ—Ö–Ω–∏–∫–µ

–ö–æ–Ω—Ç–µ–∫—Å—Ç: –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}.`;

    let seoText = await generateWithRetry(seoPrompt);

    const match = seoText.match(/\{[\s\S]*\}/);
    if (!match) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏.");
    }
    const seoData = JSON.parse(match[0]);

    const reviewCount = Math.floor(Math.random() * (900 - 300 + 1)) + 300;
    const ratingValue = (Math.random() * (5.0 - 4.7) + 4.7).toFixed(1);

    const finalHeroImage = FALLBACK_IMAGE_URL;

    // üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–•–ï–ú–ê (–∫–∞–∫ —É Butler)
    const fullSchema = {
        "@context": "https://schema.org",
        "@type": "HowTo",
        "headline": seoData.title,
        "description": seoData.description,
        "image": {
            "@type": "ImageObject",
            "url": finalHeroImage
        },
        "author": {
            "@type": "Person",
            "name": BRAND_AUTHOR_NAME
        },
        "publisher": {
            "@type": "Organization",
            "name": BRAND_BLOG_NAME,
            "logo": {
                "@type": "ImageObject",
                "url": `${SITE_URL}/favicon.ico`
            }
        },
        "datePublished": new Date().toISOString(),
        "dateModified": new Date().toISOString(),
        "aggregateRating": {
            "@type": "AggregateRating",
            "ratingValue": ratingValue,
            "reviewCount": reviewCount,
            "bestRating": "5",
            "worstRating": "1"
        },
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": `${SITE_URL}/blog/${slug}/`
        }
    };

    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords || topic)}
pubDate: ${JSON.stringify(new Date().toISOString())}
author: ${JSON.stringify(BRAND_AUTHOR_NAME)}
heroImage: ${JSON.stringify(finalHeroImage)}
schema: ${JSON.stringify(fullSchema)}
---

${articleText}
`;

    return frontmatter;
}

async function main() {
    console.log(`[üöÄ] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ${GEMINI_MODEL_NAME}...`);

    try {
        const BATCH_SIZE = parseInt(process.env.BATCH_SIZE_PER_THREAD, 10) || 1;
        const totalThreads = parseInt(process.env.TOTAL_THREADS, 10) || 1;

        const fileContent = await fs.readFile(TOPICS_FILE, 'utf-8');
        const allTopics = fileContent.split(/\r?\n/).map(topic => topic.trim()).filter(Boolean);

        const postsDir = path.join(process.cwd(), 'src', 'content', 'posts');
        await fs.mkdir(postsDir, { recursive: true });

        const existingFiles = await fs.readdir(postsDir);
        const existingSlugs = existingFiles.map(file => file.replace('.md', ''));

        let newTopics = allTopics.filter(topic => {
            const topicSlug = slugify(topic);
            return topicSlug && !existingSlugs.includes(topicSlug);
        });

        const topicsForThisThread = newTopics.filter((_, index) => index % totalThreads === (threadId - 1)).slice(0, BATCH_SIZE);

        if (topicsForThisThread.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${threadId}] –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`);
            return;
        }

        console.log(`[üéØ] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –ù–∞–π–¥–µ–Ω–æ ${topicsForThisThread.length} –Ω–æ–≤—ã—Ö —Ç–µ–º. –ë–µ—Ä—É –≤ —Ä–∞–±–æ—Ç—É.`);

        let allPostsForLinking = [];
        for (const slug of existingSlugs) {
            try {
                const content = await fs.readFile(path.join(postsDir, `${slug}.md`), 'utf-8');
                const titleMatch = content.match(/title:\s*["']?(.*?)["']?$/m);
                if (titleMatch) {
                    allPostsForLinking.push({ title: titleMatch[1], url: `/blog/${slug}/` });
                }
            } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è */ }
        }

        for (const topic of topicsForThisThread) {
            try {
                const slug = slugify(topic);
                if (!slug) continue;

                const filePath = path.join(postsDir, `${slug}.md`);

                let randomInterlinks = [];
                if (allPostsForLinking.length > 0) {
                    randomInterlinks = [...allPostsForLinking].sort(() => 0.5 - Math.random()).slice(0, 3);
                }

                const fullContent = await generatePost(topic, slug, randomInterlinks);
                await fs.writeFile(filePath, fullContent);
                console.log(`[‚úî] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –°—Ç–∞—Ç—å—è "${topic}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);

                const newUrl = `${SITE_URL}/blog/${slug}/`;
                await notifyIndexNow(newUrl);

                await new Promise(resolve => setTimeout(resolve, 1000));
            } catch (e) {
                console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã "${topic}": ${e.message}`);
                if (e.message.includes('429') || e.message.includes('API key')) {
                    console.error(`[!] [–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] –ö–ª—é—á API –∏—Å—á–µ—Ä–ø–∞–Ω. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞.`);
                    break;
                }
                continue;
            }
        }
    } catch (error) {
        console.error(`[–ü–æ—Ç–æ–∫ #${threadId}] [${keyInfo}] [!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
        process.exit(1);
    }
}

main(); 