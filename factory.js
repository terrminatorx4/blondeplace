import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';

// ===== BLONDEPLACE BRAND CONFIG =====
const BRAND_CONFIG = {
    brand: 'BLONDE PLACE',
    salon_name: 'BLONDE PLACE',
    domain: 'blondeplace.ru',
    blog_domain: 'blondeplace.netlify.app',
    author: 'BLONDE PLACE Beauty Expert',
    location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    phone: '+7 (812) 123-45-67',
    telegram: 'https://t.me/Blondeplace'
};

// ===== FALLBACK IMAGE =====
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1560066984-138dadb4c035';

// ===== REAL LINKS MAP =====
const REAL_LINKS_MAP = {
    'general': [
        { url: "https://blondeplace.ru", text: `–≥–ª–∞–≤–Ω–æ–º —Å–∞–π—Ç–µ ${BRAND_CONFIG.salon_name}` },
        { url: "https://blondeplace.ru/#about", text: `–æ —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_CONFIG.salon_name}` },
        { url: "https://blondeplace.ru/#services", text: `–Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö` },
        { url: "https://blondeplace.ru/#masters", text: `–Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö` },
        { url: "https://blondeplace.ru/#coworking", text: `beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ` },
        { url: "https://t.me/Blondeplace", text: `Telegram –∫–∞–Ω–∞–ª–µ` },
    ],
    '—É—Å–ª—É–≥': { url: "https://blondeplace.ru/#services", text: "–Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö" },
    '–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ': { url: "https://blondeplace.ru/#services", text: "—É—Å–ª—É–≥–∞—Ö –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è –≤–æ–ª–æ—Å" },
    '–±–ª–æ–Ω–¥': { url: "https://blondeplace.ru/#why", text: "–ø–æ—á–µ–º—É BLONDE PLACE" },
    '—Å—Ç—Ä–∏–∂–∫–∞': { url: "https://blondeplace.ru/#services", text: "—É—Å–ª—É–≥–∞—Ö —Å—Ç—Ä–∏–∂–∫–∏" },
    '–º–∞–Ω–∏–∫—é—Ä': { url: "https://blondeplace.ru/#services", text: "—É—Å–ª—É–≥–∞—Ö –º–∞–Ω–∏–∫—é—Ä–∞" },
    '—É—Ö–æ–¥': { url: "https://blondeplace.ru/#services", text: "–ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö –ø–æ —É—Ö–æ–¥—É" },
    '—Å–∫–∏–¥–∫': { url: "https://blondeplace.ru/#discount", text: "–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∏–¥–∫–∏" },
    '–º–∞—Å—Ç–µ—Ä': { url: "https://blondeplace.ru/#masters", text: "–Ω–∞—à–∏—Ö –º–∞—Å—Ç–µ—Ä–∞—Ö" },
    '–±—Ä–µ–Ω–¥': { url: "https://blondeplace.ru/#brands", text: "–±—Ä–µ–Ω–¥–∞—Ö –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º" },
    '–Ω–æ–≤–æ—Å—Ç': { url: "https://blondeplace.ru/#news", text: "–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ª–µ–Ω—Ç–µ" },
    '–æ—Ç–∑—ã–≤': { url: "https://blondeplace.ru/#comments", text: "–æ—Ç–∑—ã–≤–∞—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤" },
    '–∫–æ–≤–æ—Ä–∫–∏–Ω–≥': { url: "https://blondeplace.ru/#coworking", text: "beauty –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ" }
};

// ===== BEAUTY CATEGORIES =====
const BEAUTY_CATEGORIES = [
    'hair-care', 'hair-coloring', 'hairstyles', 'blonde-trends', 'hair-treatments',
    'nail-care', 'manicure', 'pedicure', 'skincare', 'makeup', 'beauty-tips',
    'salon-news', 'hair-products', 'beauty-trends', 'seasonal-beauty'
];

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø AI =====
const MODEL_CHOICE = process.env.MODEL_CHOICE || 'gemini';
const API_KEY_CURRENT = process.env.API_KEY_CURRENT || process.env.GEMINI_API_KEY;
const BATCH_SIZE = parseInt(process.env.BATCH_SIZE) || 5;
const THREAD_ID = process.env.THREAD_ID || '1';
const TOTAL_THREADS = parseInt(process.env.TOTAL_THREADS) || 1;

if (!API_KEY_CURRENT) {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY –∏–ª–∏ API_KEY_CURRENT');
    process.exit(1);
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø AI =====
const genAI = new GoogleGenerativeAI(API_KEY_CURRENT);
const model = genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    generationConfig: {
        temperature: 0.7,
        topP: 0.8,
        topK: 40,
        maxOutputTokens: 2048,
    }
});

// ===== LOAD TOPICS =====
async function loadTopics() {
    try {
        const data = await fs.readFile('topics.txt', 'utf8');
        return data.split('\n').filter(line => line.trim()).map(line => line.trim());
    } catch (error) {
        console.log('üìù topics.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª...');
        await fs.writeFile('topics.txt', '');
        return [];
    }
}

// ===== CATEGORIZE TOPIC =====
function categorizeBeautyTopic(topic) {
    const topicLower = topic.toLowerCase();
    
    if (topicLower.includes('–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ') || topicLower.includes('–±–ª–æ–Ω–¥') || topicLower.includes('—Ü–≤–µ—Ç')) return 'hair-coloring';
    if (topicLower.includes('—Å—Ç—Ä–∏–∂–∫–∞') || topicLower.includes('–ø—Ä–∏—á–µ—Å–∫–∞')) return 'hairstyles';
    if (topicLower.includes('—É—Ö–æ–¥ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏') || topicLower.includes('–≤–æ–ª–æ—Å—ã')) return 'hair-care';
    if (topicLower.includes('–º–∞–Ω–∏–∫—é—Ä') || topicLower.includes('–Ω–æ–≥—Ç–∏')) return 'manicure';
    if (topicLower.includes('–ø–µ–¥–∏–∫—é—Ä')) return 'pedicure';
    if (topicLower.includes('—É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π') || topicLower.includes('–∫–æ–∂–∞')) return 'skincare';
    if (topicLower.includes('–º–∞–∫–∏—è–∂')) return 'makeup';
    if (topicLower.includes('–∫–æ–≤–æ—Ä–∫–∏–Ω–≥')) return 'salon-news';
    
    return 'beauty-tips';
}

// ===== GENERATE SEO - –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ú–ï–¢–ê-–¢–ï–ì–ò BUTLER –£–†–û–í–ù–Ø =====
async function generateBeautySEO(topic, category) {
    const prompt = `–°–æ–∑–¥–∞–π SEO –¥–ª—è beauty —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ "${topic}":

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- Title: 35-40 —Å–∏–º–≤–æ–ª–æ–≤ (–¢–û–ß–ù–û!)
- Description: 150-160 —Å–∏–º–≤–æ–ª–æ–≤ (–¢–û–ß–ù–û!)
- Keywords: 5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–≤–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
- Title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ø–ª—è—é—â–∏–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å "${BRAND_CONFIG.salon_name}"
- Description –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ–¥–∞—é—â–∏–º —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
TITLE: [—Ç–æ—á–Ω—ã–π title]
DESCRIPTION: [—Ç–æ—á–Ω–æ–µ description]
KEYWORDS: [–∫–ª—é—á–µ–≤–∏–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]`;

    try {
        const result = await model.generateContent(prompt);
        const text = result.response.text();
        
        const titleMatch = text.match(/TITLE: (.+)/i);
        const descMatch = text.match(/DESCRIPTION: (.+)/i);
        const keywordsMatch = text.match(/KEYWORDS: (.+)/i);
        
        return {
            title: titleMatch ? titleMatch[1].trim() : `${topic} | ${BRAND_CONFIG.salon_name}`,
            description: descMatch ? descMatch[1].trim() : `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ${BRAND_CONFIG.salon_name}. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!`,
            keywords: keywordsMatch ? keywordsMatch[1].trim() : `${topic}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, ${BRAND_CONFIG.location}`
        };
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO: ${error.message}`);
        return {
            title: `${topic} | ${BRAND_CONFIG.salon_name}`,
            description: `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ${BRAND_CONFIG.salon_name}. –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!`,
            keywords: `${topic}, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, ${BRAND_CONFIG.location}`
        };
    }
}

// ===== GENERATE CONTENT =====
async function generateBeautyContent(topic) {
    const category = categorizeBeautyTopic(topic);
    
    const prompt = `–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é beauty —Å—Ç–∞—Ç—å—é –ø—Ä–æ "${topic}" –¥–ª—è —Å–∞–ª–æ–Ω–∞ "${BRAND_CONFIG.salon_name}".

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 800-1200 —Å–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ H2, H3
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –£–ø–æ–º–∏–Ω–∞–π —É—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
- –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é
- –ü–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –í–≤–µ–¥–µ–Ω–∏–µ
2. 3-4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º

–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–Ω–µ ##), –ø–∏—à–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.`;

    try {
        const result = await model.generateContent(prompt);
        return result.response.text();
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`);
        return null;
    }
}

// ===== CREATE FRONTMATTER - BUTLER SEO –°–¢–†–£–ö–¢–£–†–ê =====
async function createBeautyFrontmatter(topic, content, seoData) {
    const slug = topic.toLowerCase()
        .replace(/[^\w\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
    
    const category = categorizeBeautyTopic(topic);
    const heroImage = FALLBACK_IMAGE_URL;
    const currentDate = new Date().toISOString();
    
    // BUTLER-LEVEL SCHEMA.ORG
    const schema = {
        "@context": "https://schema.org",
        "@type": "Article",
        headline: seoData.title,
        description: seoData.description,
        image: heroImage,
        author: {
            "@type": "Organization",
            name: BRAND_CONFIG.salon_name,
            url: `https://${BRAND_CONFIG.domain}`
        },
        publisher: {
            "@type": "Organization", 
            name: BRAND_CONFIG.brand,
            logo: {
                "@type": "ImageObject",
                url: `https://${BRAND_CONFIG.domain}/logo.png`
            }
        },
        datePublished: currentDate,
        dateModified: currentDate,
        mainEntityOfPage: {
            "@type": "WebPage",
            "@id": `https://${BRAND_CONFIG.blog_domain}/blog/${slug}/`
        },
        about: [
            {
                "@type": "Thing",
                name: "Beauty Care"
            },
            {
                "@type": "Thing", 
                name: "Hair Care"
            }
        ]
    };
    
    const frontmatter = `---
title: ${JSON.stringify(seoData.title)}
description: ${JSON.stringify(seoData.description)}
keywords: ${JSON.stringify(seoData.keywords)}
pubDate: ${JSON.stringify(currentDate)}
author: ${JSON.stringify(BRAND_CONFIG.author)}
heroImage: ${JSON.stringify(heroImage)}
category: ${JSON.stringify(category)}
schema: ${JSON.stringify(schema)}
---

${content}
`;
    
    return frontmatter;
}

// ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async function main() {
    try {
        console.log(`üé® === BLONDEPLACE BEAUTY FACTORY ===`);
        console.log(`üíÑ –°–∞–ª–æ–Ω: ${BRAND_CONFIG.salon_name}`);
        console.log(`üåê –î–æ–º–µ–Ω: ${BRAND_CONFIG.domain}`);
        console.log(`üì± –ü–æ—Ç–æ–∫: #${THREAD_ID} | –ü–∞–∫–µ—Ç: ${BATCH_SIZE} —Å—Ç–∞—Ç–µ–π`);
        console.log(`ü§ñ –ú–æ–¥–µ–ª—å: ${MODEL_CHOICE}`);
        
        const allTopics = await loadTopics();
        
        if (allTopics.length === 0) {
            console.log('üìù –¢–æ–ø–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª topics.txt');
            return;
        }
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫–∏ –ø–æ –ø–æ—Ç–æ–∫–∞–º
        const threadTopics = allTopics.filter((_, index) => 
            index % TOTAL_THREADS === (parseInt(THREAD_ID) - 1)
        );
        
        const topicsToProcess = threadTopics.slice(0, BATCH_SIZE);
        
        if (topicsToProcess.length === 0) {
            console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üì≠ –ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
            return;
        }
        
        console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${topicsToProcess.length} —Ç–æ–ø–∏–∫–æ–≤...`);
        
        let successCount = 0;
        
        for (const topic of topicsToProcess) {
            try {
                console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é beauty —Å—Ç–∞—Ç—å—é: "${topic}"`);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                const content = await generateBeautyContent(topic);
                if (!content) continue;
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO
                const category = categorizeBeautyTopic(topic);
                const seoData = await generateBeautySEO(topic, category);
                
                // –°–æ–∑–¥–∞–µ–º frontmatter
                const fullContent = await createBeautyFrontmatter(topic, content, seoData);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                const slug = topic.toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/-+/g, '-')
                    .replace(/^-|-$/g, '');
                
                const filePath = `src/content/posts/${slug}.md`;
                await fs.writeFile(filePath, fullContent);
                
                console.log(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] ‚úÖ –°–æ–∑–¥–∞–Ω: ${filePath}`);
                successCount++;
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 2000));
                
            } catch (error) {
                console.error(`[–ü–æ—Ç–æ–∫ #${THREAD_ID}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "${topic}":`, error.message);
            }
        }
        
        console.log(`\nüéâ [–ü–æ—Ç–æ–∫ #${THREAD_ID}] –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${successCount}/${topicsToProcess.length}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1].endsWith('factory.js')) {
    main();
}

export { main };