// ===== ALPHA-FACTORY v5.30-ULTRA-OPTIMIZED-FINAL - –ò–°–ü–†–ê–í–õ–ï–ù–ê –§–û–†–ú–£–õ–ê –ù–£–ú–ï–†–ê–¶–ò–ò =====
// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è threadId!
// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: 30000 + ((threadId - 1) * 1000) + articleIndex
// Thread 1: 30000, Thread 2: 31000, Thread 3: 32000, –∏ —Ç.–¥.

import { GoogleGenerativeAI } from '@google/generative-ai';
import fetch from 'node-fetch';
import { promises as fs } from 'fs';
import path from 'path';

// ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
const ALPHA_KEYWORDS = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
    "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞", 
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã",
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥",
    "–±—å—é—Ç–∏-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
    "—Å–∞–ª–æ–Ω-–∫—Ä–∞—Å–æ—Ç—ã",
    "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ-–∫—Ä–µ—Å–ª–æ"
];

const BRAND_BLOG_NAME = "BlondePlace Beauty Blog";
const BRAND_AUTHOR_NAME = "–≠–∫—Å–ø–µ—Ä—Ç BlondePlace";
const SITE_URL = "https://blondeplace.netlify.app";
const MAIN_SITE_URL = "https://blondeplace.ru";
const INDEXNOW_API_KEY = "df39150ca56f896546628ae3c923dd4a";

// –¶–ï–õ–ï–í–´–ï URL –û–°–ù–û–í–ù–û–ì–û –°–ê–ô–¢–ê (–ü–õ–ê–ù –ê–õ–¨–§–ê-–£–î–ê–†)
const TARGET_URLS = [
    `${MAIN_SITE_URL}/#about`,
    `${MAIN_SITE_URL}/#services`, 
    `${MAIN_SITE_URL}/#discount`,
    `${MAIN_SITE_URL}/#why`,
    `${MAIN_SITE_URL}/#coworking`,
    `${MAIN_SITE_URL}/#masters`,
    `${MAIN_SITE_URL}/#comments`,
    `${MAIN_SITE_URL}/#brands`,
    `${MAIN_SITE_URL}/#news`,
    `${MAIN_SITE_URL}`
];

// ===== –ú–ê–°–°–ò–í–´ –î–õ–Ø –ê–ë–°–û–õ–Æ–¢–ù–û–ô –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò (–£–í–ï–õ–ò–ß–ï–ù–´ –î–õ–Ø SEO) =====

const SEO_TITLE_PREFIXES = [
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", "–õ—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è",
    "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã", "–ò–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä",
    "–ù–∞–¥—ë–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
    "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ü–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏", "–£—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–ì—Ä–∞–º–æ—Ç–Ω—ã–π –≤—ã–±–æ—Ä"
];

const SEO_TITLE_ENDINGS = [
    "–≤ –°–ü–± –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "–¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤", "—Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞", "–æ—Ç BlondePlace",
    "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–µ–º", "—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º", "–¥–ª—è –≤–∞—à–µ–≥–æ —É—Å–ø–µ—Ö–∞", "–ø—Ä–µ–º–∏—É–º —É—Ä–æ–≤–Ω—è",
    "—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã", "—Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π", "—Ç–æ–ø –∫–∞—á–µ—Å—Ç–≤–∞"
];

const SEO_DESCRIPTION_STARTERS = [
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É", "–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É",
    "–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤—ã–±–æ—Ä–∞", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "–ì—Ä–∞–º–æ—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É",
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ", "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞", "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ",
    "–ù–∞–¥—ë–∂–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è", "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –≤—ã–±–æ—Ä–∞", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–±–æ—Ä–∞"
];

const SEO_DESCRIPTION_MIDDLES = [
    "–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω—é–∞–Ω—Å–æ–≤ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ", 
    "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤", "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
    "–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π", "–¢—â–∞—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
    "–û–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤", "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", "–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"
];

const SEO_DESCRIPTION_ENDINGS = [
    "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BlondePlace", "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
    "–°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º BlondePlace",
    "–î–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±–æ—Ä –æ–ø—ã—Ç–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –Ω–∞—à–µ–≥–æ —Å–∞–ª–æ–Ω–∞", "–ü–æ–ª—É—á–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –∫–æ–º–∞–Ω–¥—ã BlondePlace"
];

const GEO_CONTEXTS = [
    "–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ", "–≤ —Ü–µ–Ω—Ç—Ä–µ –ü–∏—Ç–µ—Ä–∞", "–Ω–∞ –ù–µ–≤—Å–∫–æ–º –ø—Ä–æ—Å–ø–µ–∫—Ç–µ", "–≤ –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ",
    "–≤ –ü—Ä–∏–º–æ—Ä—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ",
    "–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –§—Ä—É–Ω–∑–µ–Ω—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –í—ã–±–æ—Ä–≥—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ",
    "–≤ —Å–∞–ª–æ–Ω–µ BlondePlace", "–≤ –ø—Ä–µ–º–∏—É–º-—Å–∞–ª–æ–Ω–µ", "–¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –°–ü–±", "–≤ beauty-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏"
];

// ===== –§–£–ù–ö–¶–ò–Ø –ê–ì–†–ï–°–°–ò–í–ù–û–ì–û –ü–ï–†–ï–°–ü–ê–ú–ê –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í =====
function getKeywordSpamStrategy(keyword) {
    const strategies = {
        "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥": {
            primary: "–±—å—é—Ç–∏",
            secondary: "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
            targets: { primary: 80, secondary: 60 }
        },
        "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞": {
            primary: "–∞—Ä–µ–Ω–¥–∞", 
            secondary: "–∫—Ä–µ—Å–ª–∞",
            targets: { primary: 75, secondary: 55 }
        },
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞": {
            primary: "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
            secondary: "–º–∞—Å—Ç–µ—Ä–∞", 
            targets: { primary: 70, secondary: 50 }
        },
        "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞": {
            primary: "–∫—Ä–µ—Å–ª–æ",
            secondary: "–º–∞—Å—Ç–µ—Ä–∞",
            targets: { primary: 75, secondary: 55 }
        },
        "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã": {
            primary: "—Å–∞–ª–æ–Ω",
            secondary: "–∫—Ä–∞—Å–æ—Ç—ã",
            targets: { primary: 80, secondary: 60 }
        },
        "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": {
            primary: "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
            secondary: "–≤–æ–ª–æ—Å",
            targets: { primary: 70, secondary: 50 }
        },
        "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥": {
            primary: "—Ç–æ—Ç–∞–ª",
            secondary: "–±–ª–æ–Ω–¥", 
            targets: { primary: 75, secondary: 55 }
        },
        "–±—å—é—Ç–∏-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": {
            primary: "–±—å—é—Ç–∏",
            secondary: "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
            targets: { primary: 80, secondary: 60 }
        },
        "—Å–∞–ª–æ–Ω-–∫—Ä–∞—Å–æ—Ç—ã": {
            primary: "—Å–∞–ª–æ–Ω",
            secondary: "–∫—Ä–∞—Å–æ—Ç—ã",
            targets: { primary: 80, secondary: 60 }
        },
        "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ-–∫—Ä–µ—Å–ª–æ": {
            primary: "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ",
            secondary: "–∫—Ä–µ—Å–ª–æ",
            targets: { primary: 75, secondary: 55 }
        }
    };
    
    return strategies[keyword] || {
        primary: keyword.split(' ')[0],
        secondary: keyword.split(' ')[1] || "–Ω–µ—Ç",
        targets: { primary: 70, secondary: 50 }
    };
}

// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ù–£–ú–ï–†–ê–¶–ò–ò –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –§–û–†–ú–£–õ–û–ô =====
function getPerfectPostNumber(threadId, articleIndex) {
    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê: 30000 + ((threadId - 1) * 1000) + articleIndex
    // Thread 1: 30000, Thread 2: 31000, Thread 3: 32000, –∏ —Ç.–¥.
    const safeStartNumber = 30000;
    const startNumber = safeStartNumber + ((threadId - 1) * 1000) + articleIndex;
    
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: üéØ –ò–î–ï–ê–õ–¨–ù–ê–Ø –ù–£–ú–ï–†–ê–¶–ò–Ø!`);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: –§–æ—Ä–º—É–ª–∞: 30000 + ((${threadId} - 1) * 1000) + ${articleIndex}`);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: –ë–ª–æ–∫ –ø–æ—Ç–æ–∫–∞: ${safeStartNumber + ((threadId - 1) * 1000)}-${safeStartNumber + ((threadId - 1) * 1000) + 999}`);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: –°—Ç–∞—Ç—å—è ${articleIndex} ‚Üí –Ω–æ–º–µ—Ä ${startNumber}`);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: ‚ö° –ú–ì–ù–û–í–ï–ù–ù–û! 0 API –∑–∞–ø—Ä–æ—Å–æ–≤! 0 –∑–∞–¥–µ—Ä–∂–µ–∫!`);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê! –¢–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ!`);
    
    return startNumber;
}

// ===== –§–£–ù–ö–¶–ò–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û SEO –ó–ê–ì–û–õ–û–í–ö–ê (40-45 –°–ò–ú–í–û–õ–û–í) =====
async function createPerfectSEOTitle(keyword, postNumber, threadId) {
    try {
        const randomPrefix = SEO_TITLE_PREFIXES[Math.floor(Math.random() * SEO_TITLE_PREFIXES.length)];
        const randomEnding = SEO_TITLE_ENDINGS[Math.floor(Math.random() * SEO_TITLE_ENDINGS.length)];
        
        // –†–∞–∑–ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 40-45 —Å–∏–º–≤–æ–ª–æ–≤
        const titleTemplates = [
            `${randomPrefix}: ${keyword} ${randomEnding}`,
            `${keyword} - ${randomPrefix} ${randomEnding}`, 
            `${randomPrefix} ${keyword} ${randomEnding}`,
            `${keyword}: ${randomPrefix} ${randomEnding}`,
            `${randomPrefix} –¥–ª—è ${keyword} ${randomEnding}`
        ];
        
        let finalTitle = titleTemplates[Math.floor(Math.random() * titleTemplates.length)];
        
        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 45 —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ
        if (finalTitle.length > 45) {
            finalTitle = finalTitle.substring(0, 42) + "...";
        }
        
        console.log(`[SEO] Thread #${threadId}: –°–æ–∑–¥–∞–Ω SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫ (${finalTitle.length} —Å–∏–º–≤–æ–ª–æ–≤): "${finalTitle}"`);
        return finalTitle;
        
    } catch (error) {
        console.log(`[SEO] Thread #${threadId}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${error.message}`);
        const fallbackTitle = `${keyword} - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –≤ –°–ü–±`;
        return fallbackTitle.length > 45 ? fallbackTitle.substring(0, 42) + "..." : fallbackTitle;
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û SEO –û–ü–ò–°–ê–ù–ò–Ø (150-164 –°–ò–ú–í–û–õ–ê) =====
async function createPerfectSEODescription(keyword, postNumber, threadId) {
    try {
        const randomStarter = SEO_DESCRIPTION_STARTERS[Math.floor(Math.random() * SEO_DESCRIPTION_STARTERS.length)];
        const randomMiddle = SEO_DESCRIPTION_MIDDLES[Math.floor(Math.random() * SEO_DESCRIPTION_MIDDLES.length)];
        const randomEnding = SEO_DESCRIPTION_ENDINGS[Math.floor(Math.random() * SEO_DESCRIPTION_ENDINGS.length)];
        
        let description = `${randomStarter} ${keyword}. ${randomMiddle}. ${randomEnding}`;
        
        // –¢–æ—á–Ω–∞—è –ø–æ–¥–≥–æ–Ω–∫–∞ –ø–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω 150-164 —Å–∏–º–≤–æ–ª–æ–≤
        if (description.length < 150) {
            description += `. –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;
        }
        
        if (description.length > 164) {
            description = description.substring(0, 161) + "...";
        }
        
        console.log(`[SEO] Thread #${threadId}: –°–æ–∑–¥–∞–Ω–æ SEO –æ–ø–∏—Å–∞–Ω–∏–µ (${description.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        return description;
        
    } catch (error) {
        console.log(`[SEO] Thread #${threadId}: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è: ${error.message}`);
        const fallbackDesc = `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É ${keyword}. –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã BlondePlace –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.`;
        return fallbackDesc.length > 164 ? fallbackDesc.substring(0, 161) + "..." : fallbackDesc;
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò HERO –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø =====
function generateProperHeroImage(keyword, postNumber) {
    const imageQueries = {
        "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥": "beauty-salon-workspace",
        "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞": "barber-chair-rental",
        "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞": "beauty-coworking-space", 
        "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞": "professional-salon-chair",
        "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã": "beauty-salon-interior",
        "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "hair-highlighting-process",
        "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥": "blonde-hair-coloring",
        "–±—å—é—Ç–∏-–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": "beauty-salon-workspace",
        "—Å–∞–ª–æ–Ω-–∫—Ä–∞—Å–æ—Ç—ã": "modern-beauty-salon",
        "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–µ-–∫—Ä–µ—Å–ª–æ": "barber-salon-chair"
    };
    
    const query = imageQueries[keyword] || "beauty-salon-professional";
    
    const alternativeImages = [
        "https://images.unsplash.com/photo-1562322140-8baeececf3df?q=80&w=800&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1521590832167-7bcbfaa6381f?q=80&w=800&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1582095133179-bfd08e2fc6b3?q=80&w=800&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=800&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?q=80&w=800&auto=format&fit=crop",
        "https://images.unsplash.com/photo-1519699047748-de8e457a634e?q=80&w=800&auto=format&fit=crop"
    ];
    
    const selectedImage = alternativeImages[postNumber % alternativeImages.length];
    return selectedImage;
}

// ===== –§–£–ù–ö–¶–ò–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –°–°–´–õ–û–ö –° –ö–õ–Æ–ß–ï–í–´–ú–ò –ê–ù–ö–û–†–ê–ú–ò =====
function generateIntelligentLinks(content, keyword, linkTargets, postNumber) {
    try {
        const strategy = getKeywordSpamStrategy(keyword);
        const words = content.split(' ');
        let modifiedContent = content;
        let linkCount = 0;
        let mainSiteLinks = 0;
        let internalLinks = 0;

        // –¶–µ–ª—å: 135 —Å—Å—ã–ª–æ–∫ (100 –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç, 35 –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö)
        const targetMainSiteLinks = 100;
        const targetInternalLinks = 35;
        const totalTargetLinks = 135;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (blog posts)
        const internalTargets = [];
        for (let i = 1; i <= 50; i++) {
            const randomPostNum = 100000 + Math.floor(Math.random() * 99999);
            internalTargets.push(`${SITE_URL}/blog/post${randomPostNum}/`);
        }

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        for (let i = 0; i < words.length && linkCount < totalTargetLinks; i++) {
            // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ 95% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 135 —Å—Å—ã–ª–æ–∫
            if (Math.random() < 0.95) {
                const word = words[i];
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∞–Ω–∫–æ—Ä—ã –≤–º–µ—Å—Ç–æ "—á–∏—Ç–∞—Ç—å", "—É–∑–Ω–∞—Ç—å"
                let anchorText = word;
                if (word.toLowerCase().includes(strategy.primary.toLowerCase()) || 
                    word.toLowerCase().includes(strategy.secondary.toLowerCase()) ||
                    word.toLowerCase().includes("—Å–∞–ª–æ–Ω") || 
                    word.toLowerCase().includes("–º–∞—Å—Ç–µ—Ä") ||
                    word.toLowerCase().includes("–∫—Ä–∞—Å–æ—Ç–∞") ||
                    word.toLowerCase().includes("—É—Å–ª—É–≥")) {
                    anchorText = word;
                } else {
                    // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    const keywordAnchors = [strategy.primary, strategy.secondary, keyword];
                    anchorText = keywordAnchors[Math.floor(Math.random() * keywordAnchors.length)];
                }

                let targetUrl;
                if (mainSiteLinks < targetMainSiteLinks) {
                    targetUrl = linkTargets[Math.floor(Math.random() * linkTargets.length)];
                    mainSiteLinks++;
                } else if (internalLinks < targetInternalLinks) {
                    targetUrl = internalTargets[Math.floor(Math.random() * internalTargets.length)];
                    internalLinks++;
                } else {
                    break; // –î–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ HTML –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞
                const linkMarkdown = `[${anchorText}](${targetUrl})`;
                
                // –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ –Ω–∞ —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                const wordRegex = new RegExp(`\\b${word}\\b`, 'i');
                modifiedContent = modifiedContent.replace(wordRegex, linkMarkdown);
                
                linkCount++;
            }
        }

        console.log(`[LINKS] –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${linkCount} —Å—Å—ã–ª–æ–∫ —Å –ö–õ–Æ–ß–ï–í–´–ú–ò –∞–Ω–∫–æ—Ä–∞–º–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ${mainSiteLinks}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: ${internalLinks})`);
        console.log(`[ANCHORS] –í—Å–µ –∞–Ω–∫–æ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: "${strategy.primary}", "${strategy.secondary}", "${keyword}"`);
        console.log(`[HTML] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Markdown —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–æ–∫ –≤–º–µ—Å—Ç–æ HTML —Ç–µ–≥–æ–≤`);
        
        return modifiedContent;
        
    } catch (error) {
        console.log(`[LINKS] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫: ${error.message}`);
        return content;
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –ê–ì–†–ï–°–°–ò–í–ù–û–ô –û–ß–ò–°–¢–ö–ò AI –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í =====
function aggressiveCleanAIComments(content) {
    console.log('[CLEAN] –ù–∞—á–∏–Ω–∞—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ò–ò –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
    
    let cleanedContent = content;
    
    // –£–¥–∞–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const patterns = [
        /\*\*[^*]+\*\*/g,  // **—Ç–µ–∫—Å—Ç**
        /\*[^*]+\*/g,      // *—Ç–µ–∫—Å—Ç*
        /```[\s\S]*?```/g, // ```–±–ª–æ–∫–∏ –∫–æ–¥–∞```
        /`[^`]+`/g,        // `–∏–Ω–ª–∞–π–Ω –∫–æ–¥`
        /\[[\s\S]*?\]/g,   // [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏]
        /\([^)]*–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ[^)]*\)/gi,
        /\([^)]*–∑–∞–º–µ—Ç–∫–∞[^)]*\)/gi,
        /\([^)]*–≤–∞–∂–Ω–æ[^)]*\)/gi,
        /<!-- [\s\S]*? -->/g,
        /\/\* [\s\S]*? \*\//g,
        /\/\/ [^\n]*/g,
        /#{1,6}\s[^\n]*/g,  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ markdown
        />\s[^\n]*/g,       // –¶–∏—Ç–∞—Ç—ã
        /\n\s*\n\s*\n/g    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    ];
    
    patterns.forEach(pattern => {
        cleanedContent = cleanedContent.replace(pattern, ' ');
    });
    
    // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    cleanedContent = cleanedContent
        .replace(/\s+/g, ' ')
        .replace(/\n+/g, '\n')
        .trim();
    
    console.log('[CLEAN] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return cleanedContent;
}

// ===== –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ü–ï–†–ï–°–ü–ê–ú–ê =====
function checkKeywordSpam(content, keyword, threadId) {
    const strategy = getKeywordSpamStrategy(keyword);
    
    const primaryCount = (content.toLowerCase().match(new RegExp(strategy.primary.toLowerCase(), 'g')) || []).length;
    const secondaryCount = (content.toLowerCase().match(new RegExp(strategy.secondary.toLowerCase(), 'g')) || []).length;
    
    console.log(`[SPAM-CHECK] Thread #${threadId}: "${strategy.primary}" –Ω–∞–π–¥–µ–Ω–æ ${primaryCount} —Ä–∞–∑ (—Ü–µ–ª—å: ${strategy.targets.primary}-${strategy.targets.primary + 10})`);
    console.log(`[SPAM-CHECK] Thread #${threadId}: "${strategy.secondary}" –Ω–∞–π–¥–µ–Ω–æ ${secondaryCount} —Ä–∞–∑ (—Ü–µ–ª—å: ${strategy.targets.secondary}-${strategy.targets.secondary + 10})`);
    
    if (primaryCount >= strategy.targets.primary) {
        console.log(`[SUCCESS] Thread #${threadId}: ‚úÖ –û–¢–õ–ò–ß–ù–´–ô –ü–ï–†–ï–°–ü–ê–ú! "${strategy.primary}" ${primaryCount} —Ä–∞–∑!`);
    } else {
        console.log(`Warning:  Thread #${threadId}: ‚ö†Ô∏è –°–õ–ê–ë–´–ô –ü–ï–†–ï–°–ü–ê–ú! "${strategy.primary}" —Ç–æ–ª—å–∫–æ ${primaryCount} —Ä–∞–∑!`);
    }
    
    return { primaryCount, secondaryCount };
}

// ===== –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò INDEXNOW =====
async function sendIndexNow(postUrl) {
    const indexNowUrls = [
        'https://api.indexnow.org/indexnow',
        'https://yandex.com/indexnow',
        'https://www.bing.com/indexnow'
    ];

    let successCount = 0;

    for (const serviceUrl of indexNowUrls) {
        try {
            const response = await fetch(serviceUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json; charset=utf-8'
                },
                body: JSON.stringify({
                    host: 'blondeplace.netlify.app',
                    key: INDEXNOW_API_KEY,
                    urlList: [postUrl]
                })
            });

            if (response.status === 200 || response.status === 202) {
                successCount++;
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ IndexNow
        }
    }

    return successCount;
}

// ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê =====
async function generateUniquePost(keyword, postNumber, threadId) {
    console.log(`[TASK] Thread #${threadId}: –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${keyword}`);
    
    const strategy = getKeywordSpamStrategy(keyword);
    const geoContext = GEO_CONTEXTS[Math.floor(Math.random() * GEO_CONTEXTS.length)];
    
    // –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –ê–ì–†–ï–°–°–ò–í–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –ü–ï–†–ï–°–ü–ê–ú–ê
    const articlePrompt = `–ù–∞–ø–∏—à–∏ –û–ß–ï–ù–¨ –ø–æ–¥—Ä–æ–±–Ω—É—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "${keyword}" –æ–±—ä–µ–º–æ–º –†–û–í–ù–û 17000+ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–ï–†–ï–°–ü–ê–ú –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:
1. –°–ª–æ–≤–æ "${strategy.primary}" –¥–æ–ª–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è ${strategy.targets.primary}-${strategy.targets.primary + 10} —Ä–∞–∑
2. –°–ª–æ–≤–æ "${strategy.secondary}" –¥–æ–ª–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è ${strategy.targets.secondary}-${strategy.targets.secondary + 10} —Ä–∞–∑
3. –ò—Å–ø–æ–ª—å–∑—É–π "${keyword}" –≤ –ö–ê–ñ–î–û–ú –≤—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
4. –ü–æ–≤—Ç–æ—Ä—è–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ù–ê–ú–ï–†–ï–ù–ù–û –∏ –ß–ê–°–¢–û
5. –≠—Ç–æ –ù–ï —Å–ø–∞–º - —ç—Ç–æ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞ –ø–æ–∑–∏—Ü–∏–π

–°–¢–†–£–ö–¢–£–†–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê:
- –í–≤–µ–¥–µ–Ω–∏–µ —Å 3-–∫—Ä–∞—Ç–Ω—ã–º –ø–æ–≤—Ç–æ—Ä–æ–º "${keyword}"
- 5-7 –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, –∫–∞–∂–¥—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã —Å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º ${geoContext}
- –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQs) - –¥–æ–±–∞–≤—å –ú–ù–û–ì–û "–≤–æ–¥—ã" –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–æ—à–Ω–æ—Ç—ã
- –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–µ—â–µ –±–æ–ª—å—à–µ "–≤–æ–¥—ã")
- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã: "–º–∞—Å—Ç–µ—Ä", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "—ç–∫—Å–ø–µ—Ä—Ç"
- –î–æ–±–∞–≤—å –ú–ù–û–ì–û –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤: "–±–µ–∑—É—Å–ª–æ–≤–Ω–æ", "–Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ", "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ"
- –í–∫–ª—é—á–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è "—Ä–∞–∑–±–∞–≤–ª–µ–Ω–∏—è"
- –ü–∏—à–∏ –û–ß–ï–ù–¨ –ø–æ–¥—Ä–æ–±–Ω–æ - –∫–∞–∂–¥–∞—è –º—ã—Å–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞

–ü–û–ú–ù–ò: —á–µ–º –±–æ–ª—å—à–µ "–≤–æ–¥—ã" –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤, —Ç–µ–º –Ω–∏–∂–µ —Ç–æ—à–Ω–æ—Ç–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å–ø–∞–º–∞ –∫–ª—é—á–µ–≤–∏–∫–æ–≤!

–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –ë–ï–ó markdown —Ä–∞–∑–º–µ—Ç–∫–∏, –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ ##, –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`;

    try {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI –∫–ª–∏–µ–Ω—Ç–∞
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-2.5-pro" });

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        let attempts = 0;
        const maxAttempts = 4;
        
        while (attempts < maxAttempts) {
            try {
                const result = await model.generateContent(articlePrompt);
                let rawContent = result.response.text();
                
                // –û—á–∏—Å—Ç–∫–∞ –æ—Ç AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                rawContent = aggressiveCleanAIComments(rawContent);
                rawContent = aggressiveCleanAIComments(rawContent); // –î–≤–æ–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–ø–∞–º–∞
                checkKeywordSpam(rawContent, keyword, threadId);
                
                return rawContent;
                
            } catch (apiError) {
                attempts++;
                console.log(`[!] [ALPHA-STRIKE #${threadId}] –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}. –ñ–¥—É ${5 * attempts}—Å...`);
                
                if (attempts < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 5000 * attempts));
                } else {
                    throw apiError;
                }
            }
        }
        
    } catch (error) {
        console.log(`Error:  Thread #${threadId}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ #${postNumber}: ${error.message}`);
        throw error;
    }
}

// ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–°–¢–ê =====
async function createPost(keyword, postNumber, threadId) {
    try {
        console.log(`[+] [ALPHA-STRIKE #${threadId}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: ${keyword}`);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const content = await generateUniquePost(keyword, postNumber, threadId);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ SEO —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const title = await createPerfectSEOTitle(keyword, postNumber, threadId);
        const description = await createPerfectSEODescription(keyword, postNumber, threadId);
        const heroImage = generateProperHeroImage(keyword, postNumber);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ –∞–Ω–∫–æ—Ä–∞–º–∏
        const contentWithLinks = generateIntelligentLinks(content, keyword, TARGET_URLS, postNumber);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ frontmatter –¥–ª—è Astro
        const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: "${new Date().toISOString()}"
author: "${BRAND_AUTHOR_NAME}"
tags: ["${keyword}", "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–°–ü–±", "BlondePlace"]
heroImage: "${heroImage}"
slug: "post${postNumber}"
---`;

        const fullContent = `${frontmatter}\n\n${contentWithLinks}`;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const fileName = `post${postNumber}.md`;
        const filePath = path.join('src', 'content', 'posts', fileName);
        
        await fs.writeFile(filePath, fullContent, 'utf8');
        
        console.log(`[DONE] Thread #${threadId}: –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${title}"`);
        console.log(`[SEO] Title: ${title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`[IMAGE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${heroImage}`);
        
        // IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const postUrl = `${SITE_URL}/blog/post${postNumber}/`;
        const indexNowResults = await sendIndexNow(postUrl);
        console.log(`[INDEXNOW] –¢—É—Ä–±–æ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: ${indexNowResults}/3 —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);
        
        console.log(`[ALPHA-STRIKE #${threadId}] [‚úî] –°—Ç–∞—Ç—å—è "${keyword}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.`);
        
        return {
            success: true,
            postNumber,
            keyword,
            title,
            url: postUrl
        };
        
    } catch (error) {
        console.log(`[!] [ALPHA-STRIKE #${threadId}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã "${keyword}": ${error.message}`);
        console.log(`[!] [ALPHA-STRIKE #${threadId}] –ü—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç–∞—Ç—å—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ä–∞–±–æ—Ç—É...`);
        
        return {
            success: false,
            postNumber,
            keyword,
            error: error.message
        };
    }
}

// ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´ =====
async function main() {
    const threadId = parseInt(process.env.THREAD_ID) || 1;
    const targetArticles = parseInt(process.env.TARGET_ARTICLES) || 10;
    
    console.log(`üéØ –≠–°–ö–ê–î–†–û–ù #${threadId}: –ù–∞—á–∏–Ω–∞—é Alpha-Strike –∞—Ç–∞–∫—É!`);
    console.log(`üìä –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: ${targetArticles}`);
    console.log(`ü§ñ –ú–æ–¥–µ–ª—å: gemini`);
    console.log(`üéØ SEO: PERFECT (Title: 40-45, Description: 150-164, Keywords: ‚úÖ)`);
    console.log(`üéØ –ù–£–ú–ï–†–ê–¶–ò–Ø: –ò–î–ï–ê–õ–¨–ù–ê–Ø (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞!)`);
    
    const geminiKey = process.env.GEMINI_API_KEY;
    if (!geminiKey) {
        console.log(`[ERROR] Thread #${threadId}: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return;
    }
    
    console.log(`[KEY] [ALPHA-STRIKE #${threadId}] –ú–æ–¥–µ–ª—å: gemini, –∫–ª—é—á: ...${geminiKey.slice(-4)}`);
    console.log(`[INIT] [ALPHA-STRIKE #${threadId}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v5.30-FINAL —Å –∫–ª—é—á–æ–º ...${geminiKey.slice(-4)}`);
    
    console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] === –ê–õ–¨–§–ê-–£–î–ê–† v5.30-FINAL - –ò–î–ï–ê–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê ===`);
    console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –¶–µ–ª—å: ${targetArticles} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π`);
    console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${ALPHA_KEYWORDS.length} —à—Ç`);
    console.log(`[ALPHA] [ALPHA-STRIKE #${threadId}] –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏: ${ALPHA_KEYWORDS.join(', ')}`);
    
    console.log(`[SEO] [ALPHA-STRIKE #${threadId}] SEO –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Title 40-45 —Å–∏–º–≤–æ–ª–æ–≤, Description 150-164 —Å–∏–º–≤–æ–ª–∞`);
    console.log(`[SEO] [ALPHA-STRIKE #${threadId}] –°–°–´–õ–ö–ò: Markdown —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ HTML —Ç–µ–≥–æ–≤!`);
    
    // –ò–î–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–£–ú–ï–†–ê–¶–ò–ò –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –§–û–†–ú–£–õ–û–ô
    const startNumber = getPerfectPostNumber(threadId, 0);
    console.log(`[PERFECT-NUMBERS] Thread #${threadId}: üéØ –ù–ê–ß–ò–ù–ê–Æ –° –ò–î–ï–ê–õ–¨–ù–û–ì–û –ù–û–ú–ï–†–ê: ${startNumber}`);
    
    const results = [];
    const keywordIndex = (threadId - 1) % ALPHA_KEYWORDS.length;
    
    for (let i = 0; i < targetArticles; i++) {
        const keyword = ALPHA_KEYWORDS[(keywordIndex + i) % ALPHA_KEYWORDS.length];
        const postNumber = getPerfectPostNumber(threadId, i);
        
        const result = await createPost(keyword, postNumber, threadId);
        results.push(result);
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`[COMPLETE] [ALPHA-STRIKE #${threadId}] === –ú–ò–°–°–ò–Ø v5.30-FINAL –ó–ê–í–ï–†–®–ï–ù–ê ===`);
    console.log(`[STATS] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${results.filter(r => r.success).length}`);
    console.log(`[STATS] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${results.filter(r => r.success).length * 100}`);
    console.log(`[STATS] –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: 500–º—Å`);
    console.log(`[STATS] –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${startNumber}-${startNumber + results.length - 1}`);
    
    console.log(`[ALPHA] ALPHA-STRIKE –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`[ALPHA] –ü–æ—Ç–æ–∫–æ–≤ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ: 20`);
    console.log(`[ALPHA] Target keywords: ${ALPHA_KEYWORDS.length} (${ALPHA_KEYWORDS.slice(0, 8).join(', ')})`);
    console.log(`[ALPHA] –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((results.filter(r => r.success).length / targetArticles) * 100)}%`);
    
    console.log(`[RESULTS] –°–°–´–õ–ö–ò –ù–ê –°–¢–ê–¢–¨–ò:`);
    results.filter(r => r.success).forEach((result, index) => {
        console.log(`[ARTICLE] –°—Ç–∞—Ç—å—è ${index + 1}: ${result.url}`);
    });
    
    console.log(`[INDEXNOW] –¢–£–†–ë–û-–ò–ù–î–ï–ö–°–ê–¶–ò–Ø:`);
    console.log(`[INDEXNOW] –ö–∞–∂–¥–∞—è —Å—Ç–∞—Ç—å—è —É–≤–µ–¥–æ–º–∏–ª–∞: Yandex, Bing, Google`);
    console.log(`[INDEXNOW] –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.filter(r => r.success).length * 3}`);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã

main().catch(console.error); 
