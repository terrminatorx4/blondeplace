// ===== SEO AUTOPILOT v1.0 - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø SEO –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø =====
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ CheckSite.ru –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
import fetch from 'node-fetch';
import { promises as fs } from 'fs';
import path from 'path';

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = 'terrminatorx4/blondeplace';
const SITE_URL = 'https://blondeplace.netlify.app';

class SEOAutopilot {
    constructor() {
        this.checkedArticles = [];
        this.seoIssues = [];
        this.fixedIssues = [];
        this.targetScore = 95; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π CheckSite.ru score
    }

    // ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø SEO AUTOPILOT =====
    async runSEOAutopilot() {
        console.log('üéØ SEO AUTOPILOT v1.0: –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
        
        try {
            // 1. –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞)
            const newArticles = await this.findNewArticles();
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ CheckSite.ru
            for (const article of newArticles) {
                await this.checkArticleSEO(article);
                await this.sleep(5000); // 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            }
            
            // 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ SEO –ø—Ä–æ–±–ª–µ–º—ã
            await this.fixSEOIssues();
            
            console.log(`‚úÖ SEO AUTOPILOT: –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${newArticles.length} —Å—Ç–∞—Ç–µ–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${this.fixedIssues.length} –ø—Ä–æ–±–ª–µ–º`);
            
        } catch (error) {
            console.error('‚ùå SEO AUTOPILOT ERROR:', error.message);
        }
    }

    // ===== –ü–û–ò–°–ö –ù–û–í–´–• –°–¢–ê–¢–ï–ô =====
    async findNewArticles() {
        console.log('üìÑ –ò—â—É –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ commits –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();
            
            const response = await fetch(`https://api.github.com/repos/${REPO}/commits?since=${twoHoursAgo}&per_page=50`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'SEO-Autopilot-Bot'
                }
            });
            
            const commits = await response.json();
            const newArticles = [];
            
            for (const commit of commits) {
                // –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–º–∏—Ç–µ
                const commitResponse = await fetch(commit.url, {
                    headers: {
                        'Authorization': `token ${GITHUB_TOKEN}`,
                        'User-Agent': 'SEO-Autopilot-Bot'
                    }
                });
                
                const commitData = await commitResponse.json();
                
                // –ò—â–µ–º –Ω–æ–≤—ã–µ .md —Ñ–∞–π–ª—ã –≤ src/content/posts/
                for (const file of commitData.files || []) {
                    if (file.filename.startsWith('src/content/posts/post') && 
                        file.filename.endsWith('.md') && 
                        file.status === 'added') {
                        
                        const postNumber = file.filename.match(/post(\d+)\.md/)?.[1];
                        if (postNumber) {
                            newArticles.push({
                                filename: file.filename,
                                postNumber: postNumber,
                                url: `${SITE_URL}/blog/post${postNumber}/`,
                                commitSha: commit.sha
                            });
                        }
                    }
                }
            }
            
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${newArticles.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
            return newArticles;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π:', error.message);
            return [];
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–¨–ò –ù–ê CHECKSITE.RU =====
    async checkArticleSEO(article) {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é SEO –¥–ª—è —Å—Ç–∞—Ç—å–∏: ${article.url}`);
        
        try {
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É CheckSite.ru
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ CheckSite.ru API –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥
            const seoData = await this.simulateCheckSiteAnalysis(article);
            
            console.log(`üìä SEO –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç—å–∏ ${article.postNumber}: ${seoData.totalScore}%`);
            
            // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (seoData.totalScore < this.targetScore) {
                console.log(`‚ö†Ô∏è –°—Ç–∞—Ç—å—è ${article.postNumber} —Ç—Ä–µ–±—É–µ—Ç SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (${seoData.totalScore}% < ${this.targetScore}%)`);
                
                this.seoIssues.push({
                    article: article,
                    issues: seoData.issues,
                    currentScore: seoData.totalScore
                });
            } else {
                console.log(`‚úÖ –°—Ç–∞—Ç—å—è ${article.postNumber} –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é SEO –æ—Ü–µ–Ω–∫—É: ${seoData.totalScore}%`);
            }
            
            this.checkedArticles.push(article);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SEO –¥–ª—è ${article.url}:`, error.message);
        }
    }

    // ===== –°–ò–ú–£–õ–Ø–¶–ò–Ø CHECKSITE.RU –ê–ù–ê–õ–ò–ó–ê =====
    async simulateCheckSiteAnalysis(article) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
        const articleContent = await this.getArticleContent(article);
        
        const issues = [];
        let totalScore = 100;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º title
        const titleMatch = articleContent.match(/title:\s*"([^"]+)"/);
        const title = titleMatch?.[1] || '';
        
        if (title.length < 40 || title.length > 45) {
            issues.push({
                type: 'title_length',
                description: `Title –¥–ª–∏–Ω–∞ ${title.length} —Å–∏–º–≤–æ–ª–æ–≤ (–Ω—É–∂–Ω–æ 40-45)`,
                severity: 'high',
                fix: 'adjust_title_length'
            });
            totalScore -= 10;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º description
        const descMatch = articleContent.match(/description:\s*"([^"]+)"/);
        const description = descMatch?.[1] || '';
        
        if (description.length < 150 || description.length > 164) {
            issues.push({
                type: 'description_length',
                description: `Description –¥–ª–∏–Ω–∞ ${description.length} —Å–∏–º–≤–æ–ª–æ–≤ (–Ω—É–∂–Ω–æ 150-164)`,
                severity: 'high',
                fix: 'adjust_description_length'
            });
            totalScore -= 10;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º keywords
        if (!articleContent.includes('keywords:')) {
            issues.push({
                type: 'missing_keywords',
                description: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç keywords',
                severity: 'medium',
                fix: 'add_keywords'
            });
            totalScore -= 5;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—à–Ω–æ—Ç—É (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
        const wordCount = articleContent.split(/\s+/).length;
        const blondePlaceCount = (articleContent.match(/BlondePlace/g) || []).length;
        const nausea = (blondePlaceCount / wordCount) * 100;
        
        if (nausea > 5) {
            issues.push({
                type: 'high_nausea',
                description: `–¢–æ—à–Ω–æ—Ç–∞ ${nausea.toFixed(2)}% (–Ω–æ—Ä–º–∞ <5%)`,
                severity: 'medium',
                fix: 'reduce_nausea'
            });
            totalScore -= 8;
        }
        
        return {
            totalScore: Math.max(totalScore, 0),
            issues: issues
        };
    }

    // ===== –ü–û–õ–£–ß–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–ú–û–ì–û –°–¢–ê–¢–¨–ò =====
    async getArticleContent(article) {
        try {
            const response = await fetch(`https://api.github.com/repos/${REPO}/contents/${article.filename}`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'SEO-Autopilot-Bot'
                }
            });
            
            const fileData = await response.json();
            const content = Buffer.from(fileData.content, 'base64').toString('utf8');
            
            return content;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ${article.filename}:`, error.message);
            return '';
        }
    }

    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SEO –ü–†–û–ë–õ–ï–ú =====
    async fixSEOIssues() {
        console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é SEO –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è ${this.seoIssues.length} —Å—Ç–∞—Ç–µ–π...`);
        
        for (const articleIssue of this.seoIssues) {
            console.log(`üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è—é —Å—Ç–∞—Ç—å—é ${articleIssue.article.postNumber}...`);
            
            try {
                let content = await this.getArticleContent(articleIssue.article);
                let wasFixed = false;
                
                for (const issue of articleIssue.issues) {
                    console.log(`  üîß –ò—Å–ø—Ä–∞–≤–ª—è—é: ${issue.description}`);
                    
                    const fixedContent = await this.applySpecificSEOFix(content, issue);
                    if (fixedContent !== content) {
                        content = fixedContent;
                        wasFixed = true;
                        console.log(`  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${issue.description}`);
                    }
                }
                
                // –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                if (wasFixed) {
                    await this.saveFixedArticle(articleIssue.article, content);
                    this.fixedIssues.push(articleIssue);
                    console.log(`‚úÖ –°—Ç–∞—Ç—å—è ${articleIssue.article.postNumber} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏ ${articleIssue.article.postNumber}:`, error.message);
            }
        }
    }

    // ===== –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–û–ù–ö–†–ï–¢–ù–û–ì–û SEO –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø =====
    async applySpecificSEOFix(content, issue) {
        switch (issue.fix) {
            case 'adjust_title_length':
                return this.fixTitleLength(content);
                
            case 'adjust_description_length':
                return this.fixDescriptionLength(content);
                
            case 'add_keywords':
                return this.addKeywords(content);
                
            case 'reduce_nausea':
                return this.reduceNausea(content);
                
            default:
                console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${issue.fix}`);
                return content;
        }
    }

    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–ò–ù–´ TITLE =====
    fixTitleLength(content) {
        const titleMatch = content.match(/title:\s*"([^"]+)"/);
        if (!titleMatch) return content;
        
        let title = titleMatch[1];
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –¥–æ–±–∞–≤–ª—è–µ–º
        if (title.length < 40) {
            title = title + ' - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã';
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ–±—Ä–µ–∑–∞–µ–º
        if (title.length > 45) {
            title = title.substring(0, 42) + '...';
        }
        
        return content.replace(/title:\s*"[^"]+"/, `title: "${title}"`);
    }

    // ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–ò–ù–´ DESCRIPTION =====
    fixDescriptionLength(content) {
        const descMatch = content.match(/description:\s*"([^"]+)"/);
        if (!descMatch) return content;
        
        let description = descMatch[1];
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - —Ä–∞—Å—à–∏—Ä—è–µ–º
        if (description.length < 150) {
            description = description + ' –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BlondePlace. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.';
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π - –æ–±—Ä–µ–∑–∞–µ–º
        if (description.length > 164) {
            description = description.substring(0, 161) + '...';
        }
        
        return content.replace(/description:\s*"[^"]+"/, `description: "${description}"`);
    }

    // ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï KEYWORDS =====
    addKeywords(content) {
        const titleMatch = content.match(/title:\s*"([^"]+)"/);
        const title = titleMatch?.[1] || '';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ title
        const keywords = ['BlondePlace', '—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '—ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã'];
        
        // –î–æ–±–∞–≤–ª—è–µ–º keywords –ø–æ—Å–ª–µ description
        const keywordsLine = `keywords: "${keywords.join(', ')}"`;
        
        return content.replace(
            /(description:\s*"[^"]+"\n)/,
            `$1${keywordsLine}\n`
        );
    }

    // ===== –°–ù–ò–ñ–ï–ù–ò–ï –¢–û–®–ù–û–¢–´ =====
    reduceNausea(content) {
        // –ó–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–π BlondePlace —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        const synonyms = ['–Ω–∞—à —Å–∞–ª–æ–Ω', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', '—ç–∫—Å–ø–µ—Ä—Ç—ã', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã', '–º–∞—Å—Ç–µ—Ä–∞'];
        
        let updatedContent = content;
        let blondePlaceCount = 0;
        
        updatedContent = updatedContent.replace(/BlondePlace/g, (match, offset) => {
            blondePlaceCount++;
            
            // –ö–∞–∂–¥–æ–µ —Ç—Ä–µ—Ç—å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–º–µ–Ω—è–µ–º —Å–∏–Ω–æ–Ω–∏–º–æ–º
            if (blondePlaceCount % 3 === 0) {
                return synonyms[Math.floor(Math.random() * synonyms.length)];
            }
            
            return match;
        });
        
        return updatedContent;
    }

    // ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–¢–ê–¢–¨–ò =====
    async saveFixedArticle(article, content) {
        try {
            const encodedContent = Buffer.from(content).toString('base64');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞
            const fileResponse = await fetch(`https://api.github.com/repos/${REPO}/contents/${article.filename}`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'SEO-Autopilot-Bot'
                }
            });
            
            const fileData = await fileResponse.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
            await fetch(`https://api.github.com/repos/${REPO}/contents/${article.filename}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'SEO-Autopilot-Bot',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    message: `üéØ SEO AUTO-FIX: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ post${article.postNumber} –¥–ª—è CheckSite.ru 95%+`,
                    content: encodedContent,
                    sha: fileData.sha
                })
            });
            
            console.log(`‚úÖ –°—Ç–∞—Ç—å—è ${article.filename} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ GitHub`);
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ${article.filename}:`, error.message);
        }
    }

    // ===== SLEEP –§–£–ù–ö–¶–ò–Ø =====
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// ===== –ó–ê–ü–£–°–ö SEO AUTOPILOT =====
if (import.meta.url === `file://${process.argv[1]}`) {
    const seoAutopilot = new SEOAutopilot();
    seoAutopilot.runSEOAutopilot();
}

export default SEOAutopilot; 