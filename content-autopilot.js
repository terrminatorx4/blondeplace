// ===== CONTENT AUTOPILOT v1.0 - –£–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ù–¢–ï–ù–¢–ê =====
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–≥–¥–∞ –∏ —Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¢–û–ü-1
import fetch from 'node-fetch';
import { promises as fs } from 'fs';

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = 'terrminatorx4/blondeplace';
const DAILY_LIMIT = 100; // –ú–∞–∫—Å–∏–º—É–º —Å—Ç–∞—Ç–µ–π –≤ –¥–µ–Ω—å

class ContentAutopilot {
    constructor() {
        this.positionData = null;
        this.contentPlan = {};
        this.generationQueue = [];
        this.todayGenerated = 0;
    }

    // ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø CONTENT AUTOPILOT =====
    async runContentAutopilot() {
        console.log('üöÄ CONTENT AUTOPILOT v1.0: –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        try {
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
            await this.loadPositionData();
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è
            await this.checkTodayGeneration();
            
            // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            const contentNeed = await this.analyzeContentNeed();
            
            // 4. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–ª–∞–Ω–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            if (contentNeed.needContent) {
                await this.planContentGeneration(contentNeed);
                
                // 5. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                await this.executeContentGeneration();
            } else {
                console.log('‚è∏Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–µ–Ω - –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã');
            }
            
            console.log('‚úÖ CONTENT AUTOPILOT: –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω');
            
        } catch (error) {
            console.error('‚ùå CONTENT AUTOPILOT ERROR:', error.message);
        }
    }

    // ===== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –û –ü–û–ó–ò–¶–ò–Ø–• =====
    async loadPositionData() {
        try {
            const data = await fs.readFile('position_dashboard.json', 'utf8');
            this.positionData = JSON.parse(data);
            
            console.log('üìä –î–∞–Ω–Ω—ã–µ –æ –ø–æ–∑–∏—Ü–∏—è—Ö –∑–∞–≥—Ä—É–∂–µ–Ω—ã:');
            console.log(`   üéØ –°—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${this.positionData.summary.avg_position_main}`);
            console.log(`   üèÜ –ö–ª—é—á–µ–π –≤ –¢–û–ü-1: ${this.positionData.summary.keywords_in_top1}/8`);
            console.log(`   üîü –ö–ª—é—á–µ–π –≤ –¢–û–ü-10: ${this.positionData.summary.keywords_in_top10}/8`);
            
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            this.positionData = {
                summary: {
                    avg_position_main: 50,
                    keywords_in_top1: 0,
                    keywords_in_top10: 1,
                    need_content: true,
                    suggested_articles: 40
                }
            };
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –°–ö–û–õ–¨–ö–û –°–¢–ê–¢–ï–ô –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û –°–ï–ì–û–î–ù–Ø =====
    async checkTodayGeneration() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º commits –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç Alpha-Strike
            const today = new Date().toISOString().split('T')[0];
            
            const response = await fetch(`https://api.github.com/repos/${REPO}/commits?since=${today}T00:00:00Z&per_page=100`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'Content-Autopilot-Bot'
                }
            });
            
            const commits = await response.json();
            
            // –°—á–∏—Ç–∞–µ–º commits –æ—Ç Alpha-Strike
            let alphaStrikeCommits = 0;
            for (const commit of commits) {
                if (commit.commit.message.includes('Alpha-Strike') || 
                    commit.commit.message.includes('AUTOPILOT')) {
                    alphaStrikeCommits++;
                }
            }
            
            // –ü—Ä–∏–º–µ—Ä–Ω–æ 1 commit = 20 —Å—Ç–∞—Ç–µ–π (20 –ø–æ—Ç–æ–∫–æ–≤)
            this.todayGenerated = alphaStrikeCommits * 20;
            
            console.log(`üìä –°–µ–≥–æ–¥–Ω—è —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${this.todayGenerated} —Å—Ç–∞—Ç–µ–π`);
            console.log(`üìà –û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞: ${DAILY_LIMIT - this.todayGenerated}`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
            this.todayGenerated = 0;
        }
    }

    // ===== –ê–ù–ê–õ–ò–ó –ü–û–¢–†–ï–ë–ù–û–°–¢–ò –í –ö–û–ù–¢–ï–ù–¢–ï =====
    async analyzeContentNeed() {
        console.log('üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ...');
        
        const summary = this.positionData.summary;
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const criteria = {
            // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —Ö—É–∂–µ 20 - –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            avgPositionBad: parseFloat(summary.avg_position_main) > 20,
            
            // –ï—Å–ª–∏ –≤ –¢–û–ü-1 –º–µ–Ω–µ–µ 3 –∫–ª—é—á–µ–π - –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç
            fewInTop1: summary.keywords_in_top1 < 3,
            
            // –ï—Å–ª–∏ –≤ –¢–û–ü-10 –º–µ–Ω–µ–µ 6 –∫–ª—é—á–µ–π - –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç  
            fewInTop10: summary.keywords_in_top10 < 6,
            
            // –ü—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∏–∑ Position Tracker
            directNeed: summary.need_content,
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            withinDailyLimit: this.todayGenerated < DAILY_LIMIT
        };

        console.log('üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ:');
        console.log(`   üéØ –ü–ª–æ—Ö–∞—è —Å—Ä–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è (>${20}): ${criteria.avgPositionBad ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üèÜ –ú–∞–ª–æ –≤ –¢–û–ü-1 (<3): ${criteria.fewInTop1 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üîü –ú–∞–ª–æ –≤ –¢–û–ü-10 (<6): ${criteria.fewInTop10 ? '‚úÖ' : '‚ùå'}`);
        console.log(`   üìä –ü—Ä—è–º–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${criteria.directNeed ? '‚úÖ' : '‚ùå'}`);
        console.log(`   ‚öñÔ∏è –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞: ${criteria.withinDailyLimit ? '‚úÖ' : '‚ùå'}`);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ—Å—Ç—å –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
        const needContent = (criteria.avgPositionBad || criteria.fewInTop1 || 
                           criteria.fewInTop10 || criteria.directNeed) && 
                           criteria.withinDailyLimit;

        let aggressiveness = 'low';
        let suggestedArticles = 20;

        if (needContent) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            if (criteria.avgPositionBad && criteria.fewInTop1) {
                aggressiveness = 'high';
                suggestedArticles = Math.min(80, DAILY_LIMIT - this.todayGenerated);
            } else if (criteria.fewInTop10 || criteria.directNeed) {
                aggressiveness = 'medium';
                suggestedArticles = Math.min(40, DAILY_LIMIT - this.todayGenerated);
            } else {
                aggressiveness = 'low';
                suggestedArticles = Math.min(20, DAILY_LIMIT - this.todayGenerated);
            }
        }

        console.log(`üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:`);
        console.log(`   –ù—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: ${needContent ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
        console.log(`   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: ${aggressiveness}`);
        console.log(`   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${suggestedArticles} —Å—Ç–∞—Ç–µ–π`);

        return {
            needContent,
            aggressiveness,
            suggestedArticles,
            criteria,
            remainingLimit: DAILY_LIMIT - this.todayGenerated
        };
    }

    // ===== –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê =====
    async planContentGeneration(contentNeed) {
        console.log('üìù –ü–ª–∞–Ω–∏—Ä—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        const { suggestedArticles, aggressiveness } = contentNeed;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        let threads, articlesPerThread;
        
        switch (aggressiveness) {
            case 'high':
                threads = 20;
                articlesPerThread = Math.ceil(suggestedArticles / threads);
                break;
            case 'medium':
                threads = 15;
                articlesPerThread = Math.ceil(suggestedArticles / threads);
                break;
            case 'low':
                threads = 10;
                articlesPerThread = Math.ceil(suggestedArticles / threads);
                break;
        }

        this.contentPlan = {
            totalArticles: suggestedArticles,
            threads: threads,
            articlesPerThread: articlesPerThread,
            aggressiveness: aggressiveness,
            model: 'gemini', // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            timestamp: new Date().toISOString()
        };

        console.log('üìã –ü–õ–ê–ù –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê:');
        console.log(`   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π: ${this.contentPlan.totalArticles}`);
        console.log(`   üßµ –ü–æ—Ç–æ–∫–æ–≤: ${this.contentPlan.threads}`);
        console.log(`   üìÑ –°—Ç–∞—Ç–µ–π –Ω–∞ –ø–æ—Ç–æ–∫: ${this.contentPlan.articlesPerThread}`);
        console.log(`   üéØ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å: ${this.contentPlan.aggressiveness}`);
        console.log(`   ü§ñ –ú–æ–¥–µ–ª—å: ${this.contentPlan.model}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await fs.writeFile('content_plan.json', JSON.stringify(this.contentPlan, null, 2));
    }

    // ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê =====
    async executeContentGeneration() {
        console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        if (!this.contentPlan.totalArticles) {
            console.log('‚è∏Ô∏è –ù–µ—Ç –ø–ª–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            return;
        }

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º Alpha-Strike workflow —á–µ—Ä–µ–∑ GitHub API
            const workflowResponse = await fetch(`https://api.github.com/repos/${REPO}/actions/workflows/alpha-strike.yml/dispatches`, {
                method: 'POST',
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'Content-Autopilot-Bot',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ref: 'main',
                    inputs: {
                        target_articles: this.contentPlan.totalArticles.toString(),
                        threads: this.contentPlan.threads.toString(),
                        model_choice: this.contentPlan.model
                    }
                })
            });

            if (workflowResponse.ok) {
                console.log('‚úÖ Alpha-Strike workflow –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                console.log(`üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${this.contentPlan.totalArticles} —Å—Ç–∞—Ç–µ–π, ${this.contentPlan.threads} –ø–æ—Ç–æ–∫–æ–≤`);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
                const executionLog = {
                    timestamp: new Date().toISOString(),
                    plan: this.contentPlan,
                    status: 'launched',
                    workflow_status: 'running'
                };
                
                await fs.writeFile('autopilot_execution.json', JSON.stringify(executionLog, null, 2));
                
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Alpha-Strike workflow');
                console.error(`Status: ${workflowResponse.status}`);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
        }
    }

    // ===== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø =====
    async checkExecutionStatus() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ workflow runs
            const response = await fetch(`https://api.github.com/repos/${REPO}/actions/runs?per_page=5`, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'User-Agent': 'Content-Autopilot-Bot'
                }
            });
            
            const data = await response.json();
            
            // –ò—â–µ–º –Ω–∞—à–∏ Alpha-Strike runs
            for (const run of data.workflow_runs) {
                if (run.name.includes('ALPHA-STRIKE') && 
                    run.status === 'completed' && 
                    run.conclusion === 'success') {
                    
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π Alpha-Strike run: ${run.id}`);
                    return 'success';
                }
            }
            
            return 'running';
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
            return 'unknown';
        }
    }

    // ===== –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–Å–¢–ê AUTOPILOT =====
    async generateAutopilotReport() {
        const report = {
            timestamp: new Date().toISOString(),
            status: 'active',
            today_generated: this.todayGenerated,
            daily_limit: DAILY_LIMIT,
            remaining_limit: DAILY_LIMIT - this.todayGenerated,
            content_plan: this.contentPlan,
            position_data: this.positionData?.summary || null,
            next_check: new Date(Date.now() + 30 * 60 * 1000).toISOString() // —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
        };

        await fs.writeFile('content_autopilot_status.json', JSON.stringify(report, null, 2));
        console.log('üìä –û—Ç—á—ë—Ç Content Autopilot —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    }
}

// ===== –ó–ê–ü–£–°–ö CONTENT AUTOPILOT =====
if (import.meta.url === `file://${process.argv[1]}`) {
    const contentAutopilot = new ContentAutopilot();
    contentAutopilot.runContentAutopilot();
}

export default ContentAutopilot; 