#!/usr/bin/env python3
"""
–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫–∫–µ—Ä –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–æ–≤ Outlook
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
"""

import asyncio
import aiohttp
import json
import time
import random
import logging
from typing import List, Dict, Optional, Tuple, AsyncGenerator
from dataclasses import dataclass, asdict
from pathlib import Path
import argparse
from urllib.parse import urlparse, parse_qs
import re
from concurrent.futures import ThreadPoolExecutor
import ssl
import certifi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('outlook_checker.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class CookieAccount:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞"""
    email: str
    cookies: str
    proxy: Optional[str] = None
    user_agent: Optional[str] = None
    status: str = "unknown"
    last_check: Optional[str] = None
    response_time: Optional[float] = None
    error_message: Optional[str] = None

@dataclass
class CheckerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ–∫–∫–µ—Ä–∞"""
    max_concurrent: int = 50
    timeout: int = 30
    retry_attempts: int = 3
    delay_between_requests: float = 0.1
    use_proxies: bool = False
    rotate_user_agents: bool = True
    save_results: bool = True
    output_format: str = "json"  # json, csv, txt

class UserAgentRotator:
    """–†–æ—Ç–∞—Ü–∏—è User-Agent –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"""
    
    def __init__(self):
        self.agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        ]
    
    def get_random_agent(self) -> str:
        return random.choice(self.agents)

class ProxyManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
    
    def __init__(self, proxy_file: Optional[str] = None):
        self.proxies = []
        if proxy_file and Path(proxy_file).exists():
            self.load_proxies(proxy_file)
    
    def load_proxies(self, proxy_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(proxy_file, 'r') as f:
                for line in f:
                    proxy = line.strip()
                    if proxy and not proxy.startswith('#'):
                        self.proxies.append(proxy)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
    
    def get_random_proxy(self) -> Optional[str]:
        return random.choice(self.proxies) if self.proxies else None

class OutlookCookieChecker:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–∫–æ–≤ Outlook"""
    
    def __init__(self, config: CheckerConfig):
        self.config = config
        self.user_agent_rotator = UserAgentRotator()
        self.proxy_manager = ProxyManager()
        self.session = None
        self.results = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.check_endpoints = [
            "https://outlook.live.com/mail/0/inbox",
            "https://outlook.office365.com/mail/inbox",
            "https://outlook.office.com/mail/",
            "https://login.microsoftonline.com/common/oauth2/authorize"
        ]
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_headers = {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
            "Accept-Language": "en-US,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Cache-Control": "max-age=0"
        }

    async def create_session(self) -> aiohttp.ClientSession:
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        connector = aiohttp.TCPConnector(
            limit=self.config.max_concurrent * 2,
            limit_per_host=50,
            ttl_dns_cache=300,
            use_dns_cache=True,
            ssl=ssl.create_default_context(cafile=certifi.where())
        )
        
        timeout = aiohttp.ClientTimeout(total=self.config.timeout)
        
        return aiohttp.ClientSession(
            connector=connector,
            timeout=timeout,
            headers=self.default_headers
        )

    async def check_cookie_validity(self, account: CookieAccount) -> CookieAccount:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—É–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        start_time = time.time()
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            headers = self.default_headers.copy()
            if self.config.rotate_user_agents:
                headers["User-Agent"] = self.user_agent_rotator.get_random_agent()
            if account.user_agent:
                headers["User-Agent"] = account.user_agent
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏
            proxy = None
            if self.config.use_proxies:
                proxy = account.proxy or self.proxy_manager.get_random_proxy()
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫—É–∫–æ–≤
            cookie_dict = self.parse_cookies(account.cookies)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
            for endpoint in self.check_endpoints:
                try:
                    async with self.session.get(
                        endpoint,
                        headers=headers,
                        cookies=cookie_dict,
                        proxy=proxy,
                        allow_redirects=True
                    ) as response:
                        
                        account.response_time = time.time() - start_time
                        
                        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
                        status = await self.analyze_response(response, endpoint)
                        if status == "valid":
                            account.status = "valid"
                            account.last_check = time.strftime("%Y-%m-%d %H:%M:%S")
                            logger.info(f"‚úÖ {account.email} - –∫—É–∫–∏ –≤–∞–ª–∏–¥–Ω—ã")
                            return account
                        elif status == "expired":
                            account.status = "expired"
                            account.error_message = "–ö—É–∫–∏ –∏—Å—Ç–µ–∫–ª–∏"
                            logger.warning(f"‚ö†Ô∏è {account.email} - –∫—É–∫–∏ –∏—Å—Ç–µ–∫–ª–∏")
                            return account
                            
                except asyncio.TimeoutError:
                    continue
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ {endpoint}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            account.status = "invalid"
            account.error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"
            logger.error(f"‚ùå {account.email} - –∫—É–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã")
            
        except Exception as e:
            account.status = "error"
            account.error_message = str(e)
            account.response_time = time.time() - start_time
            logger.error(f"üí• {account.email} - –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        account.last_check = time.strftime("%Y-%m-%d %H:%M:%S")
        return account

    def parse_cookies(self, cookie_string: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –∫—É–∫–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        cookies = {}
        try:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            if ';' in cookie_string:
                # –§–æ—Ä–º–∞—Ç: name1=value1; name2=value2
                for cookie in cookie_string.split(';'):
                    if '=' in cookie:
                        name, value = cookie.strip().split('=', 1)
                        cookies[name] = value
            elif '\n' in cookie_string:
                # –§–æ—Ä–º–∞—Ç: –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
                for line in cookie_string.split('\n'):
                    if '=' in line and not line.strip().startswith('#'):
                        name, value = line.strip().split('=', 1)
                        cookies[name] = value
            else:
                # JSON —Ñ–æ—Ä–º–∞—Ç
                cookies = json.loads(cookie_string)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—É–∫–æ–≤: {e}")
        
        return cookies

    async def analyze_response(self, response: aiohttp.ClientResponse, endpoint: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫—É–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
            if response.status == 200:
                text = await response.text()
                
                # –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
                valid_indicators = [
                    '"IsAuthenticated":true',
                    '"isSignedIn":true',
                    'data-user-principalname',
                    'o365header',
                    '"userPrincipalName"',
                    'owa-application',
                    '"authenticatedUser"'
                ]
                
                # –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏—Å—Ç–µ–∫—à–µ–π —Å–µ—Å—Å–∏–∏
                expired_indicators = [
                    'login.microsoftonline.com',
                    'Sign in to your account',
                    '"IsAuthenticated":false',
                    '"isSignedIn":false',
                    'redirectUrl',
                    'SessionExpired',
                    'Your session has expired'
                ]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
                for indicator in valid_indicators:
                    if indicator.lower() in text.lower():
                        return "valid"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                for indicator in expired_indicators:
                    if indicator.lower() in text.lower():
                        return "expired"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
                if 'login' in str(response.url).lower():
                    return "expired"
                    
            elif response.status in [302, 301, 307, 308]:
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
                location = response.headers.get('Location', '')
                if 'login' in location.lower():
                    return "expired"
                    
            elif response.status in [401, 403]:
                return "expired"
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        
        return "unknown"

    async def check_accounts_batch(self, accounts: List[CookieAccount]) -> List[CookieAccount]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        semaphore = asyncio.Semaphore(self.config.max_concurrent)
        
        async def check_with_semaphore(account: CookieAccount) -> CookieAccount:
            async with semaphore:
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if self.config.delay_between_requests > 0:
                    await asyncio.sleep(self.config.delay_between_requests)
                
                # –ü–æ–ø—ã—Ç–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏
                for attempt in range(self.config.retry_attempts):
                    result = await self.check_cookie_validity(account)
                    if result.status != "error":
                        return result
                    
                    if attempt < self.config.retry_attempts - 1:
                        await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                return result
        
        tasks = [check_with_semaphore(account) for account in accounts]
        return await asyncio.gather(*tasks, return_exceptions=False)

    def load_accounts_from_file(self, file_path: str) -> List[CookieAccount]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        accounts = []
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                if file_path.endswith('.json'):
                    data = json.load(f)
                    for item in data:
                        accounts.append(CookieAccount(**item))
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: email:cookies –∏–ª–∏ email|cookies
                    for line_num, line in enumerate(f, 1):
                        line = line.strip()
                        if not line or line.startswith('#'):
                            continue
                        
                        try:
                            if ':' in line:
                                email, cookies = line.split(':', 1)
                            elif '|' in line:
                                email, cookies = line.split('|', 1)
                            else:
                                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ {line_num}: {line}")
                                continue
                            
                            accounts.append(CookieAccount(
                                email=email.strip(),
                                cookies=cookies.strip()
                            ))
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {line_num}: {e}")
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return accounts

    def save_results(self, accounts: List[CookieAccount], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            if self.config.output_format == "json":
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump([asdict(account) for account in accounts], f, 
                            ensure_ascii=False, indent=2)
            
            elif self.config.output_format == "csv":
                import csv
                with open(output_file, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=asdict(accounts[0]).keys())
                    writer.writeheader()
                    for account in accounts:
                        writer.writerow(asdict(account))
            
            elif self.config.output_format == "txt":
                with open(output_file, 'w', encoding='utf-8') as f:
                    for account in accounts:
                        f.write(f"{account.email}:{account.status}\n")
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    def print_statistics(self, accounts: List[CookieAccount]):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        total = len(accounts)
        valid = sum(1 for acc in accounts if acc.status == "valid")
        expired = sum(1 for acc in accounts if acc.status == "expired")
        invalid = sum(1 for acc in accounts if acc.status == "invalid")
        errors = sum(1 for acc in accounts if acc.status == "error")
        
        avg_response_time = sum(acc.response_time or 0 for acc in accounts) / total
        
        print("\n" + "="*50)
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ï–†–ö–ò")
        print("="*50)
        print(f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total}")
        print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {valid} ({valid/total*100:.1f}%)")
        print(f"‚ö†Ô∏è –ò—Å—Ç–µ–∫—à–∏—Ö: {expired} ({expired/total*100:.1f}%)")
        print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid} ({invalid/total*100:.1f}%)")
        print(f"üí• –û—à–∏–±–æ–∫: {errors} ({errors/total*100:.1f}%)")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f}—Å")
        print("="*50)

    async def run_checker(self, input_file: str, output_file: Optional[str] = None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —á–µ–∫–∫–µ—Ä–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —á–µ–∫–∫–µ—Ä–∞ –∫—É–∫–æ–≤ Outlook")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = self.load_accounts_from_file(input_file)
        if not accounts:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        self.session = await self.create_session()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            start_time = time.time()
            checked_accounts = await self.check_accounts_batch(accounts)
            end_time = time.time()
            
            logger.info(f"‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.print_statistics(checked_accounts)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.config.save_results and output_file:
                self.save_results(checked_accounts, output_file)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã—Ö
                valid_accounts = [acc for acc in checked_accounts if acc.status == "valid"]
                if valid_accounts:
                    valid_file = output_file.replace('.', '_valid.')
                    self.save_results(valid_accounts, valid_file)
            
            return checked_accounts
            
        finally:
            await self.session.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    parser = argparse.ArgumentParser(description="–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫–∫–µ—Ä –∫—É–∫–æ–≤ Outlook")
    
    parser.add_argument("input_file", help="–§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (email:cookies)")
    parser.add_argument("-o", "--output", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("-c", "--concurrent", type=int, default=50, help="–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    parser.add_argument("-t", "--timeout", type=int, default=30, help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    parser.add_argument("-r", "--retries", type=int, default=3, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    parser.add_argument("-d", "--delay", type=float, default=0.1, help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    parser.add_argument("--proxy-file", help="–§–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏")
    parser.add_argument("--format", choices=["json", "csv", "txt"], default="json", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞")
    parser.add_argument("--no-ua-rotation", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏—é User-Agent")
    parser.add_argument("-v", "--verbose", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    
    args = parser.parse_args()
    
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = CheckerConfig(
        max_concurrent=args.concurrent,
        timeout=args.timeout,
        retry_attempts=args.retries,
        delay_between_requests=args.delay,
        use_proxies=bool(args.proxy_file),
        rotate_user_agents=not args.no_ua_rotation,
        save_results=bool(args.output),
        output_format=args.format
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∫–µ—Ä–∞
    checker = OutlookCookieChecker(config)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if args.proxy_file:
        checker.proxy_manager.load_proxies(args.proxy_file)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
    output_file = args.output or f"results_{int(time.time())}.{args.format}"
    
    try:
        asyncio.run(checker.run_checker(args.input_file, output_file))
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()