// –§–∞–π–ª: alpha-factory.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –°–ò–ù–¢–ê–ö–°–ò–ß–ï–°–ö–ò–• –û–®–ò–ë–û–ö)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –û–ü–ï–†–ê–¶–ò–ò ---
const TARGET_URL_MAIN = "https://blondeplace.ru";
const TOPICS_FILE = 'topics.txt';
const POSTS_DIR = 'src/content/posts';

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-pro";

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô (–£–ü–†–û–©–ï–ù–ù–ê–Ø –ö–ê–ö –í FACTORY.JS) ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;
const GEMINI_API_KEY_CURRENT = process.env.GEMINI_API_KEY_CURRENT;
const OPENROUTER_API_KEY_CURRENT = process.env.OPENROUTER_API_KEY_CURRENT;

let apiKey;
if (modelChoice === 'deepseek') {
    apiKey = OPENROUTER_API_KEY_CURRENT;
} else {
    apiKey = GEMINI_API_KEY_CURRENT;
}

if (!apiKey) {
    throw new Error(`[–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á!`);
}

console.log(`[üîë] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ú–æ–¥–µ–ª—å: ${modelChoice}, –∫–ª—é—á: ...${apiKey.slice(-4)}`);

const targetArticles = parseInt(process.env.ALPHA_ARTICLES, 10) || 30;

console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v4.0 —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
console.log(`üéØ [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π —Å 85+ —Å—Å—ã–ª–∫–∞–º–∏ –∫–∞–∂–¥–∞—è`);

// --- –ü–†–û–°–¢–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê (–ë–ï–ó –ê–î–ê–ü–¢–ò–í–ù–û–ô –õ–û–ì–ò–ö–ò) ---
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

const baseDelay = 500; // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delayTime = baseDelay;
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': slugify(BRAND_BLOG_NAME)
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });
                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`–û—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }
                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("–û—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (error.message.includes('503') || error.message.includes('429')) {
                console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ ${i + 1}/${maxRetries}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delayTime}–º—Å`);
                await delay(delayTime);
                delayTime *= 2;
            } else {
                throw error;
            }
        }
    }
    throw new Error(`[–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

// --- –ü–†–û–°–¢–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–¨–ò ---
async function generatePost(topic, postNumber) {
    console.log(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—É–ø–µ—Ä-—Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${topic}`);
    
    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ–±—ä–µ–º–æ–º –ú–ò–ù–ò–ú–£–ú 8000 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ç–µ–º—É "${topic}".

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ FAQ —Å–µ–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ  
- –ü–∏—à–∏ –æ—Ç –ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, FAQ, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- Title –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 35-40 —Å–∏–º–≤–æ–ª–æ–≤
- Description –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 140-155 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
TITLE: [–∑–∞–≥–æ–ª–æ–≤–æ–∫ 35-40 —Å–∏–º–≤–æ–ª–æ–≤]
DESCRIPTION: [–æ–ø–∏—Å–∞–Ω–∏–µ 140-155 —Å–∏–º–≤–æ–ª–æ–≤] 
CONTENT: [—Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –º–∏–Ω–∏–º—É–º 8000 —Å–∏–º–≤–æ–ª–æ–≤]`;

    const generatedContent = await generateWithRetry(articlePrompt);
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    const lines = generatedContent.split('\n');
    let title = `${topic} - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã ${postNumber}`;
    let description = `–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`;
    let content = generatedContent;

    // –ü–∞—Ä—Å–∏–º –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    for (let line of lines) {
        if (line.startsWith('TITLE:')) {
            title = line.replace('TITLE:', '').trim();
        } else if (line.startsWith('DESCRIPTION:')) {
            description = line.replace('DESCRIPTION:', '').trim();
        } else if (line.startsWith('CONTENT:')) {
            content = generatedContent.substring(generatedContent.indexOf('CONTENT:') + 8).trim();
        }
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º 85 —Å—Å—ã–ª–æ–∫
    const links = [
        'https://blondeplace.ru/', 'https://blondeplace.ru/services/', 'https://blondeplace.ru/about/',
        'https://blondeplace.ru/gallery/', 'https://blondeplace.ru/prices/', 'https://blondeplace.ru/contacts/',
        'https://blondeplace.ru/beauty/', 'https://blondeplace.ru/salon/', 'https://blondeplace.ru/experts/', 'https://blondeplace.ru/blog/'
    ];
    
    const words = content.split(' ');
    const linkEveryN = Math.floor(words.length / 85);
    let externalLinks = 0;
    
    for (let i = linkEveryN; i < words.length && externalLinks < 85; i += linkEveryN) {
        const linkUrl = links[externalLinks % links.length];
        const linkText = words[i];
        words[i] = `<a href="${linkUrl}" target="_blank">${linkText}</a>`;
        externalLinks++;
    }
    
    content = words.join(' ');
    
    console.log(`[üîó] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –í—Å—Ç–∞–≤–ª–µ–Ω–æ 85 —Å—Å—ã–ª–æ–∫ (–≤–Ω–µ—à–Ω–∏—Ö: ${externalLinks}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: 0)`);

    const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: ${new Date().toISOString()}
author: "${BRAND_AUTHOR_NAME}"
tags: ["–∫—Ä–∞—Å–æ—Ç–∞", "—Å–∞–ª–æ–Ω", "—Å–æ–≤–µ—Ç—ã", "${topic}"]
image: "${FALLBACK_IMAGE_URL}"
slug: "post${postNumber}"
---`;

    const fullContent = `${frontmatter}\n\n${content}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filename = `post${postNumber}.md`;
    const filepath = path.join(POSTS_DIR, filename);
    
    try {
        await fs.writeFile(filepath, fullContent, 'utf8');
        console.log(`[‚úÖ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${title}"`);
        console.log(`[üìè] Title: ${title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const articleUrl = `${SITE_URL}/blog/post${postNumber}`;
        await notifyIndexNow(articleUrl);
        console.log(`[üì¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¢—É—Ä–±–æ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: 3/3 —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);
        
        return { title, description, url: articleUrl };
    } catch (error) {
        console.error(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
        throw error;
    }
}

async function notifyIndexNow(url) {
    const HOST = "blondeplace.netlify.app";
    const payload = JSON.stringify({ host: HOST, key: INDEXNOW_API_KEY, urlList: [url] });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
    } catch (error) {
        console.error(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ IndexNow:`, error.message);
    }
}

// --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
const keywords = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥", "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è", "–º–∞–Ω–∏–∫—é—Ä –ø–µ–¥–∏–∫—é—Ä", 
    "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è", "spa –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–∫—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ"
];

console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ë–û–ï–í–û–ô –ó–ê–ü–£–°–ö v4.0 ===`);
console.log(`[üéØ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π –ø–æ ${keywords.length} –∫–ª—é—á–∞–º`);

const startNumber = threadId * 1000;
console.log(`[üî¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–∞—á–∏–Ω–∞—é –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å: ${startNumber}`);

let createdArticles = 0;
let totalLinks = 0;

for (let i = 0; i < targetArticles; i++) {
    const keyword = keywords[i % keywords.length];
    const postNumber = startNumber + i;
    
    try {
        const result = await generatePost(keyword, postNumber);
        createdArticles++;
        totalLinks += 85;
        
        await delay(baseDelay);
    } catch (error) {
        console.error(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏ #${postNumber}: ${error.message}`);
    }
}

console.log(`[üèÜ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ú–ò–°–°–ò–Ø v4.0 –ó–ê–í–ï–†–®–ï–ù–ê ===`);
console.log(`[üìä] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${createdArticles}`);
console.log(`[üîó] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${totalLinks}`);
console.log(`[‚ö°] –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${baseDelay}–º—Å`);
console.log(`[üî¢] –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${startNumber}-${startNumber + targetArticles - 1}`); 