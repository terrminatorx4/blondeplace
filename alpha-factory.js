// –∞–π–ª: alpha-factory.js (Alpha-Strike v5.0 - –°–Ø   FACTORY.JS)
import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –°–¢–¢–´ ---
const SITE_URL = 'https://blondeplace.netlify.app';
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?q=80&w=2070&auto=format&fit=crop';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';

// --- –°–¢  ---
const TARGET_URL_MAIN = "https://blondeplace.ru";
const POSTS_DIR = 'src/content/posts';

// --- –°–¢  ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-pro";

// --- –Ø API  (–©–Ø   FACTORY.JS) ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;
const GEMINI_API_KEY_CURRENT = process.env.GEMINI_API_KEY_CURRENT;
const OPENROUTER_API_KEY_CURRENT = process.env.OPENROUTER_API_KEY_CURRENT;

let apiKey;
if (modelChoice === 'deepseek') {
    apiKey = OPENROUTER_API_KEY_CURRENT;
} else {
    apiKey = GEMINI_API_KEY_CURRENT;
}

if (!apiKey) {
    throw new Error(`[–¨- #${threadId}] –µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á!`);
}
console.log(`[üîë] [–¨- #${threadId}] –æ–¥–µ–ª—å: ${modelChoice}, –∫–ª—é—á: ...${apiKey.slice(-4)}`);

// --- –°–¢–Ø  ( –¢ ) ---
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
const baseDelay = 500; // –∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

function slugify(text) {
    const cleanedText = text.toString().replace(/[\x00-\x1F\x7F-\x9F]/g, "").trim();
    const from = "–∞ –± –≤ –≥ –¥ –µ —ë –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —ã —å —ç —é —è".split(' ');
    const to = "a b v g d e yo zh z i y k l m n o p r s t u f h c ch sh sch '' y ' e yu ya".split(' ');
    let newText = cleanedText.toLowerCase();
    for (let i = 0; i < from.length; i++) {
        newText = newText.replace(new RegExp(from[i], 'g'), to[i]);
    }
    return newText.replace(/\s+/g, '-').replace(/[^\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');
}

async function generateWithRetry(prompt, maxRetries = 4) {
    let delay = 5000;
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': slugify(BRAND_BLOG_NAME)
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });
                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`—à–∏–±–∫–∞ HTTP –æ—Ç OpenRouter: ${response.status}`);
                }
                const data = await response.json();
                if (!data.choices || data.choices.length === 0) throw new Error("—Ç–≤–µ—Ç –æ—Ç API OpenRouter –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è 'choices'.");
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (error.message.includes('503') || error.message.includes('429')) {
                console.warn(`[!] [–¨- #${threadId}] –æ–¥–µ–ª—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries}. –¥—É ${delay / 1000}—Å...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 2;
            } else {
                throw error;
            }
        }
    }
    throw new Error(`[–¨- #${threadId}] –µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ ${modelChoice} –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫.`);
}

// ---   FACTORY.JS: –¨–Ø –Ø generatePost ---
async function generatePost(topic, postNumber) {
    console.log(`[üí•] [–¨- #${threadId}] –µ–Ω–µ—Ä–∏—Ä—É—é —Å—É–ø–µ—Ä-—Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${topic}`);
    
    // üéØ  FACTORY.JS: –°-–¢–¨–´ 
    const planPrompt = `–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π, –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π SEO-—Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ç–µ–º—É "${topic}". 

–¢–Ø  :
- –∏–Ω–∏–º—É–º 15-20 —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
- –∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã, –∫–µ–π—Å—ã, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏  
- –æ–±–∞–≤—å FAQ —Å–µ–∫—Ü–∏—é (5-7 –≤–æ–ø—Ä–æ—Å–æ–≤)
- –∫–ª—é—á–∏ —Ä–∞–∑–¥–µ–ª—ã: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ª–∞–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ

–æ–Ω—Ç–µ–∫—Å—Ç: —Å—Ç–∞—Ç—å—è –¥–ª—è –±–ª–æ–≥–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}, —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –∂–µ–Ω—â–∏–Ω—ã 25-45 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∫—Ä–∞—Å–æ—Ç–æ–π.`;

    const plan = await generateWithRetry(planPrompt);

    // üéØ  FACTORY.JS: –¢–Ø    –°–¢–°–¢
    const articlePrompt = `–∞–ø–∏—à–∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é, —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é –æ–±—ä–µ–º–æ–º  15000 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø–ª–∞–Ω—É:

${plan}

–¢–° –¢–Ø:
- –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –°–¨ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–π
- –∫–ª—é—á–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤, –∫–µ–π—Å–æ–≤
- –æ–±–∞–≤—å —Å–ø–∏—Å–∫–∏, —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏ FAQ —Å–µ–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ  
- –∏—à–∏ –æ—Ç –ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}
-  –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ —Ç–∏–ø–∞ "–∫–æ–Ω–µ—á–Ω–æ", "–≤–æ—Ç —Å—Ç–∞—Ç—å—è" –∏ –¥—Ä—É–≥–∏–µ –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã
-  –¥—É–±–ª–∏—Ä—É–π TITLE –∏ DESCRIPTION –≤ —Ç–µ–∫—Å—Ç–µ
- –∞—á–∏–Ω–∞–π —Å—Ç–∞—Ç—å—é —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–∏—è
- —Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
- –∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
- –∫–ª—é—á–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
- –±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å —Å—Ö–µ–º—ã –¥–µ–π—Å—Ç–≤–∏–π –∏ —á–µ–∫-–ª–∏—Å—Ç—ã

–¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: ${topic}
–æ–Ω—Ç–µ–∫—Å—Ç: —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –±–ª–æ–≥ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã ${BRAND_NAME}`;

    const rawContent = await generateWithRetry(articlePrompt);

    // üö®  FACTORY.JS: –°–¢ –¢ –¢ 
    let cleanedContent = rawContent
        .replace(/^.*?–≤–æ—Ç\s+(—ç–∫—Å–ø–µ—Ä—Ç–Ω–∞—è\s+)?—Å—Ç–∞—Ç—å—è.*?$/gmi, "")
        .replace(/^title:\s*.*/gmi, "")
        .replace(/^description:\s*.*/gmi, "")
        .replace(/^content:\s*.*/gmi, "")
        .replace(/^\s*–∫–æ–Ω–µ—á–Ω–æ,?\s*/gmi, "")
        .replace(/\*\*title:\*\*.*$/gmi, "")
        .replace(/\*\*description:\*\*.*$/gmi, "")
        .trim();

    // –°–æ–∑–¥–∞–µ–º title  –Ω–æ–º–µ—Ä–∞ (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)
    const title = `${topic} - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç BlondePlace`;
    const description = `—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ ${topic} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace. —Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–µ–∫—Ä–µ—Ç—ã –º–∞—Å—Ç–µ—Ä–æ–≤.`;

    // –Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –≤ factory.js
    const targetUrls = [
        `${TARGET_URL_MAIN}/uslugi/okrashivanie-volos`,
        `${TARGET_URL_MAIN}/uslugi/strizhki-ukladki`,
        `${TARGET_URL_MAIN}/uslugi/manicure-pedicure`,
        `${TARGET_URL_MAIN}/uslugi/kosmetologia`,
        `${TARGET_URL_MAIN}/about`,
        `${TARGET_URL_MAIN}/contacts`,
        `${TARGET_URL_MAIN}/portfolio`,
        `${TARGET_URL_MAIN}/ceny`,
        `${TARGET_URL_MAIN}/akcii`,
        `${TARGET_URL_MAIN}/blog`
    ];

    // —Å—Ç–∞–≤–ª—è–µ–º 85 —Å—Å—ã–ª–æ–∫
    const words = cleanedContent.split(' ');
    let linkCount = 0;
    const targetLinkCount = 85;
    const linkInterval = Math.floor(words.length / targetLinkCount);

    for (let i = linkInterval; i < words.length && linkCount < targetLinkCount; i += linkInterval) {
        const targetUrl = targetUrls[linkCount % targetUrls.length];
        const anchorText = words[i];
        words[i] = `[${anchorText}](${targetUrl})`;
        linkCount++;
    }

    const finalContent = words.join(' ');
    console.log(`[üîó] [–¨- #${threadId}] —Å—Ç–∞–≤–ª–µ–Ω–æ ${linkCount} —Å—Å—ã–ª–æ–∫ (–≤–Ω–µ—à–Ω–∏—Ö: ${linkCount}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: 0)`);

    // –°–æ–∑–¥–∞–µ–º frontmatter
    const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: "${new Date().toISOString().split('T')[0]}"
author: "${BRAND_AUTHOR_NAME}"
tags: ["beauty-tips"]
image: "${FALLBACK_IMAGE_URL}"
category: "beauty-tips"
slug: "post${postNumber}"
---`;

    const fullArticle = `${frontmatter}\n\n${finalContent}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const filename = `post${postNumber}.md`;
    const filePath = path.join(POSTS_DIR, filename);
    
    await fs.writeFile(filePath, fullArticle, 'utf-8');
    console.log(`[‚úÖ] [–¨- #${threadId}] –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${title}"`);
    console.log(`[üìè] Title: ${title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // IndexNow —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const articleUrl = `${SITE_URL}/blog/post${postNumber}`;
    await notifyIndexNow(articleUrl);
    console.log(`[üì¢] [–¨- #${threadId}] –¢—É—Ä–±–æ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: 3/3 —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);
    
    return {
        filename,
        title,
        url: articleUrl,
        linkCount
    };
}

async function notifyIndexNow(url) {
    const HOST = "blondeplace.netlify.app";
    const payload = JSON.stringify({ host: HOST, key: INDEXNOW_API_KEY, urlList: [url] });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://www.bing.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        await execa('curl', ['-X', 'POST', 'https://google.com/ping?sitemap=' + encodeURIComponent(SITE_URL + '/sitemap.xml')]);
    } catch (error) {
        console.error(`[!] [–¨- #${threadId}] —à–∏–±–∫–∞ IndexNow:`, error.message);
    }
}

// --- –°–Ø  ---
const targetArticles = parseInt(process.env.TARGET_ARTICLES, 10) || 1;
const keywords = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥", "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è", "–º–∞–Ω–∏–∫—é—Ä –ø–µ–¥–∏–∫—é—Ä", 
    "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è", "—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è", "spa –ø—Ä–æ—Ü–µ–¥—É—Ä—ã", "–∫—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ"
];

console.log(`üöÄüí• [–¨- #${threadId}] –Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v5.0 —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
console.log(`üéØ [–¨- #${threadId}] –µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π —Å 85+ —Å—Å—ã–ª–∫–∞–º–∏ –∫–∞–∂–¥–∞—è`);

console.log(`üöÄüí• [–¨- #${threadId}] ===  –° v5.0 ===`);
console.log(`[üéØ] [–¨- #${threadId}] –µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π –ø–æ ${keywords.length} –∫–ª—é—á–∞–º`);

const startNumber = threadId * 1000;
console.log(`[üî¢] [–¨- #${threadId}] –∞—á–∏–Ω–∞—é –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å: ${startNumber}`);

let createdArticles = 0;
let totalLinks = 0;
const createdUrls = [];

for (let i = 0; i < targetArticles; i++) {
    const keyword = keywords[i % keywords.length];
    const postNumber = startNumber + i;
    
    try {
        const result = await generatePost(keyword, postNumber);
        createdArticles++;
        totalLinks += result.linkCount;
        createdUrls.push(result.url);
        
        await delay(baseDelay);
    } catch (error) {
        console.error(`[üí•] [–¨- #${threadId}] —à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏ #${postNumber}: ${error.message}`);
    }
}

console.log(`[üèÜ] [–¨- #${threadId}] === –°–°–Ø v5.0 –® ===`);
console.log(`[üìä] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${createdArticles}`);
console.log(`[üîó] –±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${totalLinks}`);
console.log(`[‚ö°] –∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${baseDelay}–º—Å`);
console.log(`[üî¢] –∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${startNumber}-${startNumber + targetArticles - 1}`);

// üéØ –¢–¢ –° –°–°–´ ( –° –¨–¢–¨)
console.log(`[üåê] –°–´ –°–¢–¢–¨:`);
createdUrls.forEach((url, index) => {
    console.log(`[üìù] –°—Ç–∞—Ç—å—è ${index + 1}: ${url}`);
});

console.log(`[üì¢] INDEXNOW –¢–¢:`);
console.log(`[‚úÖ] Yandex IndexNow: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
console.log(`[‚úÖ] Bing IndexNow: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
console.log(`[‚úÖ] Google Sitemap Ping: ${createdArticles} URLs –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);