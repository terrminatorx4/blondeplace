import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ü–õ–ê–ù "–ê–õ–¨–§–ê-–£–î–ê–†" v4.0 - –°–£–ü–ï–†-–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ---
const SITE_URL = 'https://blondeplace.netlify.app';
const TARGET_URL_MAIN = "https://blondeplace.ru";
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';
const POSTS_DIR = 'src/content/posts';

// --- 8 –ö–õ–Æ–ß–ï–í–´–• –§–†–ê–ó –î–õ–Ø –ü–õ–ê–ù–ê "–ê–õ–¨–§–ê-–£–î–ê–†" ---
const ALPHA_KEYWORDS = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
    "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞", 
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "–º–µ—Å—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É",
    "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã",
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥"
];

// --- –†–ê–°–®–ò–†–ï–ù–ù–´–ï –°–ò–ù–û–ù–ò–ú–´ –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–ò v4.0 ---
const SYNONYMS = {
    "–∞—Ä–µ–Ω–¥–∞": ["—Å–¥–∞—á–∞", "–Ω–∞–µ–º", "–ø—Ä–æ–∫–∞—Ç", "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—ä–µ–º", "–ª–∏–∑–∏–Ω–≥", "–Ω–∞–π–º", "—Ä–µ–∑–µ—Ä–≤", "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–∑–∞–∫–∞–∑", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–ø–æ–ª—É—á–µ–Ω–∏–µ", "—Ñ—Ä–∏–ª–∞–Ω—Å", "–ø–æ–¥—Ä—è–¥", "—Å—É–±–∞—Ä–µ–Ω–¥–∞", "–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –Ω–∞–π–º"],
    "–∫—Ä–µ—Å–ª–æ": ["–º–µ—Å—Ç–æ", "—Ä–∞–±–æ—á–∞—è –∑–æ–Ω–∞", "—Å—Ç–æ–ª –º–∞—Å—Ç–µ—Ä–∞", "—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", "–ø–æ–∑–∏—Ü–∏—è", "–∫–∞–±–∏–Ω–µ—Ç", "—Å—Ç–∞–Ω—Ü–∏—è", "–ª–æ–∫–∞—Ü–∏—è", "—Å–ø–æ—Ç", "—Ç–æ—á–∫–∞", "–∑–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—Ä–∞–±–æ—á–∏–π —É–≥–æ–ª–æ–∫", "–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è", "—Å—Ç—É–¥–∏—è", "corner"],
    "–º–∞—Å—Ç–µ—Ä": ["—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "—Å—Ç–∏–ª–∏—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "—ç–∫—Å–ø–µ—Ä—Ç", "–≤–∏–∑–∞–∂–∏—Å—Ç", "–±—å—é—Ç–∏–º–∞—Å—Ç–µ—Ä", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "nail-–º–∞—Å—Ç–µ—Ä", "–±—å—é—Ç–∏-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Å–æ—Ç—ã", "—Ç–æ–ø-–º–∞—Å—Ç–µ—Ä", "–ø—Ä–æ—Ñ–∏", "guru", "ace"],
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": ["—Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "beauty-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—Å—Ç—É–¥–∏—è", "—Ü–µ–Ω—Ç—Ä", "–æ—Ñ–∏—Å", "—Å–ø–µ–π—Å", "—Ö–∞–±", "–∑–æ–Ω–∞", "–ø–ª–æ—â–∞–¥–∫–∞", "–ª–æ–∫–∞—Ü–∏—è", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—Ü–µ–Ω—Ç—Ä –∫—Ä–∞—Å–æ—Ç—ã", "–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä", "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—à–µ—Ä–∏–Ω–≥", "workspace"],
    "–º–µ—Å—Ç–∞": ["–ª–æ–∫–∞—Ü–∏–∏", "–ø–æ–º–µ—â–µ–Ω–∏—è", "–∑–æ–Ω—ã", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", "–∫–∞–±–∏–Ω–µ—Ç—ã", "—Å—Ç—É–¥–∏–∏", "—Ç–æ—á–∫–∏", "–ø–æ–∑–∏—Ü–∏–∏", "—Å—Ç–∞–Ω—Ü–∏–∏", "–æ–±–ª–∞—Å—Ç–∏", "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", "—É—á–∞—Å—Ç–∫–∏", "–ø–ª–æ—â–∞–¥–∏", "—Å–µ–∫—Ü–∏–∏", "–æ—Ç–¥–µ–ª–µ–Ω–∏—è", "—É–≥–æ–ª–∫–∏"],
    "—Å–∞–ª–æ–Ω": ["—Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã", "beauty-—Ü–µ–Ω—Ç—Ä", "—Å—Ç—É–¥–∏—è", "—Ü–µ–Ω—Ç—Ä –∫—Ä–∞—Å–æ—Ç—ã", "–∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã", "–±—å—é—Ç–∏-—Å—Ç—É–¥–∏—è", "spa-—Ü–µ–Ω—Ç—Ä", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", "beauty-—Å–∞–ª–æ–Ω", "—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", "–∏–Ω—Å—Ç–∏—Ç—É—Ç –∫—Ä–∞—Å–æ—Ç—ã", "–¥–æ–º –∫—Ä–∞—Å–æ—Ç—ã", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∫—Ä–∞—Å–æ—Ç—ã"],
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–∫–æ–ª–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–±–ª–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–±–µ—Å—Ü–≤–µ—á–∏–≤–∞–Ω–∏–µ", "–≤—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–æ–º–±—Ä–µ", "–±–∞–ª–∞—è–∂", "—à–∞—Ç—É—à", "–æ–∫—Ä–∞—Å–∫–∞", "–ø–æ–∫—Ä–∞—Å–∫–∞", "highlights", "babylights", "airtouch", "—Ä–∞—Å—Ç—è–∂–∫–∞ —Ü–≤–µ—Ç–∞"],
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥": ["–ø–æ–ª–Ω–æ–µ –±–ª–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–ª–æ–Ω–¥", "—É–ª—å—Ç—Ä–∞ –±–ª–æ–Ω–¥", "–±–µ–ª—ã–π –±–ª–æ–Ω–¥", "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥", "total blonde", "—Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥", "–ª–µ–¥—è–Ω–æ–π –±–ª–æ–Ω–¥", "–ø–æ–ª–Ω–æ–µ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥", "arctic blonde", "platinum", "–ø–µ—Ä–ª–∞–º—É—Ç—Ä–æ–≤—ã–π –±–ª–æ–Ω–¥"]
};

// --- –ì–ï–û-–¢–ê–†–ì–ï–¢–ò–ù–ì–û–í–´–ï –†–ê–ô–û–ù–´ –°–ü–ë ---
const SPB_DISTRICTS = [
    "–≤ —Ü–µ–Ω—Ç—Ä–µ", "—É –º–µ—Ç—Ä–æ", "–≤ –í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–Ω–∞ –ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ", 
    "–≤ –ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ", "–≤–æ–∑–ª–µ –ù–µ–≤—Å–∫–æ–≥–æ –ø—Ä–æ—Å–ø–µ–∫—Ç–∞",
    "—Ä—è–¥–æ–º —Å –≠—Ä–º–∏—Ç–∞–∂–µ–º", "—É –î–≤–æ—Ä—Ü–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∏", "–≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º —Ü–µ–Ω—Ç—Ä–µ",
    "–≤ –¥–µ–ª–æ–≤–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ", "–≤ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ", "—É –ú–∞—Ä–∏–∏–Ω—Å–∫–æ–≥–æ —Ç–µ–∞—Ç—Ä–∞",
    "—Ä—è–¥–æ–º —Å –ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∏–º —Å–æ–±–æ—Ä–æ–º", "–≤–æ–∑–ª–µ –ö–∞–∑–∞–Ω—Å–∫–æ–≥–æ —Å–æ–±–æ—Ä–∞", "–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ",
    "–≤ –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –í—ã–±–æ—Ä–≥—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –ü—Ä–∏–º–æ—Ä—Å–∫–æ–º —Ä–∞–π–æ–Ω–µ",
    "–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤—Å–∫–æ–º –æ—Å—Ç—Ä–æ–≤–µ", "–≤ —ç–ª–∏—Ç–Ω–æ–º —Ä–∞–π–æ–Ω–µ", "–≤ –ø—Ä–µ—Å—Ç–∏–∂–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"
];

// --- –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ v4.0 ---
const TITLE_MODIFIERS = [
    "2025", "—Å—Ä–æ—á–Ω–æ", "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "–ø—Ä–µ–º–∏—É–º", "—ç–ª–∏—Ç–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π",
    "–≤—ã–≥–æ–¥–Ω–æ", "—É–¥–æ–±–Ω–æ", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ", "—Å—Ç–∏–ª—å–Ω–æ", "—Ü–µ–Ω—Ç—Ä", "–º–µ—Ç—Ä–æ", "—É–¥–æ–±–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è", "–±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞",
    "–ø–æ–¥ –∫–ª—é—á", "—Å–æ –≤—Å–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º", "–º–µ–±–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", "–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", "–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤",
    "—Ç–æ–ø –∫–∞—á–µ—Å—Ç–≤–æ", "–ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è", "—ç–∫—Å–∫–ª—é–∑–∏–≤", "VIP", "–±–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å", "–Ω–æ–≤–∏–Ω–∫–∞", "—Ö–∏—Ç —Å–µ–∑–æ–Ω–∞",
    "—Ç—Ä–µ–Ω–¥", "–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ", "–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–æ–µ", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ", "—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ", "–æ—Å–æ–±–µ–Ω–Ω–æ–µ", 
    "–ª—é–∫—Å", "–¥–µ–ª—é–∫—Å", "—Å—É–ø–µ—Ä", "–º–µ–≥–∞", "—É–ª—å—Ç—Ä–∞", "–ø—Ä–æ", "–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", "—ç–∫—Å–ø—Ä–µ—Å—Å"
];

const DESCRIPTION_MODIFIERS = [
    "‚≠ê –õ—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è", "‚úÖ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π", "üî• –ê–∫—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞", "üíé –ü—Ä–µ–º–∏—É–º –ª–æ–∫–∞—Ü–∏—è",
    "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "‚ö° –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã", "üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
    "üèÜ –¢–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üìû –ó–≤–æ–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å", "üéÅ –ë–æ–Ω—É—Å—ã –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º", "‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    "üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ", "üíù –ü–æ–¥–∞—Ä–∫–∏", "üéä –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞", "üîî –ù–æ–≤–∏–Ω–∫–∞", "üé™ –°—É–ø–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "üëë VIP —É—Å–ª–æ–≤–∏—è"
];

// --- –¶–ï–õ–ï–í–´–ï URL –û–°–ù–û–í–ù–û–ì–û –°–ê–ô–¢–ê ---
const TARGET_URLS = [
    "https://blondeplace.ru/#about",
    "https://blondeplace.ru/#services", 
    "https://blondeplace.ru/#discount",
    "https://blondeplace.ru/#coworking",
    "https://blondeplace.ru/#masters",
    "https://blondeplace.ru/#brands",
    "https://blondeplace.ru/#news",
    "https://blondeplace.ru/#comments",
    "https://blondeplace.ru/#why",
    "https://blondeplace.ru"
];

// --- –®–ê–ë–õ–û–ù–´ –°–¢–†–£–ö–¢–£–†–´ –°–¢–ê–¢–ï–ô v4.0 ---
const ARTICLE_TEMPLATES = [
    "–≥–∏–¥", "–æ–±–∑–æ—Ä", "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "—Å–æ–≤–µ—Ç—ã", "—Å–µ–∫—Ä–µ—Ç—ã", "—Ç—Ä–µ–Ω–¥—ã", "–Ω–æ–≤–∏–Ω–∫–∏", 
    "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ", "—Ä–µ–π—Ç–∏–Ω–≥", "—Ç–æ–ø", "–ª—É—á—à–∏–µ", "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å", "—á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å",
    "–ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", "—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã"
];

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô (–ê–î–ê–ü–¢–ò–í–ù–´–ï v4.0) ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-flash";

// --- –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô (–ö–ê–ö –í –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú FACTORY.JS) ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;

// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GEMINI_API_KEY_CURRENT = process.env.GEMINI_API_KEY_CURRENT;
const OPENROUTER_API_KEY_CURRENT = process.env.OPENROUTER_API_KEY_CURRENT;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π API –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
let rawApiKey;
if (modelChoice === 'deepseek') {
    rawApiKey = OPENROUTER_API_KEY_CURRENT;
    if (!rawApiKey) {
        throw new Error(`[–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ –Ω–∞–π–¥–µ–Ω OPENROUTER_API_KEY_CURRENT –¥–ª—è –º–æ–¥–µ–ª–∏ DeepSeek!`);
    }
} else {
    rawApiKey = GEMINI_API_KEY_CURRENT;
    if (!rawApiKey) {
        throw new Error(`[–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ –Ω–∞–π–¥–µ–Ω GEMINI_API_KEY_CURRENT –¥–ª—è –º–æ–¥–µ–ª–∏ Gemini!`);
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–ª –∫–ª—é—á–µ–π (–µ—Å–ª–∏ —ç—Ç–æ –ø—É–ª, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—è—Ç—ã–º–∏)
const apiKeysArray = rawApiKey.split(',').map(key => key.trim()).filter(key => key.length > 0);

console.log(`[üîç] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ú–æ–¥–µ–ª—å: ${modelChoice}, –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: ${apiKeysArray.length}`);

// –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–∏ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
let apiKey;
if (apiKeysArray.length === 1) {
    apiKey = apiKeysArray[0];
    console.log(`[‚ö†Ô∏è] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª—é—á —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π`);
} else {
    apiKey = apiKeysArray[threadId % apiKeysArray.length];
    console.log(`[üîë] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ò—Å–ø–æ–ª—å–∑—É—é –∫–ª—é—á #${(threadId % apiKeysArray.length) + 1} –∏–∑ ${apiKeysArray.length}`);
}

const targetArticles = parseInt(process.env.ALPHA_ARTICLES, 10) || 30;

console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã v4.0 —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
console.log(`üéØ [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π —Å 85+ —Å—Å—ã–ª–∫–∞–º–∏ –∫–∞–∂–¥–∞—è`);

// --- –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–ö–û–†–û–°–¢–ò v4.0 ---
class AdaptiveSpeedController {
    constructor() {
        this.baseDelay = apiKeysArray.length === 1 ? 1000 : 100; // –ë–æ–ª—å—à–µ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞
        this.currentDelay = this.baseDelay;
        this.errorCount = 0;
        this.successCount = 0;
        this.lastErrorTime = 0;
    }

    onSuccess() {
        this.successCount++;
        this.errorCount = Math.max(0, this.errorCount - 1);
        
        // –£—Å–∫–æ—Ä—è–µ–º—Å—è –ø—Ä–∏ —É—Å–ø–µ—Ö–∞—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π)
        if (apiKeysArray.length > 1 && this.successCount % 5 === 0 && this.currentDelay > 50) {
            this.currentDelay = Math.max(50, this.currentDelay * 0.9);
            console.log(`[‚ö°] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ${this.currentDelay}–º—Å`);
        }
    }

    onError() {
        this.errorCount++;
        this.lastErrorTime = Date.now();
        
        // –ó–∞–º–µ–¥–ª—è–µ–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        this.currentDelay = Math.min(5000, this.currentDelay * 1.5);
        console.log(`[üêå] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: ${this.currentDelay}–º—Å`);
    }

    getDelay() {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
        const timeSinceError = Date.now() - this.lastErrorTime;
        if (timeSinceError < 10000 && this.errorCount > 0) {
            return this.currentDelay * 2;
        }
        return this.currentDelay;
    }
}

const speedController = new AdaptiveSpeedController();

// --- –°–ò–°–¢–ï–ú–ê –ì–õ–û–ë–ê–õ–¨–ù–û–ô –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò v4.0 ---
async function getNextAvailablePostNumber() {
    try {
        const token = process.env.GITHUB_TOKEN;
        const repo = process.env.GITHUB_REPOSITORY;
        
        if (!token || !repo) {
            console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] GitHub –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Å ${threadId * 1000}`);
            return threadId * 1000;
        }

        const response = await fetch(`https://api.github.com/repos/${repo}/contents/${POSTS_DIR}`, {
            headers: { 'Authorization': `token ${token}` }
        });

        if (!response.ok) {
            console.log(`[üìÅ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞, –Ω–∞—á–∏–Ω–∞—é —Å ${threadId * 1000}`);
            return threadId * 1000;
        }

        const files = await response.json();
        
        if (!Array.isArray(files) || files.length === 0) {
            console.log(`[üìÅ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤, –Ω–∞—á–∏–Ω–∞—é —Å ${threadId * 1000}`);
            return threadId * 1000;
        }

        let maxPostNumber = 0;
        for (const file of files) {
            if (file.name.startsWith('post') && file.name.endsWith('.md')) {
                const numberMatch = file.name.match(/post(\d+)\.md/);
                if (numberMatch) {
                    const postNumber = parseInt(numberMatch[1], 10);
                    if (postNumber > maxPostNumber) {
                        maxPostNumber = postNumber;
                    }
                }
            }
        }

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ 1000 –Ω–æ–º–µ—Ä–æ–≤
        const threadBase = Math.max(maxPostNumber + 1, threadId * 1000);
        console.log(`[üî¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: ${maxPostNumber}, –Ω–∞—á–∏–Ω–∞—é —Å ${threadBase}`);
        return threadBase;

    } catch (error) {
        console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: ${error.message}, –Ω–∞—á–∏–Ω–∞—é —Å ${threadId * 1000}`);
        return threadId * 1000;
    }
}

// --- –£–ì–õ–£–ë–õ–ï–ù–ù–ê–Ø –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–Ø v4.0 ---
function generateAdvancedVariation(keyword) {
    const words = keyword.split(' ');
    let result = '';
    
    for (const word of words) {
        const cleanWord = word.toLowerCase();
        if (SYNONYMS[cleanWord] && Math.random() > 0.3) { // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã
            const synonyms = SYNONYMS[cleanWord];
            result += synonyms[Math.floor(Math.random() * synonyms.length)] + ' ';
        } else {
            result += word + ' ';
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–æ-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ 40% —Å–ª—É—á–∞–µ–≤
    if (Math.random() > 0.6) {
        const geoModifier = SPB_DISTRICTS[Math.floor(Math.random() * SPB_DISTRICTS.length)];
        result += geoModifier + ' ';
    }
    
    return result.trim();
}

// --- –°–ò–°–¢–ï–ú–ê –£–ú–ù–´–• –ó–ê–ì–û–õ–û–í–ö–û–í v4.0 ---
function createSmartUniqueTitle(baseKeyword, postNumber) {
    const variation = generateAdvancedVariation(baseKeyword);
    const modifier = TITLE_MODIFIERS[Math.floor(Math.random() * TITLE_MODIFIERS.length)];
    const template = ARTICLE_TEMPLATES[Math.floor(Math.random() * ARTICLE_TEMPLATES.length)];
    const timestamp = Date.now().toString().slice(-3); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const titleFormats = [
        `${template}: ${variation} ${modifier}`,
        `${variation} - ${template} ${modifier}`,
        `${modifier} ${variation}: ${template}`,
        `${variation} ${modifier} (${template})`
    ];
    
    const selectedFormat = titleFormats[Math.floor(Math.random() * titleFormats.length)];
    const titleWithNumber = `${selectedFormat} ${postNumber}`;
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 45 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
    if (titleWithNumber.length <= 45) {
        return titleWithNumber;
    }
    
    const words = titleWithNumber.split(' ');
    let result = '';
    for (const word of words) {
        if (result.length + word.length + 1 <= 42) {
            result += (result ? ' ' : '') + word;
        } else {
            break;
        }
    }
    
    return result ? `${result} ${postNumber}` : `${baseKeyword} ${postNumber}`;
}

function createSmartUniqueDescription(keyword, postNumber) {
    const modifier = DESCRIPTION_MODIFIERS[Math.floor(Math.random() * DESCRIPTION_MODIFIERS.length)];
    const variation = generateAdvancedVariation(keyword);
    const geoContext = SPB_DISTRICTS[Math.floor(Math.random() * SPB_DISTRICTS.length)];
    
    const descriptionFormats = [
        `${modifier} ${variation} –≤ BlondePlace ${geoContext}! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ó–∞–ø–∏—Å—å: ${postNumber}.`,
        `${modifier} ${variation} ${geoContext} –≤ BlondePlace! –õ—É—á—à–∏–µ –º–∞—Å—Ç–µ—Ä–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ó–≤–æ–Ω–∏—Ç–µ: ${postNumber}.`,
        `${variation} ${geoContext} - ${modifier} –≤ BlondePlace! –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã. ID: ${postNumber}.`
    ];
    
    const selectedDescription = descriptionFormats[Math.floor(Math.random() * descriptionFormats.length)];
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 164 —Å–∏–º–≤–æ–ª–æ–≤
    if (selectedDescription.length <= 164) {
        return selectedDescription;
    }
    
    const words = selectedDescription.split(' ');
    let result = '';
    for (const word of words) {
        if (result.length + word.length + 1 <= 164) {
            result += (result ? ' ' : '') + word;
        } else {
            break;
        }
    }
    
    return result || `${keyword} –≤ BlondePlace! –ó–∞–ø–∏—Å—å: ${postNumber}.`;
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –° –ê–î–ê–ü–¢–ò–í–ù–´–ú–ò –ü–û–í–¢–û–†–ê–ú–ò v4.0 ---
async function generateWithAdaptiveRetry(prompt, maxRetries = 3) {
    let delay = speedController.getDelay();
    
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': 'BlondePlace-Alpha-Strike-v4'
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });

                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`HTTP ${response.status}`);
                }

                const data = await response.json();
                speedController.onSuccess();
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                speedController.onSuccess();
                return result.response.text();
            }
        } catch (error) {
            speedController.onError();
            if (i < maxRetries - 1) {
                delay = speedController.getDelay();
                console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ ${i + 1}/${maxRetries}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å`);
                await new Promise(resolve => setTimeout(resolve, delay));
            } else {
                throw error;
            }
        }
    }
}

// --- –°–ò–°–¢–ï–ú–ê –£–ú–ù–û–ô –°–°–´–õ–û–ß–ù–û–ô –ü–ò–†–ê–ú–ò–î–´ v4.0 ---
function generateIntelligentLinks(keyword, articleText, existingPosts) {
    const targetLinks = 85; // –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–æ—Ä—ã —Å –≥–µ–æ-–º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    const anchorTemplates = [
        keyword,
        `${keyword} –≤ –°–ü–±`,
        `–ª—É—á—à–∏–π ${keyword}`,
        `${keyword} BlondePlace`,
        `–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π ${keyword}`,
        `–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π ${keyword}`,
        `${keyword} —Ü–µ–Ω—Ç—Ä`,
        `${keyword} —Å—Ç—É–¥–∏—è`,
        `${keyword} —É—Å–ª—É–≥–∏`,
        `–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${keyword}`,
        `—Ç–æ–ø ${keyword}`,
        `${keyword} —Ä—è–¥–æ–º`,
        `${keyword} –Ω–µ–¥–æ—Ä–æ–≥–æ`,
        `${keyword} –æ—Ç–∑—ã–≤—ã`,
        `${keyword} –≤ —Ü–µ–Ω—Ç—Ä–µ`,
        `${keyword} —É –º–µ—Ç—Ä–æ`,
        `—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π ${keyword}`,
        `–ø—Ä–µ–º–∏—É–º ${keyword}`
    ];
    
    const paragraphs = articleText.split('\n\n').filter(p => p.trim().length > 0);
    let processedParagraphs = [];
    let addedLinks = 0;
    let internalLinks = 0;
    
    for (let i = 0; i < paragraphs.length && addedLinks < targetLinks; i++) {
        const paragraph = paragraphs[i];
        
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (paragraph.trim().startsWith('#')) {
            processedParagraphs.push(paragraph);
            continue;
        }
        
        let modifiedParagraph = paragraph;
        const linksInThisParagraph = Math.min(Math.floor(Math.random() * 4) + 2, targetLinks - addedLinks);
        
        for (let j = 0; j < linksInThisParagraph; j++) {
            // 80% —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç, 20% –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            if (Math.random() > 0.2 || existingPosts.length === 0) {
                // –í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç
                const targetUrl = TARGET_URLS[Math.floor(Math.random() * TARGET_URLS.length)];
                const anchor = anchorTemplates[Math.floor(Math.random() * anchorTemplates.length)];
                
                const sentences = modifiedParagraph.split('. ');
                if (sentences.length > 1) {
                    const randomSentenceIndex = Math.floor(Math.random() * sentences.length);
                    const linkTexts = [
                        `–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ <a href="${targetUrl}" target="_blank">${anchor}</a>`,
                        `–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ <a href="${targetUrl}" target="_blank">${anchor}</a>`,
                        `–ß–∏—Ç–∞–π—Ç–µ –ø—Ä–æ <a href="${targetUrl}" target="_blank">${anchor}</a>`,
                        `–°–º–æ—Ç—Ä–∏—Ç–µ <a href="${targetUrl}" target="_blank">${anchor}</a>`
                    ];
                    const linkText = linkTexts[Math.floor(Math.random() * linkTexts.length)];
                    sentences[randomSentenceIndex] += ` ${linkText}.`;
                    modifiedParagraph = sentences.join('. ');
                }
            } else {
                // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞
                const randomPost = existingPosts[Math.floor(Math.random() * existingPosts.length)];
                const sentences = modifiedParagraph.split('. ');
                if (sentences.length > 1) {
                    const randomSentenceIndex = Math.floor(Math.random() * sentences.length);
                    sentences[randomSentenceIndex] += ` –¢–∞–∫–∂–µ —á–∏—Ç–∞–π—Ç–µ: <a href="${randomPost.url}">${randomPost.title}</a>.`;
                    modifiedParagraph = sentences.join('. ');
                    internalLinks++;
                }
            }
            
            addedLinks++;
        }
        
        processedParagraphs.push(modifiedParagraph);
    }
    
    console.log(`[üîó] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${addedLinks} —Å—Å—ã–ª–æ–∫ (–≤–Ω–µ—à–Ω–∏—Ö: ${addedLinks - internalLinks}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: ${internalLinks})`);
    return processedParagraphs.join('\n\n');
}

// --- –¢–£–†–ë–û-–†–ï–ñ–ò–ú –ò–ù–î–ï–ö–°–ê–¶–ò–ò v4.0 ---
async function turboIndexNotification(url) {
    const payload = JSON.stringify({
        host: "blondeplace.netlify.app",
        key: INDEXNOW_API_KEY,
        urlList: [url]
    });

    const notifications = [
        // Yandex IndexNow
        { url: 'https://yandex.com/indexnow', name: 'Yandex' },
        // Bing IndexNow
        { url: 'https://www.bing.com/indexnow', name: 'Bing' },
        // Google ping (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
        { url: 'https://www.google.com/ping?sitemap=' + encodeURIComponent(`${SITE_URL}/sitemap.xml`), name: 'Google' }
    ];

    const results = await Promise.allSettled(
        notifications.map(async (service) => {
            try {
                if (service.name === 'Google') {
                    await execa('curl', ['-X', 'GET', service.url]);
                } else {
                    await execa('curl', ['-X', 'POST', service.url, '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
                }
                return { service: service.name, status: 'success' };
            } catch (error) {
                return { service: service.name, status: 'error', error: error.message };
            }
        })
    );

    const successful = results.filter(r => r.status === 'fulfilled' && r.value.status === 'success').length;
    console.log(`[üì¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¢—É—Ä–±–æ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è: ${successful}/${notifications.length} —Å–µ—Ä–≤–∏—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã`);
}

async function commitToGithub(filePath, content, message) {
    try {
        const token = process.env.GITHUB_TOKEN;
        const repo = process.env.GITHUB_REPOSITORY;
        
        if (!token || !repo) {
            console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
            return false;
        }
        
        const encodedContent = Buffer.from(content).toString('base64');
        
        const response = await fetch(`https://api.github.com/repos/${repo}/contents/${filePath}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message,
                content: encodedContent
            })
        });
        
        if (response.ok) {
            console.log(`[‚úÖ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ GitHub: ${filePath}`);
            return true;
        } else {
            console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ GitHub API: ${response.status}`);
            return false;
        }
    } catch (error) {
        console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        return false;
    }
}

// --- –°–ò–°–¢–ï–ú–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–°–¢–û–í –î–õ–Ø –í–ù–£–¢–†–ï–ù–ù–ï–ô –ü–ï–†–ï–õ–ò–ù–ö–û–í–ö–ò ---
async function getExistingPosts() {
    try {
        const token = process.env.GITHUB_TOKEN;
        const repo = process.env.GITHUB_REPOSITORY;
        
        if (!token || !repo) return [];

        const response = await fetch(`https://api.github.com/repos/${repo}/contents/${POSTS_DIR}`, {
            headers: { 'Authorization': `token ${token}` }
        });

        if (!response.ok) return [];

        const files = await response.json();
        const posts = [];

        for (const file of files.slice(0, 50)) { // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (file.name.startsWith('post') && file.name.endsWith('.md')) {
                const numberMatch = file.name.match(/post(\d+)\.md/);
                if (numberMatch) {
                    const postNumber = parseInt(numberMatch[1], 10);
                    posts.push({
                        title: `–°—Ç–∞—Ç—å—è ‚Ññ${postNumber}`,
                        url: `/blog/post${postNumber}/`
                    });
                }
            }
        }

        return posts;
    } catch (error) {
        console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: ${error.message}`);
        return [];
    }
}

// --- AI-–£–ü–†–ê–í–õ–Ø–ï–ú–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–¢–ê–¢–ï–ô v4.0 ---
async function generateAdvancedAlphaArticle(keyword, postNumber, existingPosts) {
    console.log(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—É–ø–µ—Ä-—Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${keyword}`);

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç—å–∏
    const template = ARTICLE_TEMPLATES[Math.floor(Math.random() * ARTICLE_TEMPLATES.length)];
    const geoContext = SPB_DISTRICTS[Math.floor(Math.random() * SPB_DISTRICTS.length)];

    // –£–ú–ù–´–ô –ü–†–û–ú–ü–¢ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú v4.0
    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ "${template}" –Ω–∞ —Ç–µ–º—É "${keyword}" –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace.

–ö–û–ù–¢–ï–ö–°–¢: –°–∞–ª–æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ ${geoContext}.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä–µ–º: 6000-8000 —Å–∏–º–≤–æ–ª–æ–≤
- –°—Ç–∏–ª—å: ${template} –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BlondePlace
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: # H1, ## H2, ### H3 –≤ Markdown
- –ì–µ–æ–∫–æ–Ω—Ç–µ–∫—Å—Ç: –£–ø–æ–º–∏–Ω–∞–π "${geoContext}" –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
- –≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ë–ï–ó —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ (–¥–æ–±–∞–≤–ª—é –æ—Ç–¥–µ–ª—å–Ω–æ)
- –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1

–ü–∏—à–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç —Å–∞–ª–æ–Ω–∞ BlondePlace!`;

    let articleText = await generateWithAdaptiveRetry(articlePrompt);
    
    // –°—É–ø–µ—Ä-–æ—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, '');
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, '');
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, '');
    articleText = articleText.replace(/www\.[^\s]+/g, '');
    articleText = articleText.trim();

    // –£–ú–ù–ê–Ø –°–°–´–õ–û–ß–ù–ê–Ø –ü–ò–†–ê–ú–ò–î–ê
    articleText = generateIntelligentLinks(keyword, articleText, existingPosts);

    // –°–£–ü–ï–†-–£–ù–ò–ö–ê–õ–¨–ù–´–ï –ú–ï–¢–ê-–¢–ï–ì–ò
    const uniqueTitle = createSmartUniqueTitle(keyword, postNumber);
    const uniqueDescription = createSmartUniqueDescription(keyword, postNumber);

    const schema = {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": uniqueTitle,
        "description": uniqueDescription,
        "author": { "@type": "Person", "name": BRAND_AUTHOR_NAME },
        "publisher": { "@type": "Organization", "name": BRAND_BLOG_NAME },
        "datePublished": new Date().toISOString(),
        "mainEntityOfPage": `${SITE_URL}/blog/post${postNumber}/`,
        "keywords": [keyword, "BlondePlace", "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã", "–°–ü–±"],
        "locationCreated": {
            "@type": "Place",
            "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        }
    };

    const frontmatter = `---
title: "${uniqueTitle.replace(/"/g, '\\"')}"
description: "${uniqueDescription.replace(/"/g, '\\"')}"
keywords: "${keyword}, BlondePlace, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
pubDate: "${new Date().toISOString()}"
author: "${BRAND_AUTHOR_NAME}"
heroImage: "${FALLBACK_IMAGE_URL}"
schema: ${JSON.stringify(schema)}
---

${articleText}
`;

    return { content: frontmatter, title: uniqueTitle, description: uniqueDescription };
}

async function main() {
    console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ë–û–ï–í–û–ô –ó–ê–ü–£–°–ö v4.0 ===`);
    
    try {
        const postsDir = path.join(process.cwd(), POSTS_DIR);
        await fs.mkdir(postsDir, { recursive: true });
        
        console.log(`[üéØ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π –ø–æ 8 –∫–ª—é—á–∞–º`);
        
        // –ü–û–õ–£–ß–ê–ï–ú –°–õ–ï–î–£–Æ–©–ò–ô –î–û–°–¢–£–ü–ù–´–ô –ù–û–ú–ï–† –ü–û–°–¢–ê
        const startPostNumber = await getNextAvailablePostNumber();
        
        // –ü–û–õ–£–ß–ê–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–û–°–¢–´ –î–õ–Ø –í–ù–£–¢–†–ï–ù–ù–ï–ô –ü–ï–†–ï–õ–ò–ù–ö–û–í–ö–ò
        const existingPosts = await getExistingPosts();
        console.log(`[üîó] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–∞–π–¥–µ–Ω–æ ${existingPosts.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏`);
        
        console.log(`[üî¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–∞—á–∏–Ω–∞—é –Ω—É–º–µ—Ä–∞—Ü–∏—é —Å: ${startPostNumber}`);
        
        for (let i = 0; i < targetArticles; i++) {
            const keyword = ALPHA_KEYWORDS[i % ALPHA_KEYWORDS.length];
            const postNumber = startPostNumber + i;
            
            try {
                const slug = `post${postNumber}`;
                const filePath = path.join(postsDir, `${slug}.md`);
                const githubPath = `${POSTS_DIR}/${slug}.md`;
                
                const result = await generateAdvancedAlphaArticle(keyword, postNumber, existingPosts);
                
                // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await fs.writeFile(filePath, result.content);
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GitHub
                await commitToGithub(githubPath, result.content, `üöÄüí• –ê–õ–¨–§–ê-–£–î–ê–† v4.0: –°—É–ø–µ—Ä-—Å—Ç–∞—Ç—å—è #${postNumber} - ${result.title}`);
                
                console.log(`[‚úÖ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${result.title}"`);
                console.log(`[üìè] Title: ${result.title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${result.description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                
                // –¢–£–†–ë–û-–ò–ù–î–ï–ö–°–ê–¶–ò–Ø
                const url = `${SITE_URL}/blog/${slug}/`;
                await turboIndexNotification(url);
                
                // –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ü–ê–£–ó–ê
                const delay = speedController.getDelay();
                await new Promise(resolve => setTimeout(resolve, delay));
                
            } catch (error) {
                console.error(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏ #${startPostNumber + i}: ${error.message}`);
                continue;
            }
        }
        
        console.log(`[üèÜ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ú–ò–°–°–ò–Ø v4.0 –ó–ê–í–ï–†–®–ï–ù–ê ===`);
        console.log(`[üìä] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${targetArticles}`);
        console.log(`[üîó] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${targetArticles * 85}`);
        console.log(`[‚ö°] –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${speedController.currentDelay}–º—Å`);
        console.log(`[üî¢] –î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${startPostNumber}-${startPostNumber + targetArticles - 1}`);
        
    } catch (error) {
        console.error(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error);
        process.exit(1);
    }
}

main(); 