import { GoogleGenerativeAI } from '@google/generative-ai';
import fs from 'fs/promises';
import path from 'path';
import fetch from 'node-fetch';
import { execa } from 'execa';

// --- –ü–õ–ê–ù "–ê–õ–¨–§–ê-–£–î–ê–†" –ù–ê–°–¢–†–û–ô–ö–ò ---
const SITE_URL = 'https://blondeplace.netlify.app';
const TARGET_URL_MAIN = "https://blondeplace.ru";
const BRAND_NAME = 'BlondePlace';
const BRAND_BLOG_NAME = '–ë–ª–æ–≥ BlondePlace';
const BRAND_AUTHOR_NAME = '–≠–∫—Å–ø–µ—Ä—Ç BlondePlace';
const FALLBACK_IMAGE_URL = 'https://images.unsplash.com/photo-1522337360788-8b13dee7a37e?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D';
const INDEXNOW_API_KEY = 'df39150ca56f896546628ae3c923dd4a';
const POSTS_DIR = 'src/content/posts';

// --- 8 –ö–õ–Æ–ß–ï–í–´–• –§–†–ê–ó –î–õ–Ø –ü–õ–ê–ù–ê "–ê–õ–¨–§–ê-–£–î–ê–†" ---
const ALPHA_KEYWORDS = [
    "–±—å—é—Ç–∏ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
    "–∞—Ä–µ–Ω–¥–∞ –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–≥–æ –∫—Ä–µ—Å–ª–∞", 
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "–º–µ—Å—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É",
    "–∫—Ä–µ—Å–ª–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞",
    "—Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã",
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥"
];

// --- –†–ê–°–®–ò–†–ï–ù–ù–´–ï –°–ò–ù–û–ù–ò–ú–´ –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–ò ---
const SYNONYMS = {
    "–∞—Ä–µ–Ω–¥–∞": ["—Å–¥–∞—á–∞", "–Ω–∞–µ–º", "–ø—Ä–æ–∫–∞—Ç", "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Å—ä–µ–º", "–ª–∏–∑–∏–Ω–≥", "–Ω–∞–π–º", "—Ä–µ–∑–µ—Ä–≤", "–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", "–∑–∞–∫–∞–∑", "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ", "–ø–æ–ª—É—á–µ–Ω–∏–µ"],
    "–∫—Ä–µ—Å–ª–æ": ["–º–µ—Å—Ç–æ", "—Ä–∞–±–æ—á–∞—è –∑–æ–Ω–∞", "—Å—Ç–æ–ª –º–∞—Å—Ç–µ—Ä–∞", "—Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ", "–ø–æ–∑–∏—Ü–∏—è", "–∫–∞–±–∏–Ω–µ—Ç", "—Å—Ç–∞–Ω—Ü–∏—è", "–ª–æ–∫–∞—Ü–∏—è", "—Å–ø–æ—Ç", "—Ç–æ—á–∫–∞", "–∑–æ–Ω–∞ —Ä–∞–±–æ—Ç—ã", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"],
    "–º–∞—Å—Ç–µ—Ä": ["—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä", "—Å—Ç–∏–ª–∏—Å—Ç", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª", "—ç–∫—Å–ø–µ—Ä—Ç", "–≤–∏–∑–∞–∂–∏—Å—Ç", "–±—å—é—Ç–∏–º–∞—Å—Ç–µ—Ä", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥", "nail-–º–∞—Å—Ç–µ—Ä", "–±—å—é—Ç–∏-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–º–∞—Å—Ç–µ—Ä –∫—Ä–∞—Å–æ—Ç—ã"],
    "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥": ["—Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "beauty-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—Å—Ç—É–¥–∏—è", "—Ü–µ–Ω—Ç—Ä", "–æ—Ñ–∏—Å", "—Å–ø–µ–π—Å", "—Ö–∞–±", "–∑–æ–Ω–∞", "–ø–ª–æ—â–∞–¥–∫–∞", "–ª–æ–∫–∞—Ü–∏—è", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", "—Ü–µ–Ω—Ç—Ä –∫—Ä–∞—Å–æ—Ç—ã"],
    "–º–µ—Å—Ç–∞": ["–ª–æ–∫–∞—Ü–∏–∏", "–ø–æ–º–µ—â–µ–Ω–∏—è", "–∑–æ–Ω—ã", "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞", "–∫–∞–±–∏–Ω–µ—Ç—ã", "—Å—Ç—É–¥–∏–∏", "—Ç–æ—á–∫–∏", "–ø–æ–∑–∏—Ü–∏–∏", "—Å—Ç–∞–Ω—Ü–∏–∏", "–æ–±–ª–∞—Å—Ç–∏", "—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏", "—É—á–∞—Å—Ç–∫–∏"],
    "—Å–∞–ª–æ–Ω": ["—Å—Ç—É–¥–∏—è –∫—Ä–∞—Å–æ—Ç—ã", "beauty-—Ü–µ–Ω—Ç—Ä", "—Å—Ç—É–¥–∏—è", "—Ü–µ–Ω—Ç—Ä –∫—Ä–∞—Å–æ—Ç—ã", "–∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã", "–±—å—é—Ç–∏-—Å—Ç—É–¥–∏—è", "spa-—Ü–µ–Ω—Ç—Ä", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", "beauty-—Å–∞–ª–æ–Ω", "—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä"],
    "–º–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": ["–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–∫–æ–ª–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–±–ª–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–±–µ—Å—Ü–≤–µ—á–∏–≤–∞–Ω–∏–µ", "–≤—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–æ–º–±—Ä–µ", "–±–∞–ª–∞—è–∂", "—à–∞—Ç—É—à", "–æ–∫—Ä–∞—Å–∫–∞", "–ø–æ–∫—Ä–∞—Å–∫–∞"],
    "—Ç–æ—Ç–∞–ª –±–ª–æ–Ω–¥": ["–ø–æ–ª–Ω–æ–µ –±–ª–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–ª–æ–Ω–¥", "—É–ª—å—Ç—Ä–∞ –±–ª–æ–Ω–¥", "–±–µ–ª—ã–π –±–ª–æ–Ω–¥", "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥", "total blonde", "—Ä–∞–¥–∏–∫–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥", "–ª–µ–¥—è–Ω–æ–π –±–ª–æ–Ω–¥", "–ø–æ–ª–Ω–æ–µ –æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–ª–æ–Ω–¥"]
};

// --- –ú–û–î–ò–§–ò–ö–ê–¢–û–†–´ –î–õ–Ø –ó–ê–ì–û–õ–û–í–ö–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–´) ---
const TITLE_MODIFIERS = [
    "2025", "—Å—Ä–æ—á–Ω–æ", "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "–ø—Ä–µ–º–∏—É–º", "—ç–ª–∏—Ç–Ω—ã–π", "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π", "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π",
    "–≤—ã–≥–æ–¥–Ω–æ", "—É–¥–æ–±–Ω–æ", "–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ", "—Å—Ç–∏–ª—å–Ω–æ", "—Ü–µ–Ω—Ç—Ä", "–º–µ—Ç—Ä–æ", "—É–¥–æ–±–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è", "–±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–∞",
    "–ø–æ–¥ –∫–ª—é—á", "—Å–æ –≤—Å–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º", "–º–µ–±–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ", "–¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö", "–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤",
    "—Ç–æ–ø –∫–∞—á–µ—Å—Ç–≤–æ", "–ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è", "—ç–∫—Å–∫–ª—é–∑–∏–≤", "VIP", "–±–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å"
];

const DESCRIPTION_MODIFIERS = [
    "‚≠ê –õ—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è", "‚úÖ –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π", "üî• –ê–∫—Ü–∏—è –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞", "üíé –ü—Ä–µ–º–∏—É–º –ª–æ–∫–∞—Ü–∏—è",
    "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "‚ö° –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "üí∞ –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã", "üéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥"
];

// --- –¶–ï–õ–ï–í–´–ï URL –û–°–ù–û–í–ù–û–ì–û –°–ê–ô–¢–ê ---
const TARGET_URLS = [
    "https://blondeplace.ru/#about",
    "https://blondeplace.ru/#services", 
    "https://blondeplace.ru/#discount",
    "https://blondeplace.ru/#coworking",
    "https://blondeplace.ru/#masters",
    "https://blondeplace.ru/#brands",
    "https://blondeplace.ru/#news",
    "https://blondeplace.ru/#comments",
    "https://blondeplace.ru/#why",
    "https://blondeplace.ru"
];

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
const modelChoice = process.env.MODEL_CHOICE || 'gemini';
const threadId = parseInt(process.env.THREAD_ID, 10) || 1;
const apiKey = process.env.API_KEY_CURRENT;
const targetArticles = parseInt(process.env.ALPHA_ARTICLES, 10) || 250;

if (!apiKey) {
    throw new Error(`[–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ù–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω API-–∫–ª—é—á!`);
}

console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –∫–ª—é—á–æ–º ...${apiKey.slice(-4)}`);
console.log(`üéØ [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π —Å 85 —Å—Å—ã–ª–∫–∞–º–∏ –∫–∞–∂–¥–∞—è`);

// --- –ù–ê–°–¢–†–û–ô–ö–ò –ú–û–î–ï–õ–ï–ô ---
const OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions";
const DEEPSEEK_MODEL_NAME = "deepseek/deepseek-r1-0528:free";
const GEMINI_MODEL_NAME = "gemini-2.5-flash";

// --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –£–ù–ò–ö–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –í–†–ï–ú–ï–ù–ò + –ü–û–¢–û–ö–£ ---
function generateUniqueId() {
    const timestamp = Date.now();
    const random = Math.random().toString(36).substr(2, 5);
    return `${threadId}_${timestamp}_${random}`;
}

function generateVariation(keyword) {
    const words = keyword.split(' ');
    let result = '';
    
    for (const word of words) {
        const cleanWord = word.toLowerCase();
        if (SYNONYMS[cleanWord] && Math.random() > 0.5) {
            const synonyms = SYNONYMS[cleanWord];
            result += synonyms[Math.floor(Math.random() * synonyms.length)] + ' ';
        } else {
            result += word + ' ';
        }
    }
    
    return result.trim();
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –£–ù–ò–ö–ê–õ–¨–ù–´–• –ó–ê–ì–û–õ–û–í–ö–û–í (–ë–ï–ó –ö–û–õ–õ–ò–ó–ò–ô)
function createGloballyUniqueTitle(baseKeyword, postNumber) {
    const variation = generateVariation(baseKeyword);
    const modifier = TITLE_MODIFIERS[Math.floor(Math.random() * TITLE_MODIFIERS.length)];
    const uniqueId = generateUniqueId();
    
    // –í–∫–ª—é—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –¥–ª—è 100% —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const title = `${variation}: ${modifier} #${postNumber}`;
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 45 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
    if (title.length <= 45) {
        return title;
    }
    
    const words = title.split(' ');
    let result = '';
    for (const word of words) {
        if (result.length + word.length + 1 <= 45) {
            result += (result ? ' ' : '') + word;
        } else {
            break;
        }
    }
    
    return result || `${baseKeyword} #${postNumber}`;
}

function createGloballyUniqueDescription(keyword, postNumber) {
    const modifier = DESCRIPTION_MODIFIERS[Math.floor(Math.random() * DESCRIPTION_MODIFIERS.length)];
    const variation = generateVariation(keyword);
    
    const description = `${modifier} ${variation} –≤ BlondePlace! –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —É–¥–æ–±–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è, –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è. –ó–≤–æ–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! #${postNumber}`;
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 164 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª—ã–µ —Å–ª–æ–≤–∞
    if (description.length <= 164) {
        return description;
    }
    
    const words = description.split(' ');
    let result = '';
    for (const word of words) {
        if (result.length + word.length + 1 <= 164) {
            result += (result ? ' ' : '') + word;
        } else {
            break;
        }
    }
    
    return result || `${keyword} –≤ BlondePlace! –ó–≤–æ–Ω–∏—Ç–µ —Å–µ–π—á–∞—Å!`;
}

async function generateWithRetry(prompt, maxRetries = 3) {
    let delay = 2000;
    
    for (let i = 0; i < maxRetries; i++) {
        try {
            if (modelChoice === 'deepseek') {
                const response = await fetch(OPENROUTER_API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${apiKey}`,
                        'HTTP-Referer': TARGET_URL_MAIN,
                        'X-Title': 'BlondePlace-Alpha-Strike'
                    },
                    body: JSON.stringify({
                        model: DEEPSEEK_MODEL_NAME,
                        messages: [{ role: "user", content: prompt }]
                    })
                });

                if (!response.ok) {
                    if (response.status === 429) throw new Error(`429 Too Many Requests`);
                    throw new Error(`HTTP ${response.status}`);
                }

                const data = await response.json();
                return data.choices[0].message.content;
            } else {
                const genAI = new GoogleGenerativeAI(apiKey);
                const model = genAI.getGenerativeModel({ model: GEMINI_MODEL_NAME });
                const result = await model.generateContent(prompt);
                return result.response.text();
            }
        } catch (error) {
            if (i < maxRetries - 1) {
                console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ ${i + 1}/${maxRetries}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}–º—Å`);
                await new Promise(resolve => setTimeout(resolve, delay));
                delay *= 1.5;
            } else {
                throw error;
            }
        }
    }
}

// –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö (–ù–ï –õ–û–ú–ê–ï–¢ –ó–ê–ì–û–õ–û–í–ö–ò)
function generateMassiveLinksSecure(keyword, articleText) {
    const numLinks = 75 + Math.floor(Math.random() * 25); // 75-100 —Å—Å—ã–ª–æ–∫
    
    // –ê–Ω–∫–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
    const anchorTemplates = [
        keyword,
        `${keyword} –≤ –°–ü–±`,
        `–ª—É—á—à–∏–π ${keyword}`,
        `${keyword} BlondePlace`,
        `–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π ${keyword}`,
        `–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π ${keyword}`,
        `${keyword} —Ü–µ–Ω—Ç—Ä`,
        `${keyword} —Å—Ç—É–¥–∏—è`,
        `${keyword} —É—Å–ª—É–≥–∏`,
        `–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ ${keyword}`
    ];
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    const lines = articleText.split('\n');
    let processedLines = [];
    let addedLinks = 0;
    
    for (const line of lines) {
        // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å #)
        if (line.trim().startsWith('#') || addedLinks >= numLinks) {
            processedLines.push(line);
            continue;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –æ–±—ã—á–Ω—ã–µ –∞–±–∑–∞—Ü—ã
        if (line.trim().length > 50 && Math.random() > 0.7) {
            const targetUrl = TARGET_URLS[Math.floor(Math.random() * TARGET_URLS.length)];
            const anchor = anchorTemplates[Math.floor(Math.random() * anchorTemplates.length)];
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü –∞–±–∑–∞—Ü–∞
            const linkedLine = `${line} –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ <a href="${targetUrl}" target="_blank">${anchor}</a>.`;
            processedLines.push(linkedLine);
            addedLinks++;
        } else {
            processedLines.push(line);
        }
    }
    
    console.log(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${addedLinks} —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç`);
    return processedLines.join('\n');
}

async function notifyIndexNow(url) {
    const payload = JSON.stringify({
        host: "blondeplace.netlify.app",
        key: INDEXNOW_API_KEY,
        urlList: [url]
    });

    try {
        await execa('curl', ['-X', 'POST', 'https://yandex.com/indexnow', '-H', 'Content-Type: application/json; charset=utf-8', '-d', payload]);
        console.log(`[üì¢] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] IndexNow: ${url}`);
    } catch (error) {
        console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] IndexNow –æ—à–∏–±–∫–∞: ${url}`);
    }
}

async function commitToGithub(filePath, content, message) {
    try {
        const token = process.env.GITHUB_TOKEN;
        const repo = process.env.GITHUB_REPOSITORY;
        
        if (!token || !repo) {
            console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] GitHub —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã`);
            return;
        }
        
        const encodedContent = Buffer.from(content).toString('base64');
        
        const response = await fetch(`https://api.github.com/repos/${repo}/contents/${filePath}`, {
            method: 'PUT',
            headers: {
                'Authorization': `token ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message,
                content: encodedContent
            })
        });
        
        if (response.ok) {
            console.log(`[‚úÖ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –§–∞–π–ª ${filePath} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ GitHub`);
        }
    } catch (error) {
        console.warn(`[!] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub: ${error.message}`);
    }
}

async function generateAlphaArticle(keyword, postNumber) {
    console.log(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Ç–∞—Ç—å—é #${postNumber} –ø–æ –∫–ª—é—á—É: ${keyword}`);

    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –°–ö–û–†–û–°–¢–ò + SEO
    const articlePrompt = `–ù–∞–ø–∏—à–∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é SEO-—Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "${keyword}" –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã BlondePlace.

–°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–±—ä–µ–º: 6000-8000 —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–µ –±–æ–ª—å—à–µ!)
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: # H1, ## H2, ### H3 –≤ Markdown
- –¢–µ–º–∞—Ç–∏–∫–∞: ${keyword} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–∞–ª–æ–Ω–∞ BlondePlace
- –°—Ç–∏–ª—å: –û—Ç –ª–∏—Ü–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ BlondePlace
- –ë–ï–ó —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ (–¥–æ–±–∞–≤–ª—é –æ—Ç–¥–µ–ª—å–Ω–æ)
- –ë–ï–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ H1

–ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –±—ã—Å—Ç—Ä–æ!`;

    let articleText = await generateWithRetry(articlePrompt);
    
    // –°—É–ø–µ—Ä-–æ—á–∏—Å—Ç–∫–∞
    articleText = articleText.replace(/!\[.*?\]\(.*?\)/g, '');
    articleText = articleText.replace(/\[.*?\]\([^\)]*\)/g, '');
    articleText = articleText.replace(/https?:\/\/[^\s\)\]]+/g, '');
    articleText = articleText.replace(/www\.[^\s]+/g, '');
    articleText = articleText.trim();

    // –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–°–¢–ê–í–ö–ê –°–°–´–õ–û–ö
    articleText = generateMassiveLinksSecure(keyword, articleText);

    // –ì–õ–û–ë–ê–õ–¨–ù–û –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ú–ï–¢–ê-–¢–ï–ì–ò
    const uniqueTitle = createGloballyUniqueTitle(keyword, postNumber);
    const uniqueDescription = createGloballyUniqueDescription(keyword, postNumber);

    const schema = {
        "@context": "https://schema.org",
        "@type": "Article",
        "headline": uniqueTitle,
        "description": uniqueDescription,
        "author": { "@type": "Person", "name": BRAND_AUTHOR_NAME },
        "publisher": { "@type": "Organization", "name": BRAND_BLOG_NAME },
        "datePublished": new Date().toISOString(),
        "mainEntityOfPage": `${SITE_URL}/blog/post${postNumber}/`
    };

    const frontmatter = `---
title: "${uniqueTitle.replace(/"/g, '\\"')}"
description: "${uniqueDescription.replace(/"/g, '\\"')}"
keywords: "${keyword}, BlondePlace, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
pubDate: "${new Date().toISOString()}"
author: "${BRAND_AUTHOR_NAME}"
heroImage: "${FALLBACK_IMAGE_URL}"
schema: ${JSON.stringify(schema)}
---

${articleText}
`;

    return { content: frontmatter, title: uniqueTitle, description: uniqueDescription };
}

async function main() {
    console.log(`üöÄüí• [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ë–û–ï–í–û–ô –ó–ê–ü–£–°–ö ===`);
    
    try {
        const postsDir = path.join(process.cwd(), POSTS_DIR);
        await fs.mkdir(postsDir, { recursive: true });
        
        console.log(`[üéØ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –¶–µ–ª—å: ${targetArticles} —Å—Ç–∞—Ç–µ–π –ø–æ 8 –∫–ª—é—á–∞–º`);
        
        // –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –ù–£–ú–ï–†–ê–¶–ò–Ø –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–¢–û–ö–ê
        let postCounter = (threadId - 1) * 1000 + 1; // –ü–æ—Ç–æ–∫ 1: 1-1000, –ü–æ—Ç–æ–∫ 2: 1001-2000 –∏ —Ç.–¥.
        
        for (let i = 0; i < targetArticles; i++) {
            const keyword = ALPHA_KEYWORDS[i % ALPHA_KEYWORDS.length];
            const postNumber = postCounter + i;
            
            try {
                const slug = `post${postNumber}`;
                const filePath = path.join(postsDir, `${slug}.md`);
                const githubPath = `${POSTS_DIR}/${slug}.md`;
                
                const result = await generateAlphaArticle(keyword, postNumber);
                
                // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await fs.writeFile(filePath, result.content);
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GitHub
                await commitToGithub(githubPath, result.content, `üöÄüí• –ê–õ–¨–§–ê-–£–î–ê–†: –°—Ç–∞—Ç—å—è #${postNumber} - ${result.title}`);
                
                console.log(`[‚úÖ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –°—Ç–∞—Ç—å—è #${postNumber} —Å–æ–∑–¥–∞–Ω–∞: "${result.title}"`);
                console.log(`[üìè] Title: ${result.title.length} —Å–∏–º–≤–æ–ª–æ–≤, Description: ${result.description.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ IndexNow
                const url = `${SITE_URL}/blog/${slug}/`;
                await notifyIndexNow(url);
                
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
                await new Promise(resolve => setTimeout(resolve, 200));
                
            } catch (error) {
                console.error(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—å–∏ #${postCounter + i}: ${error.message}`);
                continue;
            }
        }
        
        console.log(`[üèÜ] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] === –ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===`);
        console.log(`[üìä] –°–æ–∑–¥–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${targetArticles}`);
        console.log(`[üîó] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: ~${targetArticles * 80}`);
        
    } catch (error) {
        console.error(`[üí•] [–ê–õ–¨–§–ê-–£–î–ê–† #${threadId}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error);
        process.exit(1);
    }
}

main(); 