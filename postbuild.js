// –§–∞–π–ª: postbuild.js (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π sitemap –∫–∞–∫ –≤ Butler Factory)
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SITE_URL = 'https://blondeplace.netlify.app';
const DIST_DIR = path.join(__dirname, 'dist');

async function scanHtmlFiles(dir) {
    const urls = [];
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
        const fullPath = path.join(dir, entry.name);
        
        if (entry.isDirectory()) {
            const subUrls = await scanHtmlFiles(fullPath);
            urls.push(...subUrls);
        } else if (entry.name === 'index.html') {
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            const relativePath = path.relative(DIST_DIR, fullPath);
            const urlPath = path.dirname(relativePath).replace(/\\/g, '/');
            
            // –§–ò–õ–¨–¢–†–£–ï–ú –°–õ–£–ñ–ï–ë–ù–´–ï –î–ò–†–ï–ö–¢–û–†–ò–ò
            const excludePatterns = [
                '_astro',           // Astro —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
                'admin',            // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
                'private',          // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
                '_next',            // Next.js —Ñ–∞–π–ª—ã
                '_nuxt',            // Nuxt.js —Ñ–∞–π–ª—ã
                'api',              // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                '.well-known',      // –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
                'verification'      // –§–∞–π–ª—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            ];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            const shouldExclude = excludePatterns.some(pattern => 
                urlPath.includes(pattern) || urlPath.startsWith(pattern)
            );
            
            if (shouldExclude) {
                return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç URL
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
            let url;
            if (urlPath === '.' || urlPath === '') {
                url = SITE_URL;
            } else {
                url = `${SITE_URL}/${urlPath}/`;
            }
            
            urls.push(url);
        } else if (entry.name.endsWith('.html') && !entry.name.startsWith('google') && !entry.name.startsWith('yandex') && !entry.name.includes('verification')) {
            // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –î–†–£–ì–ò–ï HTML –§–ê–ô–õ–´ (–∏—Å–∫–ª—é—á–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            const relativePath = path.relative(DIST_DIR, fullPath);
            const urlPath = relativePath.replace(/\\/g, '/').replace('.html', '');
            
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (!urlPath.includes('_astro') && !urlPath.includes('admin') && !urlPath.includes('api')) {
                const url = `${SITE_URL}/${urlPath}`;
                urls.push(url);
            }
        }
    }
    
    return urls;
}

async function generateSitemap() {
    try {
        console.log('üó∫Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π sitemap...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        try {
            await fs.access(DIST_DIR);
        } catch (error) {
            console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ build.');
            return;
        }
        
        // –°–∫–∞–Ω–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª—ã
        const urls = await scanHtmlFiles(DIST_DIR);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º URLs –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        urls.sort();
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${urls.length} —Å—Ç—Ä–∞–Ω–∏—Ü:`);
        urls.forEach(url => console.log(`  - ${url}`));
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML sitemap
        const now = new Date().toISOString();
        
        let sitemapXml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
`;
        
        urls.forEach(url => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —á–∞—Å—Ç–æ—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            let priority = '0.8';
            let changefreq = 'weekly';
            
            if (url === SITE_URL) {
                priority = '1.0';
                changefreq = 'daily';
            } else if (url.includes('/blog/') && !url.endsWith('/blog/')) {
                priority = '0.9';
                changefreq = 'monthly';
            } else if (url.endsWith('/blog/')) {
                priority = '0.9';
                changefreq = 'daily';
            }
            
            sitemapXml += `  <url>
    <loc>${url}</loc>
    <lastmod>${now}</lastmod>
    <changefreq>${changefreq}</changefreq>
    <priority>${priority}</priority>
  </url>
`;
        });
        
        sitemapXml += `</urlset>`;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º sitemap
        const sitemapPath = path.join(DIST_DIR, 'sitemap.xml');
        await fs.writeFile(sitemapPath, sitemapXml, 'utf8');
        
        console.log(`‚úÖ Sitemap —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${sitemapPath}`);
        console.log(`üìç –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${SITE_URL}/sitemap.xml`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º robots.txt
        const robotsTxt = `User-agent: *
Allow: /

Sitemap: ${SITE_URL}/sitemap.xml`;
        
        const robotsPath = path.join(DIST_DIR, 'robots.txt');
        await fs.writeFile(robotsPath, robotsTxt, 'utf8');
        
        console.log(`ü§ñ Robots.txt –æ–±–Ω–æ–≤–ª–µ–Ω: ${robotsPath}`);

  } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sitemap:', error);
        throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    generateSitemap();
        }

export default generateSitemap;
